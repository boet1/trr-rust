// MIR for `handlers::handler_flash_repay_reserve_liquidity::process` before PreCodegen

fn handlers::handler_flash_repay_reserve_liquidity::process(_1: anchor_lang::context::Context<'_, '_, '_, '_, handlers::handler_flash_repay_reserve_liquidity::FlashRepayReserveLiquidity<'_>>, _2: u64, _3: u8) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug liquidity_amount => _2;
    debug borrow_instruction_index => _3;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _4: ();
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _6: std::result::Result<(), anchor_lang::error::Error>;
    let mut _7: &anchor_lang::context::Context<'_, '_, '_, '_, handlers::handler_flash_repay_reserve_liquidity::FlashRepayReserveLiquidity<'_>>;
    let _8: &anchor_lang::context::Context<'_, '_, '_, '_, handlers::handler_flash_repay_reserve_liquidity::FlashRepayReserveLiquidity<'_>>;
    let mut _9: isize;
    let _10: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _11: !;
    let mut _12: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _13: ();
    let _14: &mut std::cell::RefMut<'_, state::reserve::Reserve>;
    let mut _15: std::cell::RefMut<'_, state::reserve::Reserve>;
    let mut _16: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::RefMut<'_, state::reserve::Reserve>>;
    let mut _17: std::result::Result<std::cell::RefMut<'_, state::reserve::Reserve>, anchor_lang::error::Error>;
    let mut _18: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _19: isize;
    let _20: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _21: !;
    let mut _22: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _23: std::cell::RefMut<'_, state::reserve::Reserve>;
    let _25: std::cell::Ref<'_, state::lending_market::LendingMarket>;
    let mut _26: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::lending_market::LendingMarket>>;
    let mut _27: std::result::Result<std::cell::Ref<'_, state::lending_market::LendingMarket>, anchor_lang::error::Error>;
    let mut _28: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _29: isize;
    let mut _31: !;
    let mut _32: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _35: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, u64>;
    let mut _36: std::result::Result<u64, anchor_lang::error::Error>;
    let mut _37: &anchor_lang::prelude::AccountInfo<'_>;
    let _38: &anchor_lang::prelude::AccountInfo<'_>;
    let _39: anchor_lang::prelude::AccountInfo<'_>;
    let mut _40: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _41: isize;
    let mut _43: !;
    let mut _44: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _47: &state::reserve::Reserve;
    let mut _48: &std::cell::RefMut<'_, state::reserve::Reserve>;
    let _49: ();
    let mut _50: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _51: std::result::Result<(), anchor_lang::error::Error>;
    let mut _52: &anchor_lang::context::Context<'_, '_, '_, '_, handlers::handler_flash_repay_reserve_liquidity::FlashRepayReserveLiquidity<'_>>;
    let _53: &anchor_lang::context::Context<'_, '_, '_, '_, handlers::handler_flash_repay_reserve_liquidity::FlashRepayReserveLiquidity<'_>>;
    let mut _54: u8;
    let mut _55: u64;
    let mut _56: isize;
    let mut _58: !;
    let mut _59: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _63: bool;
    let mut _64: &std::option::Option<anchor_lang::prelude::AccountInfo<'_>>;
    let mut _65: &std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::referral::ReferrerTokenState>>;
    let mut _66: isize;
    let mut _69: std::cell::RefMut<'_, state::referral::ReferrerTokenState>;
    let mut _70: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::RefMut<'_, state::referral::ReferrerTokenState>>;
    let mut _71: std::result::Result<std::cell::RefMut<'_, state::referral::ReferrerTokenState>, anchor_lang::error::Error>;
    let mut _72: &anchor_lang::prelude::AccountLoader<'_, state::referral::ReferrerTokenState>;
    let mut _73: isize;
    let mut _75: !;
    let mut _76: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _78: ();
    let mut _79: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _80: std::result::Result<(), anchor_lang::error::Error>;
    let mut _81: &anchor_lang::prelude::Pubkey;
    let _82: &anchor_lang::prelude::Pubkey;
    let _83: &anchor_lang::prelude::Pubkey;
    let mut _84: &state::referral::ReferrerTokenState;
    let _85: &state::referral::ReferrerTokenState;
    let mut _86: &std::cell::RefMut<'_, state::referral::ReferrerTokenState>;
    let mut _87: anchor_lang::prelude::Pubkey;
    let mut _88: &anchor_lang::prelude::AccountLoader<'_, state::referral::ReferrerTokenState>;
    let mut _89: anchor_lang::prelude::Pubkey;
    let mut _90: &state::reserve::Reserve;
    let mut _91: &std::cell::RefMut<'_, state::reserve::Reserve>;
    let mut _92: anchor_lang::prelude::Pubkey;
    let mut _93: &anchor_lang::prelude::AccountInfo<'_>;
    let _94: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _95: std::option::Option<&anchor_lang::prelude::AccountInfo<'_>>;
    let mut _96: &std::option::Option<anchor_lang::prelude::AccountInfo<'_>>;
    let mut _97: anchor_lang::prelude::Pubkey;
    let mut _98: &anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>;
    let mut _99: isize;
    let mut _101: !;
    let mut _102: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _104: &anchor_lang::prelude::AccountLoader<'_, state::referral::ReferrerTokenState>;
    let _105: ();
    let mut _106: &str;
    let _107: &str;
    let mut _110: (u64, u64);
    let mut _111: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, (u64, u64)>;
    let mut _112: std::result::Result<(u64, u64), anchor_lang::error::Error>;
    let mut _113: &state::lending_market::LendingMarket;
    let _114: &state::lending_market::LendingMarket;
    let mut _115: &std::cell::Ref<'_, state::lending_market::LendingMarket>;
    let mut _116: &mut state::reserve::Reserve;
    let mut _117: &mut state::reserve::Reserve;
    let mut _118: &mut std::cell::RefMut<'_, state::reserve::Reserve>;
    let mut _119: u64;
    let mut _120: u64;
    let mut _121: std::result::Result<u64, std::num::TryFromIntError>;
    let mut _122: i64;
    let mut _123: anchor_lang::prelude::Clock;
    let mut _124: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Clock>;
    let mut _125: std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError>;
    let mut _126: isize;
    let mut _128: !;
    let mut _129: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _131: std::option::Option<&anchor_lang::prelude::AccountLoader<'_, state::referral::ReferrerTokenState>>;
    let mut _132: isize;
    let mut _134: !;
    let mut _135: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _137: ();
    let mut _138: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _139: std::result::Result<(), anchor_lang::error::Error>;
    let mut _140: anchor_lang::prelude::AccountInfo<'_>;
    let mut _141: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let mut _142: anchor_lang::prelude::AccountInfo<'_>;
    let mut _143: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _144: anchor_lang::prelude::AccountInfo<'_>;
    let mut _145: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _146: anchor_lang::prelude::AccountInfo<'_>;
    let mut _147: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _148: anchor_lang::prelude::AccountInfo<'_>;
    let mut _149: &anchor_lang::prelude::Signer<'_>;
    let mut _150: u64;
    let mut _151: u8;
    let mut _152: &anchor_spl::token_2022::spl_token_2022::state::Mint;
    let mut _153: &anchor_spl::token_interface::Mint;
    let _154: &anchor_spl::token_interface::Mint;
    let mut _155: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _156: isize;
    let mut _158: !;
    let mut _159: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _161: ();
    let mut _162: bool;
    let mut _163: u64;
    let _164: ();
    let mut _165: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _166: std::result::Result<(), anchor_lang::error::Error>;
    let mut _167: anchor_lang::prelude::AccountInfo<'_>;
    let mut _168: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let mut _169: anchor_lang::prelude::AccountInfo<'_>;
    let mut _170: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _171: anchor_lang::prelude::AccountInfo<'_>;
    let mut _172: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _173: anchor_lang::prelude::AccountInfo<'_>;
    let mut _174: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _175: anchor_lang::prelude::AccountInfo<'_>;
    let mut _176: &anchor_lang::prelude::Signer<'_>;
    let mut _177: u64;
    let mut _178: u8;
    let mut _179: &anchor_spl::token_2022::spl_token_2022::state::Mint;
    let mut _180: &anchor_spl::token_interface::Mint;
    let _181: &anchor_spl::token_interface::Mint;
    let mut _182: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _183: isize;
    let mut _185: !;
    let mut _186: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _188: ();
    let mut _189: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _190: std::result::Result<(), anchor_lang::error::Error>;
    let mut _191: u64;
    let mut _192: std::result::Result<u64, anchor_lang::error::Error>;
    let mut _193: &anchor_lang::prelude::AccountInfo<'_>;
    let _194: &anchor_lang::prelude::AccountInfo<'_>;
    let _195: anchor_lang::prelude::AccountInfo<'_>;
    let mut _196: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _197: u64;
    let mut _198: &state::reserve::Reserve;
    let mut _199: &std::cell::RefMut<'_, state::reserve::Reserve>;
    let mut _200: u64;
    let mut _201: u64;
    let mut _202: state::types::LendingAction;
    let mut _203: u64;
    let mut _204: isize;
    let mut _206: !;
    let mut _207: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _209: ();
    let mut _210: &mut handlers::handler_flash_repay_reserve_liquidity::FlashRepayReserveLiquidity<'_>;
    let mut _211: &mut handlers::handler_flash_repay_reserve_liquidity::FlashRepayReserveLiquidity<'_>;
    let mut _212: &mut handlers::handler_flash_repay_reserve_liquidity::FlashRepayReserveLiquidity<'_>;
    let mut _213: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _214: &mut handlers::handler_flash_repay_reserve_liquidity::FlashRepayReserveLiquidity<'_>;
    let mut _215: &mut handlers::handler_flash_repay_reserve_liquidity::FlashRepayReserveLiquidity<'_>;
    let mut _216: &mut handlers::handler_flash_repay_reserve_liquidity::FlashRepayReserveLiquidity<'_>;
    let mut _217: &mut handlers::handler_flash_repay_reserve_liquidity::FlashRepayReserveLiquidity<'_>;
    let mut _218: &mut handlers::handler_flash_repay_reserve_liquidity::FlashRepayReserveLiquidity<'_>;
    let mut _219: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let mut _220: &mut handlers::handler_flash_repay_reserve_liquidity::FlashRepayReserveLiquidity<'_>;
    let mut _221: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _222: &mut handlers::handler_flash_repay_reserve_liquidity::FlashRepayReserveLiquidity<'_>;
    let mut _223: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _224: &mut handlers::handler_flash_repay_reserve_liquidity::FlashRepayReserveLiquidity<'_>;
    let mut _225: &mut handlers::handler_flash_repay_reserve_liquidity::FlashRepayReserveLiquidity<'_>;
    let mut _226: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let mut _227: &mut handlers::handler_flash_repay_reserve_liquidity::FlashRepayReserveLiquidity<'_>;
    let mut _228: &mut handlers::handler_flash_repay_reserve_liquidity::FlashRepayReserveLiquidity<'_>;
    let mut _229: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let mut _230: &mut handlers::handler_flash_repay_reserve_liquidity::FlashRepayReserveLiquidity<'_>;
    let mut _231: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _232: &mut handlers::handler_flash_repay_reserve_liquidity::FlashRepayReserveLiquidity<'_>;
    let mut _233: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _234: &mut handlers::handler_flash_repay_reserve_liquidity::FlashRepayReserveLiquidity<'_>;
    let mut _235: &mut handlers::handler_flash_repay_reserve_liquidity::FlashRepayReserveLiquidity<'_>;
    let mut _236: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let mut _237: &mut handlers::handler_flash_repay_reserve_liquidity::FlashRepayReserveLiquidity<'_>;
    let mut _238: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _239: bool;
    let mut _240: bool;
    let mut _241: bool;
    let mut _242: bool;
    let mut _243: bool;
    let mut _244: bool;
    let mut _245: bool;
    let mut _246: bool;
    let mut _247: bool;
    let mut _248: bool;
    let mut _249: bool;
    let mut _250: bool;
    let mut _251: isize;
    let mut _252: isize;
    let mut _253: isize;
    let mut _254: isize;
    let mut _255: isize;
    let mut _256: isize;
    let mut _257: isize;
    let mut _258: isize;
    let mut _259: isize;
    let mut _260: isize;
    let mut _261: isize;
    let mut _262: isize;
    let mut _263: isize;
    let mut _264: isize;
    let mut _265: isize;
    let mut _266: isize;
    let mut _267: isize;
    let mut _268: isize;
    let mut _269: isize;
    let mut _270: isize;
    let mut _271: isize;
    let mut _272: isize;
    let mut _273: isize;
    let mut _274: isize;
    let mut _275: isize;
    let mut _276: isize;
    let mut _277: isize;
    let mut _278: isize;
    let mut _279: isize;
    let mut _280: isize;
    let mut _281: isize;
    let mut _282: isize;
    let mut _283: isize;
    let mut _284: isize;
    let mut _285: isize;
    let mut _286: isize;
    let mut _287: isize;
    let mut _288: isize;
    let mut _289: isize;
    let mut _290: isize;
    let mut _291: isize;
    let mut _292: isize;
    let mut _293: isize;
    let mut _294: isize;
    let mut _295: isize;
    let mut _296: isize;
    let mut _297: isize;
    let mut _298: isize;
    let mut _299: isize;
    let mut _300: isize;
    let mut _301: isize;
    let mut _302: isize;
    let mut _303: isize;
    let mut _304: isize;
    let mut _305: isize;
    let mut _306: isize;
    let mut _307: isize;
    let mut _308: isize;
    let mut _309: isize;
    let mut _310: isize;
    let mut _311: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _312: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _313: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _314: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _315: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _316: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _317: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _318: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _319: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _320: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    scope 1 {
        debug residual => _10;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _13;
        scope 4 {
        }
    }
    scope 5 {
        debug reserve => _14;
        let _24: &std::cell::Ref<'_, state::lending_market::LendingMarket>;
        let _30: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
        let _33: std::cell::Ref<'_, state::lending_market::LendingMarket>;
        scope 10 {
            debug lending_market => _24;
            let _34: u64;
            let _42: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _45: u64;
            scope 15 {
                debug initial_reserve_token_balance => _34;
                let _46: u64;
                scope 20 {
                    debug initial_reserve_available_liquidity => _46;
                    let _57: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                    let _60: ();
                    let _61: &std::option::Option<anchor_lang::prelude::AccountInfo<'_>>;
                    scope 21 {
                        debug residual => _57;
                        scope 22 {
                        }
                    }
                    scope 23 {
                        debug val => _60;
                        scope 24 {
                        }
                    }
                    scope 25 {
                        debug referrer_account => _61;
                        let _62: std::option::Option<&anchor_lang::prelude::AccountLoader<'_, state::referral::ReferrerTokenState>>;
                        let _67: &anchor_lang::prelude::AccountLoader<'_, state::referral::ReferrerTokenState>;
                        scope 26 {
                            debug referrer_token_state_loader => _62;
                            let _108: u64;
                            let _109: u64;
                            let _127: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                            let _130: anchor_lang::prelude::Clock;
                            let _133: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                            let _136: (u64, u64);
                            scope 37 {
                                debug flash_loan_amount_with_referrer_fee => _108;
                                debug reserve_origination_fee => _109;
                                let _157: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                let _160: ();
                                let _184: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                let _187: ();
                                let _205: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                let _208: ();
                                scope 46 {
                                    debug residual => _157;
                                    scope 47 {
                                    }
                                }
                                scope 48 {
                                    debug val => _160;
                                    scope 49 {
                                    }
                                }
                                scope 50 {
                                    debug residual => _184;
                                    scope 51 {
                                    }
                                }
                                scope 52 {
                                    debug val => _187;
                                    scope 53 {
                                    }
                                }
                                scope 54 {
                                    debug residual => _205;
                                    scope 55 {
                                    }
                                }
                                scope 56 {
                                    debug val => _208;
                                    scope 57 {
                                    }
                                }
                            }
                            scope 38 {
                                debug residual => _127;
                                scope 39 {
                                }
                            }
                            scope 40 {
                                debug val => _130;
                                scope 41 {
                                }
                            }
                            scope 42 {
                                debug residual => _133;
                                scope 43 {
                                }
                            }
                            scope 44 {
                                debug val => _136;
                                scope 45 {
                                }
                            }
                        }
                        scope 27 {
                            debug referrer_token_state_loader => _67;
                            let _68: &mut std::cell::RefMut<'_, state::referral::ReferrerTokenState>;
                            let _74: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                            let _77: std::cell::RefMut<'_, state::referral::ReferrerTokenState>;
                            scope 28 {
                                debug referrer_token_state => _68;
                                let _100: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                let _103: ();
                                scope 33 {
                                    debug residual => _100;
                                    scope 34 {
                                    }
                                }
                                scope 35 {
                                    debug val => _103;
                                    scope 36 {
                                    }
                                }
                            }
                            scope 29 {
                                debug residual => _74;
                                scope 30 {
                                }
                            }
                            scope 31 {
                                debug val => _77;
                                scope 32 {
                                }
                            }
                        }
                    }
                }
            }
            scope 16 {
                debug residual => _42;
                scope 17 {
                }
            }
            scope 18 {
                debug val => _45;
                scope 19 {
                }
            }
        }
        scope 11 {
            debug residual => _30;
            scope 12 {
            }
        }
        scope 13 {
            debug val => _33;
            scope 14 {
            }
        }
    }
    scope 6 {
        debug residual => _20;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _23;
        scope 9 {
        }
    }

    bb0: {
        _250 = const false;
        _249 = const false;
        _248 = const false;
        _247 = const false;
        _246 = const false;
        _245 = const false;
        _244 = const false;
        _243 = const false;
        _242 = const false;
        _241 = const false;
        _240 = const false;
        _239 = const false;
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = &_1;
        _7 = &(*_8);
        _6 = flash_repay_reserve_liquidity_checks(move _7) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_7);
        _5 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _6) -> [return: bb2, unwind: bb125];
    }

    bb2: {
        StorageDead(_6);
        _9 = discriminant(_5);
        switchInt(move _9) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_13);
        _13 = ((_5 as Continue).0: ());
        _4 = _13;
        StorageDead(_13);
        _251 = discriminant(_5);
        StorageDead(_8);
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        _210 = deref_copy (_1.1: &mut handlers::handler_flash_repay_reserve_liquidity::FlashRepayReserveLiquidity<'_>);
        _18 = &((*_210).3: anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>);
        _17 = anchor_lang::prelude::AccountLoader::<'_, reserve::Reserve>::load_mut(move _18) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_10);
        _10 = move ((_5 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_12);
        _12 = move _10;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _12) -> [return: bb6, unwind: bb157];
    }

    bb6: {
        StorageDead(_12);
        StorageDead(_10);
        _297 = discriminant(_5);
        StorageDead(_8);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb119;
    }

    bb7: {
        StorageDead(_18);
        _16 = <std::result::Result<RefMut<'_, reserve::Reserve>, anchor_lang::error::Error> as Try>::branch(move _17) -> [return: bb8, unwind: bb125];
    }

    bb8: {
        StorageDead(_17);
        _19 = discriminant(_16);
        switchInt(move _19) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_23);
        _23 = move ((_16 as Continue).0: std::cell::RefMut<'_, state::reserve::Reserve>);
        _15 = move _23;
        StorageDead(_23);
        _14 = &mut _15;
        _253 = discriminant(_16);
        StorageDead(_16);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        _211 = deref_copy (_1.1: &mut handlers::handler_flash_repay_reserve_liquidity::FlashRepayReserveLiquidity<'_>);
        _28 = &((*_211).2: anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>);
        _27 = anchor_lang::prelude::AccountLoader::<'_, state::lending_market::LendingMarket>::load(move _28) -> [return: bb12, unwind: bb124];
    }

    bb10: {
        StorageLive(_20);
        _20 = move ((_16 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_22);
        _22 = move _20;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _22) -> [return: bb11, unwind: bb156];
    }

    bb11: {
        StorageDead(_22);
        StorageDead(_20);
        _295 = discriminant(_16);
        StorageDead(_16);
        goto -> bb118;
    }

    bb12: {
        StorageDead(_28);
        _26 = <std::result::Result<Ref<'_, state::lending_market::LendingMarket>, anchor_lang::error::Error> as Try>::branch(move _27) -> [return: bb13, unwind: bb124];
    }

    bb13: {
        StorageDead(_27);
        _29 = discriminant(_26);
        switchInt(move _29) -> [0: bb14, 1: bb15, otherwise: bb4];
    }

    bb14: {
        StorageLive(_33);
        _33 = move ((_26 as Continue).0: std::cell::Ref<'_, state::lending_market::LendingMarket>);
        _25 = move _33;
        StorageDead(_33);
        _24 = &_25;
        _255 = discriminant(_26);
        StorageDead(_26);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        _212 = deref_copy (_1.1: &mut handlers::handler_flash_repay_reserve_liquidity::FlashRepayReserveLiquidity<'_>);
        _213 = deref_copy ((*_212).5: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _311 = (((_213.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _40 = &(*_311);
        _39 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _40) -> [return: bb17, unwind: bb123];
    }

    bb15: {
        StorageLive(_30);
        _30 = move ((_26 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_32);
        _32 = move _30;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _32) -> [return: bb16, unwind: bb155];
    }

    bb16: {
        StorageDead(_32);
        StorageDead(_30);
        _293 = discriminant(_26);
        StorageDead(_26);
        goto -> bb117;
    }

    bb17: {
        StorageDead(_40);
        _38 = &_39;
        _37 = &(*_38);
        _36 = amount(move _37) -> [return: bb18, unwind: bb122];
    }

    bb18: {
        StorageDead(_37);
        _35 = <std::result::Result<u64, anchor_lang::error::Error> as Try>::branch(move _36) -> [return: bb19, unwind: bb122];
    }

    bb19: {
        StorageDead(_36);
        _41 = discriminant(_35);
        switchInt(move _41) -> [0: bb20, 1: bb21, otherwise: bb4];
    }

    bb20: {
        StorageLive(_45);
        _45 = ((_35 as Continue).0: u64);
        _34 = _45;
        StorageDead(_45);
        _257 = discriminant(_35);
        drop(_39) -> [return: bb23, unwind: bb123];
    }

    bb21: {
        StorageLive(_42);
        _42 = move ((_35 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_44);
        _44 = move _42;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _44) -> [return: bb22, unwind: bb154];
    }

    bb22: {
        StorageDead(_44);
        StorageDead(_42);
        _291 = discriminant(_35);
        drop(_39) -> [return: bb115, unwind: bb123];
    }

    bb23: {
        StorageDead(_39);
        StorageDead(_38);
        StorageDead(_35);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        _48 = &(*_14);
        _47 = <RefMut<'_, reserve::Reserve> as Deref>::deref(move _48) -> [return: bb24, unwind: bb123];
    }

    bb24: {
        StorageDead(_48);
        _46 = (((*_47).5: state::reserve::ReserveLiquidity).3: u64);
        StorageDead(_47);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        _53 = &_1;
        _52 = &(*_53);
        StorageLive(_54);
        _54 = _3;
        StorageLive(_55);
        _55 = _2;
        _51 = flash_repay_checks(move _52, move _54, move _55) -> [return: bb25, unwind: bb123];
    }

    bb25: {
        StorageDead(_55);
        StorageDead(_54);
        StorageDead(_52);
        _50 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _51) -> [return: bb26, unwind: bb123];
    }

    bb26: {
        StorageDead(_51);
        _56 = discriminant(_50);
        switchInt(move _56) -> [0: bb27, 1: bb28, otherwise: bb4];
    }

    bb27: {
        StorageLive(_60);
        _60 = ((_50 as Continue).0: ());
        _49 = _60;
        StorageDead(_60);
        _259 = discriminant(_50);
        StorageDead(_53);
        StorageDead(_50);
        StorageDead(_49);
        StorageLive(_61);
        _214 = deref_copy (_1.1: &mut handlers::handler_flash_repay_reserve_liquidity::FlashRepayReserveLiquidity<'_>);
        _61 = &((*_214).9: std::option::Option<anchor_lang::prelude::AccountInfo<'_>>);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        _64 = &(*_61);
        _63 = std::option::Option::<anchor_lang::prelude::AccountInfo<'_>>::is_some(move _64) -> [return: bb30, unwind: bb123];
    }

    bb28: {
        StorageLive(_57);
        _57 = move ((_50 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_59);
        _59 = move _57;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _59) -> [return: bb29, unwind: bb153];
    }

    bb29: {
        StorageDead(_59);
        StorageDead(_57);
        _289 = discriminant(_50);
        StorageDead(_53);
        StorageDead(_50);
        StorageDead(_49);
        goto -> bb114;
    }

    bb30: {
        switchInt(move _63) -> [0: bb54, otherwise: bb31];
    }

    bb31: {
        StorageDead(_64);
        StorageLive(_65);
        _215 = deref_copy (_1.1: &mut handlers::handler_flash_repay_reserve_liquidity::FlashRepayReserveLiquidity<'_>);
        _65 = &((*_215).8: std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::referral::ReferrerTokenState>>);
        _66 = discriminant((*_65));
        switchInt(move _66) -> [0: bb32, 1: bb33, otherwise: bb4];
    }

    bb32: {
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        _107 = const "No referrer account provided";
        _106 = &(*_107);
        _105 = solana_program::log::sol_log(move _106) -> [return: bb52, unwind: bb123];
    }

    bb33: {
        StorageLive(_67);
        _67 = &(((*_65) as Some).0: anchor_lang::prelude::AccountLoader<'_, state::referral::ReferrerTokenState>);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        _72 = &(*_67);
        _71 = anchor_lang::prelude::AccountLoader::<'_, referral::ReferrerTokenState>::load_mut(move _72) -> [return: bb34, unwind: bb123];
    }

    bb34: {
        StorageDead(_72);
        _70 = <std::result::Result<RefMut<'_, referral::ReferrerTokenState>, anchor_lang::error::Error> as Try>::branch(move _71) -> [return: bb35, unwind: bb123];
    }

    bb35: {
        StorageDead(_71);
        _73 = discriminant(_70);
        switchInt(move _73) -> [0: bb36, 1: bb37, otherwise: bb4];
    }

    bb36: {
        StorageLive(_77);
        _77 = move ((_70 as Continue).0: std::cell::RefMut<'_, state::referral::ReferrerTokenState>);
        _69 = move _77;
        StorageDead(_77);
        _68 = &mut _69;
        _261 = discriminant(_70);
        StorageDead(_70);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        _83 = const {alloc279: &anchor_lang::prelude::Pubkey};
        _82 = &(*_83);
        _81 = &(*_82);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        _86 = &(*_68);
        _85 = <RefMut<'_, referral::ReferrerTokenState> as Deref>::deref(move _86) -> [return: bb39, unwind: bb121];
    }

    bb37: {
        StorageLive(_74);
        _74 = move ((_70 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_76);
        _76 = move _74;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _76) -> [return: bb38, unwind: bb152];
    }

    bb38: {
        StorageDead(_76);
        StorageDead(_74);
        _287 = discriminant(_70);
        StorageDead(_70);
        goto -> bb112;
    }

    bb39: {
        _84 = &(*_85);
        StorageDead(_86);
        StorageLive(_87);
        StorageLive(_88);
        _88 = &(*_67);
        _87 = <anchor_lang::prelude::AccountLoader<'_, referral::ReferrerTokenState> as anchor_lang::Key>::key(move _88) -> [return: bb40, unwind: bb121];
    }

    bb40: {
        StorageDead(_88);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        _91 = &(*_14);
        _90 = <RefMut<'_, reserve::Reserve> as Deref>::deref(move _91) -> [return: bb41, unwind: bb121];
    }

    bb41: {
        StorageDead(_91);
        _89 = (((*_90).5: state::reserve::ReserveLiquidity).0: anchor_lang::prelude::Pubkey);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        _96 = &(*_61);
        _95 = std::option::Option::<anchor_lang::prelude::AccountInfo<'_>>::as_ref(move _96) -> [return: bb42, unwind: bb121];
    }

    bb42: {
        StorageDead(_96);
        _94 = std::option::Option::<&anchor_lang::prelude::AccountInfo<'_>>::unwrap(move _95) -> [return: bb43, unwind: bb121];
    }

    bb43: {
        _93 = &(*_94);
        StorageDead(_95);
        _92 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _93) -> [return: bb44, unwind: bb121];
    }

    bb44: {
        StorageDead(_93);
        StorageLive(_97);
        StorageLive(_98);
        _216 = deref_copy (_1.1: &mut handlers::handler_flash_repay_reserve_liquidity::FlashRepayReserveLiquidity<'_>);
        _98 = &((*_216).3: anchor_lang::prelude::AccountLoader<'_, state::reserve::Reserve>);
        _97 = <anchor_lang::prelude::AccountLoader<'_, reserve::Reserve> as anchor_lang::Key>::key(move _98) -> [return: bb45, unwind: bb121];
    }

    bb45: {
        StorageDead(_98);
        _80 = lending_checks::validate_referrer_token_state(move _81, move _84, move _87, move _89, move _92, move _97) -> [return: bb46, unwind: bb121];
    }

    bb46: {
        StorageDead(_97);
        StorageDead(_92);
        StorageDead(_89);
        StorageDead(_87);
        StorageDead(_84);
        StorageDead(_81);
        _79 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _80) -> [return: bb47, unwind: bb121];
    }

    bb47: {
        StorageDead(_80);
        _99 = discriminant(_79);
        switchInt(move _99) -> [0: bb48, 1: bb49, otherwise: bb4];
    }

    bb48: {
        StorageLive(_103);
        _103 = ((_79 as Continue).0: ());
        _78 = _103;
        StorageDead(_103);
        _263 = discriminant(_79);
        StorageDead(_94);
        StorageDead(_90);
        StorageDead(_85);
        StorageDead(_83);
        StorageDead(_82);
        StorageDead(_79);
        StorageDead(_78);
        StorageLive(_104);
        _104 = _67;
        _62 = std::option::Option::<&anchor_lang::prelude::AccountLoader<'_, referral::ReferrerTokenState>>::Some(move _104);
        StorageDead(_104);
        drop(_69) -> [return: bb51, unwind: bb123];
    }

    bb49: {
        StorageLive(_100);
        _100 = move ((_79 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_102);
        _102 = move _100;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _102) -> [return: bb50, unwind: bb151];
    }

    bb50: {
        StorageDead(_102);
        StorageDead(_100);
        _285 = discriminant(_79);
        StorageDead(_94);
        StorageDead(_90);
        StorageDead(_85);
        StorageDead(_83);
        StorageDead(_82);
        StorageDead(_79);
        StorageDead(_78);
        drop(_69) -> [return: bb112, unwind: bb123];
    }

    bb51: {
        StorageDead(_69);
        StorageDead(_68);
        StorageDead(_67);
        goto -> bb53;
    }

    bb52: {
        StorageDead(_106);
        StorageDead(_107);
        StorageDead(_105);
        _62 = std::option::Option::<&anchor_lang::prelude::AccountLoader<'_, referral::ReferrerTokenState>>::None;
        goto -> bb53;
    }

    bb53: {
        StorageDead(_65);
        goto -> bb55;
    }

    bb54: {
        StorageDead(_64);
        _62 = std::option::Option::<&anchor_lang::prelude::AccountLoader<'_, referral::ReferrerTokenState>>::None;
        goto -> bb55;
    }

    bb55: {
        StorageDead(_63);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        _115 = &(*_24);
        _114 = <Ref<'_, state::lending_market::LendingMarket> as Deref>::deref(move _115) -> [return: bb56, unwind: bb123];
    }

    bb56: {
        _113 = &(*_114);
        StorageDead(_115);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        _118 = &mut (*_14);
        _117 = <RefMut<'_, reserve::Reserve> as DerefMut>::deref_mut(move _118) -> [return: bb57, unwind: bb123];
    }

    bb57: {
        _116 = &mut (*_117);
        StorageDead(_118);
        StorageLive(_119);
        _119 = _2;
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        _125 = <anchor_lang::prelude::Clock as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb58, unwind: bb123];
    }

    bb58: {
        _124 = <std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError> as Try>::branch(move _125) -> [return: bb59, unwind: bb123];
    }

    bb59: {
        _239 = const true;
        _240 = const true;
        StorageDead(_125);
        _126 = discriminant(_124);
        switchInt(move _126) -> [0: bb60, 1: bb61, otherwise: bb4];
    }

    bb60: {
        StorageLive(_130);
        _130 = move ((_124 as Continue).0: anchor_lang::prelude::Clock);
        _123 = move _130;
        StorageDead(_130);
        _122 = (_123.4: i64);
        _121 = <u64 as TryFrom<i64>>::try_from(move _122) -> [return: bb63, unwind: bb150];
    }

    bb61: {
        StorageLive(_127);
        _127 = move ((_124 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_129);
        _129 = move _127;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _129) -> [return: bb62, unwind: bb150];
    }

    bb62: {
        StorageDead(_129);
        StorageDead(_127);
        StorageDead(_122);
        StorageDead(_121);
        StorageDead(_120);
        StorageDead(_119);
        StorageDead(_116);
        StorageDead(_113);
        StorageDead(_112);
        goto -> bb111;
    }

    bb63: {
        StorageDead(_122);
        _120 = std::result::Result::<u64, TryFromIntError>::unwrap(move _121) -> [return: bb64, unwind: bb150];
    }

    bb64: {
        StorageDead(_121);
        StorageLive(_131);
        _131 = _62;
        _112 = lending_operations::flash_repay_reserve_liquidity::<'_, anchor_lang::prelude::AccountLoader<'_, referral::ReferrerTokenState>>(move _113, move _116, move _119, move _120, move _131) -> [return: bb65, unwind: bb150];
    }

    bb65: {
        StorageDead(_131);
        StorageDead(_120);
        StorageDead(_119);
        StorageDead(_116);
        StorageDead(_113);
        _111 = <std::result::Result<(u64, u64), anchor_lang::error::Error> as Try>::branch(move _112) -> [return: bb66, unwind: bb150];
    }

    bb66: {
        StorageDead(_112);
        _132 = discriminant(_111);
        switchInt(move _132) -> [0: bb67, 1: bb68, otherwise: bb4];
    }

    bb67: {
        StorageLive(_136);
        _136 = ((_111 as Continue).0: (u64, u64));
        _110 = _136;
        StorageDead(_136);
        StorageLive(_108);
        _108 = (_110.0: u64);
        StorageLive(_109);
        _109 = (_110.1: u64);
        _265 = discriminant(_111);
        _267 = discriminant(_124);
        _239 = const false;
        _240 = const false;
        StorageDead(_124);
        StorageDead(_123);
        StorageDead(_117);
        StorageDead(_114);
        StorageDead(_111);
        StorageDead(_110);
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        StorageLive(_140);
        StorageLive(_141);
        _217 = deref_copy (_1.1: &mut handlers::handler_flash_repay_reserve_liquidity::FlashRepayReserveLiquidity<'_>);
        _141 = &((*_217).11: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>);
        _140 = <anchor_lang::prelude::Interface<'_, TokenInterface> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _141) -> [return: bb70, unwind: bb123];
    }

    bb68: {
        StorageLive(_133);
        _133 = move ((_111 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_135);
        _135 = move _133;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _135) -> [return: bb69, unwind: bb149];
    }

    bb69: {
        StorageDead(_135);
        StorageDead(_133);
        _281 = discriminant(_111);
        goto -> bb111;
    }

    bb70: {
        _250 = const true;
        StorageDead(_141);
        StorageLive(_142);
        StorageLive(_143);
        _218 = deref_copy (_1.1: &mut handlers::handler_flash_repay_reserve_liquidity::FlashRepayReserveLiquidity<'_>);
        _219 = deref_copy ((*_218).4: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>);
        _312 = (((_219.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _143 = &(*_312);
        _142 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _143) -> [return: bb71, unwind: bb148];
    }

    bb71: {
        _249 = const true;
        StorageDead(_143);
        StorageLive(_144);
        StorageLive(_145);
        _220 = deref_copy (_1.1: &mut handlers::handler_flash_repay_reserve_liquidity::FlashRepayReserveLiquidity<'_>);
        _221 = deref_copy ((*_220).6: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _313 = (((_221.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _145 = &(*_313);
        _144 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _145) -> [return: bb72, unwind: bb146];
    }

    bb72: {
        _248 = const true;
        StorageDead(_145);
        StorageLive(_146);
        StorageLive(_147);
        _222 = deref_copy (_1.1: &mut handlers::handler_flash_repay_reserve_liquidity::FlashRepayReserveLiquidity<'_>);
        _223 = deref_copy ((*_222).5: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _314 = (((_223.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _147 = &(*_314);
        _146 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _147) -> [return: bb73, unwind: bb144];
    }

    bb73: {
        _247 = const true;
        StorageDead(_147);
        StorageLive(_148);
        StorageLive(_149);
        _224 = deref_copy (_1.1: &mut handlers::handler_flash_repay_reserve_liquidity::FlashRepayReserveLiquidity<'_>);
        _149 = &((*_224).0: anchor_lang::prelude::Signer<'_>);
        _148 = <anchor_lang::prelude::Signer<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _149) -> [return: bb74, unwind: bb142];
    }

    bb74: {
        _246 = const true;
        StorageDead(_149);
        StorageLive(_150);
        _150 = _108;
        StorageLive(_151);
        StorageLive(_152);
        StorageLive(_153);
        StorageLive(_154);
        StorageLive(_155);
        _225 = deref_copy (_1.1: &mut handlers::handler_flash_repay_reserve_liquidity::FlashRepayReserveLiquidity<'_>);
        _226 = deref_copy ((*_225).4: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>);
        _315 = (((_226.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _155 = &(*_315);
        _154 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as Deref>::deref(move _155) -> [return: bb75, unwind: bb140];
    }

    bb75: {
        _153 = &(*_154);
        _152 = <anchor_spl::token_interface::Mint as Deref>::deref(move _153) -> [return: bb76, unwind: bb140];
    }

    bb76: {
        StorageDead(_155);
        StorageDead(_153);
        _151 = ((*_152).2: u8);
        _250 = const false;
        _249 = const false;
        _248 = const false;
        _247 = const false;
        _246 = const false;
        _139 = repay_obligation_liquidity_transfer(move _140, move _142, move _144, move _146, move _148, move _150, move _151) -> [return: bb77, unwind: bb140];
    }

    bb77: {
        StorageDead(_151);
        StorageDead(_150);
        _246 = const false;
        StorageDead(_148);
        _247 = const false;
        StorageDead(_146);
        _248 = const false;
        StorageDead(_144);
        _249 = const false;
        StorageDead(_142);
        _250 = const false;
        StorageDead(_140);
        _138 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _139) -> [return: bb78, unwind: bb123];
    }

    bb78: {
        StorageDead(_139);
        _156 = discriminant(_138);
        switchInt(move _156) -> [0: bb79, 1: bb80, otherwise: bb4];
    }

    bb79: {
        StorageLive(_160);
        _160 = ((_138 as Continue).0: ());
        _137 = _160;
        StorageDead(_160);
        _269 = discriminant(_138);
        StorageDead(_154);
        StorageDead(_152);
        StorageDead(_138);
        StorageDead(_137);
        StorageLive(_161);
        StorageLive(_162);
        StorageLive(_163);
        _163 = _109;
        _162 = Gt(move _163, const 0_u64);
        switchInt(move _162) -> [0: bb95, otherwise: bb82];
    }

    bb80: {
        StorageLive(_157);
        _157 = move ((_138 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_159);
        _159 = move _157;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _159) -> [return: bb81, unwind: bb138];
    }

    bb81: {
        StorageDead(_159);
        StorageDead(_157);
        _279 = discriminant(_138);
        StorageDead(_154);
        StorageDead(_152);
        StorageDead(_138);
        StorageDead(_137);
        goto -> bb110;
    }

    bb82: {
        StorageDead(_163);
        StorageLive(_164);
        StorageLive(_165);
        StorageLive(_166);
        StorageLive(_167);
        StorageLive(_168);
        _227 = deref_copy (_1.1: &mut handlers::handler_flash_repay_reserve_liquidity::FlashRepayReserveLiquidity<'_>);
        _168 = &((*_227).11: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>);
        _167 = <anchor_lang::prelude::Interface<'_, TokenInterface> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _168) -> [return: bb83, unwind: bb123];
    }

    bb83: {
        _245 = const true;
        StorageDead(_168);
        StorageLive(_169);
        StorageLive(_170);
        _228 = deref_copy (_1.1: &mut handlers::handler_flash_repay_reserve_liquidity::FlashRepayReserveLiquidity<'_>);
        _229 = deref_copy ((*_228).4: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>);
        _316 = (((_229.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _170 = &(*_316);
        _169 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _170) -> [return: bb84, unwind: bb137];
    }

    bb84: {
        _244 = const true;
        StorageDead(_170);
        StorageLive(_171);
        StorageLive(_172);
        _230 = deref_copy (_1.1: &mut handlers::handler_flash_repay_reserve_liquidity::FlashRepayReserveLiquidity<'_>);
        _231 = deref_copy ((*_230).6: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _317 = (((_231.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _172 = &(*_317);
        _171 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _172) -> [return: bb85, unwind: bb135];
    }

    bb85: {
        _243 = const true;
        StorageDead(_172);
        StorageLive(_173);
        StorageLive(_174);
        _232 = deref_copy (_1.1: &mut handlers::handler_flash_repay_reserve_liquidity::FlashRepayReserveLiquidity<'_>);
        _233 = deref_copy ((*_232).7: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _318 = (((_233.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _174 = &(*_318);
        _173 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _174) -> [return: bb86, unwind: bb133];
    }

    bb86: {
        _242 = const true;
        StorageDead(_174);
        StorageLive(_175);
        StorageLive(_176);
        _234 = deref_copy (_1.1: &mut handlers::handler_flash_repay_reserve_liquidity::FlashRepayReserveLiquidity<'_>);
        _176 = &((*_234).0: anchor_lang::prelude::Signer<'_>);
        _175 = <anchor_lang::prelude::Signer<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _176) -> [return: bb87, unwind: bb131];
    }

    bb87: {
        _241 = const true;
        StorageDead(_176);
        StorageLive(_177);
        _177 = _109;
        StorageLive(_178);
        StorageLive(_179);
        StorageLive(_180);
        StorageLive(_181);
        StorageLive(_182);
        _235 = deref_copy (_1.1: &mut handlers::handler_flash_repay_reserve_liquidity::FlashRepayReserveLiquidity<'_>);
        _236 = deref_copy ((*_235).4: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>);
        _319 = (((_236.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _182 = &(*_319);
        _181 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as Deref>::deref(move _182) -> [return: bb88, unwind: bb129];
    }

    bb88: {
        _180 = &(*_181);
        _179 = <anchor_spl::token_interface::Mint as Deref>::deref(move _180) -> [return: bb89, unwind: bb129];
    }

    bb89: {
        StorageDead(_182);
        StorageDead(_180);
        _178 = ((*_179).2: u8);
        _245 = const false;
        _244 = const false;
        _243 = const false;
        _242 = const false;
        _241 = const false;
        _166 = pay_borrowing_fees_transfer(move _167, move _169, move _171, move _173, move _175, move _177, move _178) -> [return: bb90, unwind: bb129];
    }

    bb90: {
        StorageDead(_178);
        StorageDead(_177);
        _241 = const false;
        StorageDead(_175);
        _242 = const false;
        StorageDead(_173);
        _243 = const false;
        StorageDead(_171);
        _244 = const false;
        StorageDead(_169);
        _245 = const false;
        StorageDead(_167);
        _165 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _166) -> [return: bb91, unwind: bb123];
    }

    bb91: {
        StorageDead(_166);
        _183 = discriminant(_165);
        switchInt(move _183) -> [0: bb92, 1: bb93, otherwise: bb4];
    }

    bb92: {
        StorageLive(_187);
        _187 = ((_165 as Continue).0: ());
        _164 = _187;
        StorageDead(_187);
        _271 = discriminant(_165);
        StorageDead(_181);
        StorageDead(_179);
        StorageDead(_165);
        StorageDead(_164);
        _161 = const ();
        goto -> bb96;
    }

    bb93: {
        StorageLive(_184);
        _184 = move ((_165 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_186);
        _186 = move _184;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _186) -> [return: bb94, unwind: bb127];
    }

    bb94: {
        StorageDead(_186);
        StorageDead(_184);
        _277 = discriminant(_165);
        StorageDead(_181);
        StorageDead(_179);
        StorageDead(_165);
        StorageDead(_164);
        StorageDead(_162);
        StorageDead(_161);
        goto -> bb110;
    }

    bb95: {
        StorageDead(_163);
        _161 = const ();
        goto -> bb96;
    }

    bb96: {
        StorageDead(_162);
        StorageDead(_161);
        StorageLive(_188);
        StorageLive(_189);
        StorageLive(_190);
        StorageLive(_191);
        StorageLive(_192);
        StorageLive(_193);
        StorageLive(_194);
        StorageLive(_195);
        StorageLive(_196);
        _237 = deref_copy (_1.1: &mut handlers::handler_flash_repay_reserve_liquidity::FlashRepayReserveLiquidity<'_>);
        _238 = deref_copy ((*_237).5: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _320 = (((_238.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _196 = &(*_320);
        _195 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _196) -> [return: bb97, unwind: bb123];
    }

    bb97: {
        StorageDead(_196);
        _194 = &_195;
        _193 = &(*_194);
        _192 = amount(move _193) -> [return: bb98, unwind: bb120];
    }

    bb98: {
        StorageDead(_193);
        _191 = std::result::Result::<u64, anchor_lang::error::Error>::unwrap(move _192) -> [return: bb99, unwind: bb120];
    }

    bb99: {
        StorageDead(_192);
        StorageLive(_197);
        StorageLive(_198);
        StorageLive(_199);
        _199 = &(*_14);
        _198 = <RefMut<'_, reserve::Reserve> as Deref>::deref(move _199) -> [return: bb100, unwind: bb120];
    }

    bb100: {
        StorageDead(_199);
        _197 = (((*_198).5: state::reserve::ReserveLiquidity).3: u64);
        StorageLive(_200);
        _200 = _34;
        StorageLive(_201);
        _201 = _46;
        StorageLive(_202);
        StorageLive(_203);
        _203 = _108;
        _202 = state::types::LendingAction::Additive(move _203);
        StorageDead(_203);
        _190 = post_transfer_vault_balance_liquidity_reserve_checks(move _191, move _197, move _200, move _201, move _202) -> [return: bb101, unwind: bb120];
    }

    bb101: {
        StorageDead(_202);
        StorageDead(_201);
        StorageDead(_200);
        StorageDead(_197);
        StorageDead(_191);
        _189 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _190) -> [return: bb102, unwind: bb120];
    }

    bb102: {
        StorageDead(_190);
        _204 = discriminant(_189);
        switchInt(move _204) -> [0: bb103, 1: bb104, otherwise: bb4];
    }

    bb103: {
        StorageLive(_208);
        _208 = ((_189 as Continue).0: ());
        _188 = _208;
        StorageDead(_208);
        _273 = discriminant(_189);
        StorageDead(_198);
        drop(_195) -> [return: bb106, unwind: bb123];
    }

    bb104: {
        StorageLive(_205);
        _205 = move ((_189 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_207);
        _207 = move _205;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _207) -> [return: bb105, unwind: bb126];
    }

    bb105: {
        StorageDead(_207);
        StorageDead(_205);
        _275 = discriminant(_189);
        StorageDead(_198);
        drop(_195) -> [return: bb109, unwind: bb123];
    }

    bb106: {
        StorageDead(_195);
        StorageDead(_194);
        StorageDead(_189);
        StorageDead(_188);
        StorageLive(_209);
        _209 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _209);
        StorageDead(_209);
        StorageDead(_109);
        StorageDead(_108);
        StorageDead(_62);
        StorageDead(_61);
        StorageDead(_46);
        StorageDead(_34);
        drop(_25) -> [return: bb107, unwind: bb124];
    }

    bb107: {
        StorageDead(_25);
        StorageDead(_24);
        drop(_15) -> [return: bb108, unwind: bb125];
    }

    bb108: {
        StorageDead(_15);
        StorageDead(_14);
        goto -> bb119;
    }

    bb109: {
        StorageDead(_195);
        StorageDead(_194);
        StorageDead(_189);
        StorageDead(_188);
        goto -> bb110;
    }

    bb110: {
        StorageDead(_109);
        StorageDead(_108);
        goto -> bb113;
    }

    bb111: {
        _283 = discriminant(_124);
        _239 = const false;
        _240 = const false;
        StorageDead(_124);
        StorageDead(_123);
        StorageDead(_117);
        StorageDead(_114);
        StorageDead(_111);
        StorageDead(_110);
        goto -> bb113;
    }

    bb112: {
        StorageDead(_69);
        StorageDead(_68);
        StorageDead(_67);
        StorageDead(_65);
        StorageDead(_63);
        goto -> bb113;
    }

    bb113: {
        StorageDead(_62);
        StorageDead(_61);
        goto -> bb114;
    }

    bb114: {
        StorageDead(_46);
        goto -> bb116;
    }

    bb115: {
        StorageDead(_39);
        StorageDead(_38);
        StorageDead(_35);
        goto -> bb116;
    }

    bb116: {
        StorageDead(_34);
        drop(_25) -> [return: bb117, unwind: bb124];
    }

    bb117: {
        StorageDead(_25);
        StorageDead(_24);
        drop(_15) -> [return: bb118, unwind: bb125];
    }

    bb118: {
        StorageDead(_15);
        StorageDead(_14);
        goto -> bb119;
    }

    bb119: {
        return;
    }

    bb120 (cleanup): {
        drop(_195) -> [return: bb123, unwind terminate(cleanup)];
    }

    bb121 (cleanup): {
        drop(_69) -> [return: bb123, unwind terminate(cleanup)];
    }

    bb122 (cleanup): {
        drop(_39) -> [return: bb123, unwind terminate(cleanup)];
    }

    bb123 (cleanup): {
        drop(_25) -> [return: bb124, unwind terminate(cleanup)];
    }

    bb124 (cleanup): {
        drop(_15) -> [return: bb125, unwind terminate(cleanup)];
    }

    bb125 (cleanup): {
        resume;
    }

    bb126 (cleanup): {
        _299 = discriminant(_189);
        goto -> bb120;
    }

    bb127 (cleanup): {
        _300 = discriminant(_165);
        goto -> bb123;
    }

    bb128 (cleanup): {
        drop(_175) -> [return: bb131, unwind terminate(cleanup)];
    }

    bb129 (cleanup): {
        switchInt(_241) -> [0: bb131, otherwise: bb128];
    }

    bb130 (cleanup): {
        drop(_173) -> [return: bb133, unwind terminate(cleanup)];
    }

    bb131 (cleanup): {
        switchInt(_242) -> [0: bb133, otherwise: bb130];
    }

    bb132 (cleanup): {
        drop(_171) -> [return: bb135, unwind terminate(cleanup)];
    }

    bb133 (cleanup): {
        switchInt(_243) -> [0: bb135, otherwise: bb132];
    }

    bb134 (cleanup): {
        drop(_169) -> [return: bb137, unwind terminate(cleanup)];
    }

    bb135 (cleanup): {
        switchInt(_244) -> [0: bb137, otherwise: bb134];
    }

    bb136 (cleanup): {
        drop(_167) -> [return: bb123, unwind terminate(cleanup)];
    }

    bb137 (cleanup): {
        switchInt(_245) -> [0: bb123, otherwise: bb136];
    }

    bb138 (cleanup): {
        _301 = discriminant(_138);
        goto -> bb123;
    }

    bb139 (cleanup): {
        drop(_148) -> [return: bb142, unwind terminate(cleanup)];
    }

    bb140 (cleanup): {
        switchInt(_246) -> [0: bb142, otherwise: bb139];
    }

    bb141 (cleanup): {
        drop(_146) -> [return: bb144, unwind terminate(cleanup)];
    }

    bb142 (cleanup): {
        switchInt(_247) -> [0: bb144, otherwise: bb141];
    }

    bb143 (cleanup): {
        drop(_144) -> [return: bb146, unwind terminate(cleanup)];
    }

    bb144 (cleanup): {
        switchInt(_248) -> [0: bb146, otherwise: bb143];
    }

    bb145 (cleanup): {
        drop(_142) -> [return: bb148, unwind terminate(cleanup)];
    }

    bb146 (cleanup): {
        switchInt(_249) -> [0: bb148, otherwise: bb145];
    }

    bb147 (cleanup): {
        drop(_140) -> [return: bb123, unwind terminate(cleanup)];
    }

    bb148 (cleanup): {
        switchInt(_250) -> [0: bb123, otherwise: bb147];
    }

    bb149 (cleanup): {
        _302 = discriminant(_111);
        goto -> bb150;
    }

    bb150 (cleanup): {
        _303 = discriminant(_124);
        goto -> bb123;
    }

    bb151 (cleanup): {
        _304 = discriminant(_79);
        goto -> bb121;
    }

    bb152 (cleanup): {
        _305 = discriminant(_70);
        goto -> bb123;
    }

    bb153 (cleanup): {
        _306 = discriminant(_50);
        goto -> bb123;
    }

    bb154 (cleanup): {
        _307 = discriminant(_35);
        goto -> bb122;
    }

    bb155 (cleanup): {
        _308 = discriminant(_26);
        goto -> bb124;
    }

    bb156 (cleanup): {
        _309 = discriminant(_16);
        goto -> bb125;
    }

    bb157 (cleanup): {
        _310 = discriminant(_5);
        goto -> bb125;
    }
}

alloc279 (static: ID, size: 32, align: 1) {
    0x00 │ 04 b2 ac b1 12 58 cc e3 68 2c 41 8b a8 72 ff 3d │ .....X..h,A..r.=
    0x10 │ f9 11 02 71 2f 15 af 12 b6 be 69 b3 43 5b 00 08 │ ...q/.....i.C[..
}
