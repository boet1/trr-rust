// MIR for `handlers::handler_refresh_reserves_batch::process` after PreCodegen

fn handlers::handler_refresh_reserves_batch::process(_1: anchor_lang::context::Context<'_, '_, '_, '_, handlers::handler_refresh_reserves_batch::RefreshReservesBatch>, _2: bool) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug skip_price_updates => _2;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _3: &anchor_lang::prelude::Clock;
    let _4: anchor_lang::prelude::Clock;
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Clock>;
    let mut _6: std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError>;
    let mut _7: isize;
    let _8: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _9: !;
    let mut _10: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let _11: anchor_lang::prelude::Clock;
    let mut _13: &[anchor_lang::prelude::AccountInfo<'_>];
    let _14: ();
    let mut _15: ();
    let mut _16: !;
    let mut _18: std::option::Option<&anchor_lang::prelude::AccountInfo<'_>>;
    let mut _19: &mut std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _20: isize;
    let mut _21: !;
    let _22: ();
    let mut _23: &str;
    let _24: &str;
    let mut _25: anchor_lang::error::Error;
    let mut _26: anchor_lang::error::AnchorError;
    let mut _27: std::string::String;
    let mut _28: &LendingError;
    let _29: LendingError;
    let mut _30: u32;
    let mut _31: LendingError;
    let mut _32: std::string::String;
    let mut _33: &LendingError;
    let _34: LendingError;
    let mut _35: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _36: anchor_lang::error::ErrorOrigin;
    let mut _37: anchor_lang::error::Source;
    let mut _38: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _40: std::option::Option<&anchor_lang::prelude::AccountInfo<'_>>;
    let mut _41: &mut std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _42: isize;
    let mut _44: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, utils::account_loader_trait::FatAccountLoader<'_, state::reserve::Reserve>>;
    let mut _45: std::result::Result<utils::account_loader_trait::FatAccountLoader<'_, state::reserve::Reserve>, anchor_lang::error::Error>;
    let mut _46: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _47: isize;
    let mut _49: !;
    let mut _50: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _53: std::cell::RefMut<'_, state::reserve::Reserve>;
    let mut _54: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::RefMut<'_, state::reserve::Reserve>>;
    let mut _55: std::result::Result<std::cell::RefMut<'_, state::reserve::Reserve>, anchor_lang::error::Error>;
    let mut _56: &utils::account_loader_trait::FatAccountLoader<'_, state::reserve::Reserve>;
    let mut _57: isize;
    let mut _59: !;
    let mut _60: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _62: ();
    let mut _63: bool;
    let mut _64: &anchor_lang::prelude::Pubkey;
    let _65: &state::reserve::Reserve;
    let mut _66: &std::cell::RefMut<'_, state::reserve::Reserve>;
    let mut _67: &anchor_lang::prelude::Pubkey;
    let mut _68: !;
    let mut _69: anchor_lang::error::Error;
    let mut _70: anchor_lang::error::Error;
    let mut _71: anchor_lang::error::AnchorError;
    let mut _72: std::string::String;
    let mut _73: &LendingError;
    let _74: LendingError;
    let mut _75: u32;
    let mut _76: LendingError;
    let mut _77: std::string::String;
    let mut _78: &LendingError;
    let _79: LendingError;
    let mut _80: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _81: anchor_lang::error::ErrorOrigin;
    let mut _82: anchor_lang::error::Source;
    let mut _83: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _84: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _85: anchor_lang::prelude::Pubkey;
    let mut _86: &state::reserve::Reserve;
    let mut _87: &std::cell::RefMut<'_, state::reserve::Reserve>;
    let mut _88: anchor_lang::prelude::Pubkey;
    let mut _90: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, utils::account_loader_trait::FatAccountLoader<'_, state::lending_market::LendingMarket>>;
    let mut _91: std::result::Result<utils::account_loader_trait::FatAccountLoader<'_, state::lending_market::LendingMarket>, anchor_lang::error::Error>;
    let mut _92: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _93: isize;
    let mut _95: !;
    let mut _96: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _99: std::cell::Ref<'_, state::lending_market::LendingMarket>;
    let mut _100: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::lending_market::LendingMarket>>;
    let mut _101: std::result::Result<std::cell::Ref<'_, state::lending_market::LendingMarket>, anchor_lang::error::Error>;
    let mut _102: &utils::account_loader_trait::FatAccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _103: isize;
    let mut _105: !;
    let mut _106: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _108: ();
    let mut _109: bool;
    let mut _110: u8;
    let mut _111: &state::lending_market::LendingMarket;
    let mut _112: &std::cell::Ref<'_, state::lending_market::LendingMarket>;
    let mut _113: u8;
    let mut _114: !;
    let mut _115: anchor_lang::error::Error;
    let mut _116: anchor_lang::error::AnchorError;
    let mut _117: std::string::String;
    let mut _118: &LendingError;
    let _119: LendingError;
    let mut _120: u32;
    let mut _121: LendingError;
    let mut _122: std::string::String;
    let mut _123: &LendingError;
    let _124: LendingError;
    let mut _125: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _126: anchor_lang::error::ErrorOrigin;
    let mut _127: anchor_lang::error::Source;
    let mut _128: std::option::Option<anchor_lang::error::ComparedValues>;
    let _129: ();
    let mut _130: bool;
    let mut _131: u64;
    let mut _132: &state::reserve::Reserve;
    let mut _133: &std::cell::RefMut<'_, state::reserve::Reserve>;
    let mut _134: u64;
    let mut _135: !;
    let mut _136: anchor_lang::error::Error;
    let mut _137: anchor_lang::error::AnchorError;
    let mut _138: std::string::String;
    let mut _139: &LendingError;
    let _140: LendingError;
    let mut _141: u32;
    let mut _142: LendingError;
    let mut _143: std::string::String;
    let mut _144: &LendingError;
    let _145: LendingError;
    let mut _146: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _147: anchor_lang::error::ErrorOrigin;
    let mut _148: anchor_lang::error::Source;
    let mut _149: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _151: bool;
    let mut _153: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::option::Option<&anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _154: std::result::Result<std::option::Option<&anchor_lang::prelude::AccountInfo<'_>>, anchor_lang::error::Error>;
    let mut _155: std::option::Option<&anchor_lang::prelude::AccountInfo<'_>>;
    let mut _156: &mut std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _157: isize;
    let mut _159: !;
    let mut _160: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _163: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::option::Option<&anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _164: std::result::Result<std::option::Option<&anchor_lang::prelude::AccountInfo<'_>>, anchor_lang::error::Error>;
    let mut _165: std::option::Option<&anchor_lang::prelude::AccountInfo<'_>>;
    let mut _166: &mut std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _167: isize;
    let mut _169: !;
    let mut _170: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _173: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::option::Option<&anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _174: std::result::Result<std::option::Option<&anchor_lang::prelude::AccountInfo<'_>>, anchor_lang::error::Error>;
    let mut _175: std::option::Option<&anchor_lang::prelude::AccountInfo<'_>>;
    let mut _176: &mut std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _177: isize;
    let mut _179: !;
    let mut _180: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _183: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::option::Option<&anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _184: std::result::Result<std::option::Option<&anchor_lang::prelude::AccountInfo<'_>>, anchor_lang::error::Error>;
    let mut _185: std::option::Option<&anchor_lang::prelude::AccountInfo<'_>>;
    let mut _186: &mut std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _187: isize;
    let mut _189: !;
    let mut _190: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _192: bool;
    let mut _193: &state::reserve::Reserve;
    let _194: &state::reserve::Reserve;
    let mut _195: &std::cell::RefMut<'_, state::reserve::Reserve>;
    let mut _196: &state::lending_market::LendingMarket;
    let _197: &state::lending_market::LendingMarket;
    let mut _198: &std::cell::Ref<'_, state::lending_market::LendingMarket>;
    let mut _199: i64;
    let _200: ();
    let mut _201: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _202: std::result::Result<(), anchor_lang::error::Error>;
    let mut _203: &state::token_info::TokenInfo;
    let _204: &state::reserve::Reserve;
    let mut _205: &std::cell::RefMut<'_, state::reserve::Reserve>;
    let mut _206: std::option::Option<&anchor_lang::prelude::AccountInfo<'_>>;
    let mut _207: std::option::Option<&anchor_lang::prelude::AccountInfo<'_>>;
    let mut _208: std::option::Option<&anchor_lang::prelude::AccountInfo<'_>>;
    let mut _209: std::option::Option<&anchor_lang::prelude::AccountInfo<'_>>;
    let mut _210: isize;
    let mut _212: !;
    let mut _213: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _215: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::option::Option<utils::prices::GetPriceResult>>;
    let mut _216: std::result::Result<std::option::Option<utils::prices::GetPriceResult>, anchor_lang::error::Error>;
    let mut _217: &state::token_info::TokenInfo;
    let _218: &state::token_info::TokenInfo;
    let _219: &state::reserve::Reserve;
    let mut _220: &std::cell::RefMut<'_, state::reserve::Reserve>;
    let mut _221: std::option::Option<&anchor_lang::prelude::AccountInfo<'_>>;
    let mut _222: std::option::Option<&anchor_lang::prelude::AccountInfo<'_>>;
    let mut _223: std::option::Option<&anchor_lang::prelude::AccountInfo<'_>>;
    let mut _224: std::option::Option<&anchor_lang::prelude::AccountInfo<'_>>;
    let mut _225: &anchor_lang::prelude::Clock;
    let mut _226: isize;
    let mut _228: !;
    let mut _229: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _231: ();
    let mut _232: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _233: std::result::Result<(), anchor_lang::error::Error>;
    let mut _234: &mut state::reserve::Reserve;
    let mut _235: &mut state::reserve::Reserve;
    let mut _236: &mut std::cell::RefMut<'_, state::reserve::Reserve>;
    let mut _237: &anchor_lang::prelude::Clock;
    let mut _238: std::option::Option<utils::prices::GetPriceResult>;
    let mut _239: u16;
    let mut _240: &state::lending_market::LendingMarket;
    let mut _241: &std::cell::Ref<'_, state::lending_market::LendingMarket>;
    let mut _242: isize;
    let mut _244: !;
    let mut _245: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _248: std::result::Result<u64, std::num::TryFromIntError>;
    let mut _249: i64;
    let _250: ();
    let mut _251: &mut state::reserve::Reserve;
    let mut _252: &mut state::reserve::Reserve;
    let mut _253: &mut std::cell::RefMut<'_, state::reserve::Reserve>;
    let mut _254: u64;
    let mut _255: bool;
    let _256: ();
    let mut _257: &str;
    let _258: &str;
    let mut _259: &std::string::String;
    let _260: &std::string::String;
    let _261: std::string::String;
    let mut _263: std::fmt::Arguments<'_>;
    let mut _264: &[&str];
    let mut _265: &[&str; 2];
    let _266: &[&str; 2];
    let _267: [&str; 2];
    let mut _268: &[core::fmt::rt::Argument<'_>];
    let mut _269: &[core::fmt::rt::Argument<'_>; 2];
    let _270: &[core::fmt::rt::Argument<'_>; 2];
    let _271: [core::fmt::rt::Argument<'_>; 2];
    let mut _272: core::fmt::rt::Argument<'_>;
    let mut _273: &&&str;
    let _274: &&&str;
    let _275: &&str;
    let _276: &str;
    let mut _277: &state::token_info::TokenInfo;
    let _278: &state::reserve::Reserve;
    let mut _279: &std::cell::RefMut<'_, state::reserve::Reserve>;
    let mut _280: core::fmt::rt::Argument<'_>;
    let mut _281: &utils::fraction::FractionDisplay<'_>;
    let _282: &utils::fraction::FractionDisplay<'_>;
    let _283: utils::fraction::FractionDisplay<'_>;
    let mut _284: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _285: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _286: &state::reserve::ReserveLiquidity;
    let _287: &state::reserve::Reserve;
    let mut _288: &std::cell::RefMut<'_, state::reserve::Reserve>;
    let mut _289: ();
    let mut _299: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _300: &anchor_lang::prelude::Pubkey;
    let mut _301: &anchor_lang::prelude::Pubkey;
    let mut _302: bool;
    let mut _303: isize;
    let mut _304: isize;
    let mut _305: isize;
    let mut _306: isize;
    let mut _307: isize;
    let mut _308: isize;
    let mut _309: isize;
    let mut _310: isize;
    let mut _311: isize;
    let mut _312: isize;
    let mut _313: isize;
    let mut _314: isize;
    let mut _315: isize;
    let mut _316: isize;
    let mut _317: isize;
    let mut _318: isize;
    let mut _319: isize;
    let mut _320: isize;
    let mut _321: isize;
    let mut _322: isize;
    let mut _323: isize;
    let mut _324: isize;
    let mut _325: isize;
    let mut _326: isize;
    let mut _327: isize;
    let mut _328: isize;
    let mut _329: isize;
    let mut _330: isize;
    let mut _331: isize;
    let mut _332: isize;
    let mut _333: isize;
    let mut _334: isize;
    let mut _335: isize;
    let mut _336: isize;
    let mut _337: isize;
    let mut _338: isize;
    let mut _339: isize;
    let mut _340: isize;
    let mut _341: isize;
    let mut _342: isize;
    let mut _343: isize;
    let mut _344: isize;
    let mut _345: isize;
    let mut _346: isize;
    let mut _347: isize;
    let mut _348: isize;
    let mut _349: isize;
    let mut _350: isize;
    let mut _351: isize;
    let mut _352: isize;
    let mut _353: isize;
    let mut _354: isize;
    let mut _355: isize;
    let mut _356: isize;
    let mut _357: isize;
    let mut _358: isize;
    let mut _359: isize;
    let mut _360: isize;
    let mut _361: isize;
    let mut _362: isize;
    scope 1 {
        debug clock => _3;
        let mut _12: std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>;
        scope 6 {
            debug remaining_accounts_it => _12;
            let _17: &anchor_lang::prelude::AccountInfo<'_>;
            scope 7 {
                debug reserve_acc => _17;
                let _39: &anchor_lang::prelude::AccountInfo<'_>;
                let mut _290: &LendingError;
                let mut _291: &LendingError;
                scope 8 {
                    debug lending_market_acc => _39;
                    let _43: utils::account_loader_trait::FatAccountLoader<'_, state::reserve::Reserve>;
                    let _48: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                    let _51: utils::account_loader_trait::FatAccountLoader<'_, state::reserve::Reserve>;
                    scope 9 {
                        debug reserve_loader => _43;
                        let _52: &mut std::cell::RefMut<'_, state::reserve::Reserve>;
                        let _58: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                        let _61: std::cell::RefMut<'_, state::reserve::Reserve>;
                        scope 14 {
                            debug reserve => _52;
                            let _89: utils::account_loader_trait::FatAccountLoader<'_, state::lending_market::LendingMarket>;
                            let _94: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                            let _97: utils::account_loader_trait::FatAccountLoader<'_, state::lending_market::LendingMarket>;
                            let mut _292: &LendingError;
                            let mut _293: &LendingError;
                            scope 19 {
                                debug lending_market_loader => _89;
                                let _98: &std::cell::Ref<'_, state::lending_market::LendingMarket>;
                                let _104: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                let _107: std::cell::Ref<'_, state::lending_market::LendingMarket>;
                                scope 24 {
                                    debug lending_market => _98;
                                    let _150: std::option::Option<utils::prices::GetPriceResult>;
                                    let _152: std::option::Option<&anchor_lang::prelude::AccountInfo<'_>>;
                                    let _158: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                    let _161: std::option::Option<&anchor_lang::prelude::AccountInfo<'_>>;
                                    let mut _295: &LendingError;
                                    let mut _296: &LendingError;
                                    let mut _297: &LendingError;
                                    let mut _298: &LendingError;
                                    scope 29 {
                                        debug price_res => _150;
                                        let _243: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                        let _246: ();
                                        let _247: u64;
                                        scope 58 {
                                            debug residual => _243;
                                            scope 59 {
                                            }
                                        }
                                        scope 60 {
                                            debug val => _246;
                                            scope 61 {
                                            }
                                        }
                                        scope 62 {
                                            debug timestamp => _247;
                                            let _262: std::string::String;
                                            let mut _294: &[&str; 2];
                                            scope 63 {
                                                debug res => _262;
                                            }
                                        }
                                    }
                                    scope 30 {
                                        debug pyth_oracle => _152;
                                        let _162: std::option::Option<&anchor_lang::prelude::AccountInfo<'_>>;
                                        let _168: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                        let _171: std::option::Option<&anchor_lang::prelude::AccountInfo<'_>>;
                                        scope 35 {
                                            debug switchboard_price_oracle => _162;
                                            let _172: std::option::Option<&anchor_lang::prelude::AccountInfo<'_>>;
                                            let _178: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                            let _181: std::option::Option<&anchor_lang::prelude::AccountInfo<'_>>;
                                            scope 40 {
                                                debug switchboard_twap_oracle => _172;
                                                let _182: std::option::Option<&anchor_lang::prelude::AccountInfo<'_>>;
                                                let _188: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                let _191: std::option::Option<&anchor_lang::prelude::AccountInfo<'_>>;
                                                scope 45 {
                                                    debug scope_prices => _182;
                                                    let _211: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                    let _214: ();
                                                    let _227: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                    let _230: std::option::Option<utils::prices::GetPriceResult>;
                                                    scope 50 {
                                                        debug residual => _211;
                                                        scope 51 {
                                                        }
                                                    }
                                                    scope 52 {
                                                        debug val => _214;
                                                        scope 53 {
                                                        }
                                                    }
                                                    scope 54 {
                                                        debug residual => _227;
                                                        scope 55 {
                                                        }
                                                    }
                                                    scope 56 {
                                                        debug val => _230;
                                                        scope 57 {
                                                        }
                                                    }
                                                }
                                                scope 46 {
                                                    debug residual => _188;
                                                    scope 47 {
                                                    }
                                                }
                                                scope 48 {
                                                    debug val => _191;
                                                    scope 49 {
                                                    }
                                                }
                                            }
                                            scope 41 {
                                                debug residual => _178;
                                                scope 42 {
                                                }
                                            }
                                            scope 43 {
                                                debug val => _181;
                                                scope 44 {
                                                }
                                            }
                                        }
                                        scope 36 {
                                            debug residual => _168;
                                            scope 37 {
                                            }
                                        }
                                        scope 38 {
                                            debug val => _171;
                                            scope 39 {
                                            }
                                        }
                                    }
                                    scope 31 {
                                        debug residual => _158;
                                        scope 32 {
                                        }
                                    }
                                    scope 33 {
                                        debug val => _161;
                                        scope 34 {
                                        }
                                    }
                                }
                                scope 25 {
                                    debug residual => _104;
                                    scope 26 {
                                    }
                                }
                                scope 27 {
                                    debug val => _107;
                                    scope 28 {
                                    }
                                }
                            }
                            scope 20 {
                                debug residual => _94;
                                scope 21 {
                                }
                            }
                            scope 22 {
                                debug val => _97;
                                scope 23 {
                                }
                            }
                        }
                        scope 15 {
                            debug residual => _58;
                            scope 16 {
                            }
                        }
                        scope 17 {
                            debug val => _61;
                            scope 18 {
                            }
                        }
                    }
                    scope 10 {
                        debug residual => _48;
                        scope 11 {
                        }
                    }
                    scope 12 {
                        debug val => _51;
                        scope 13 {
                        }
                    }
                }
            }
        }
    }
    scope 2 {
        debug residual => _8;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _11;
        scope 5 {
        }
    }

    bb0: {
        _302 = const false;
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = <anchor_lang::prelude::Clock as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = <std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError> as Try>::branch(move _6) -> [return: bb2, unwind: bb163];
    }

    bb2: {
        StorageDead(_6);
        _7 = discriminant(_5);
        switchInt(move _7) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_11);
        _11 = move ((_5 as Continue).0: anchor_lang::prelude::Clock);
        _4 = move _11;
        StorageDead(_11);
        _3 = &_4;
        _303 = discriminant(_5);
        StorageDead(_5);
        StorageLive(_12);
        StorageLive(_13);
        _299 = deref_copy (_1.2: &[anchor_lang::prelude::AccountInfo<'_>]);
        _13 = &(*_299);
        _12 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::iter(move _13) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_8);
        _8 = move ((_5 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_10);
        _10 = move _8;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _10) -> [return: bb6, unwind: bb177];
    }

    bb6: {
        StorageDead(_10);
        StorageDead(_8);
        _349 = discriminant(_5);
        StorageDead(_5);
        goto -> bb152;
    }

    bb7: {
        StorageDead(_13);
        StorageLive(_14);
        goto -> bb8;
    }

    bb8: {
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _19 = &mut _12;
        _18 = <std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>> as Iterator>::next(move _19) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_19);
        _20 = discriminant(_18);
        switchInt(move _20) -> [1: bb10, otherwise: bb11];
    }

    bb10: {
        _17 = ((_18 as Some).0: &anchor_lang::prelude::AccountInfo<'_>);
        StorageDead(_18);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        _41 = &mut _12;
        _40 = <std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>> as Iterator>::next(move _41) -> [return: bb17, unwind continue];
    }

    bb11: {
        StorageDead(_18);
        StorageDead(_17);
        _14 = const ();
        StorageDead(_14);
        StorageLive(_289);
        _289 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _289);
        StorageDead(_289);
        StorageDead(_12);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb153;
    }

    bb12: {
        StorageDead(_23);
        StorageDead(_24);
        StorageDead(_22);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        _291 = const _;
        _28 = &(*_291);
        _27 = LendingError::name(move _28) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_28);
        StorageLive(_30);
        StorageLive(_31);
        _31 = LendingError::InvalidAccountInput;
        _30 = <LendingError as Into<u32>>::into(move _31) -> [return: bb14, unwind: bb162];
    }

    bb14: {
        StorageDead(_31);
        StorageLive(_32);
        StorageLive(_33);
        _290 = const _;
        _33 = &(*_290);
        _32 = <LendingError as ToString>::to_string(move _33) -> [return: bb15, unwind: bb162];
    }

    bb15: {
        StorageDead(_33);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        _37 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\handlers\\handler_refresh_reserves_batch.rs", line: const 35_u32 };
        _36 = anchor_lang::error::ErrorOrigin::Source(move _37);
        StorageDead(_37);
        _35 = std::option::Option::<ErrorOrigin>::Some(move _36);
        StorageDead(_36);
        StorageLive(_38);
        _38 = std::option::Option::<ComparedValues>::None;
        _26 = anchor_lang::error::AnchorError { error_name: move _27, error_code_number: move _30, error_msg: move _32, error_origin: move _35, compared_values: move _38 };
        StorageDead(_38);
        StorageDead(_35);
        StorageDead(_32);
        StorageDead(_30);
        StorageDead(_27);
        _25 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _26) -> [return: bb16, unwind: bb163];
    }

    bb16: {
        StorageDead(_26);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _25);
        StorageDead(_25);
        goto -> bb151;
    }

    bb17: {
        StorageDead(_41);
        _42 = discriminant(_40);
        switchInt(move _42) -> [1: bb18, otherwise: bb19];
    }

    bb18: {
        _39 = ((_40 as Some).0: &anchor_lang::prelude::AccountInfo<'_>);
        StorageDead(_40);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        _46 = &(*_17);
        _45 = account_loader_trait::FatAccountLoader::<'_, reserve::Reserve>::try_from(move _46) -> [return: bb20, unwind continue];
    }

    bb19: {
        StorageDead(_40);
        StorageDead(_39);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        _24 = const "Missing lending market account";
        _23 = &(*_24);
        _22 = solana_program::log::sol_log(move _23) -> [return: bb12, unwind continue];
    }

    bb20: {
        StorageDead(_46);
        _44 = <std::result::Result<account_loader_trait::FatAccountLoader<'_, reserve::Reserve>, anchor_lang::error::Error> as Try>::branch(move _45) -> [return: bb21, unwind: bb163];
    }

    bb21: {
        StorageDead(_45);
        _47 = discriminant(_44);
        switchInt(move _47) -> [0: bb22, 1: bb23, otherwise: bb4];
    }

    bb22: {
        StorageLive(_51);
        _51 = move ((_44 as Continue).0: utils::account_loader_trait::FatAccountLoader<'_, state::reserve::Reserve>);
        _43 = move _51;
        StorageDead(_51);
        _305 = discriminant(_44);
        StorageDead(_44);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        _56 = &_43;
        _55 = account_loader_trait::FatAccountLoader::<'_, reserve::Reserve>::load_mut(move _56) -> [return: bb25, unwind: bb161];
    }

    bb23: {
        StorageLive(_48);
        _48 = move ((_44 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_50);
        _50 = move _48;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _50) -> [return: bb24, unwind: bb176];
    }

    bb24: {
        StorageDead(_50);
        StorageDead(_48);
        _347 = discriminant(_44);
        StorageDead(_44);
        goto -> bb150;
    }

    bb25: {
        StorageDead(_56);
        _54 = <std::result::Result<RefMut<'_, reserve::Reserve>, anchor_lang::error::Error> as Try>::branch(move _55) -> [return: bb26, unwind: bb161];
    }

    bb26: {
        StorageDead(_55);
        _57 = discriminant(_54);
        switchInt(move _57) -> [0: bb27, 1: bb28, otherwise: bb4];
    }

    bb27: {
        StorageLive(_61);
        _61 = move ((_54 as Continue).0: std::cell::RefMut<'_, state::reserve::Reserve>);
        _53 = move _61;
        StorageDead(_61);
        _52 = &mut _53;
        _307 = discriminant(_54);
        StorageDead(_54);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        _66 = &(*_52);
        _65 = <RefMut<'_, reserve::Reserve> as Deref>::deref(move _66) -> [return: bb30, unwind: bb160];
    }

    bb28: {
        StorageLive(_58);
        _58 = move ((_54 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_60);
        _60 = move _58;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _60) -> [return: bb29, unwind: bb175];
    }

    bb29: {
        StorageDead(_60);
        StorageDead(_58);
        _345 = discriminant(_54);
        StorageDead(_54);
        goto -> bb149;
    }

    bb30: {
        StorageDead(_66);
        _64 = &((*_65).2: anchor_lang::prelude::Pubkey);
        StorageLive(_67);
        _300 = deref_copy ((*_39).0: &anchor_lang::prelude::Pubkey);
        _67 = &(*_300);
        _63 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _64, move _67) -> [return: bb31, unwind: bb160];
    }

    bb31: {
        switchInt(move _63) -> [0: bb39, otherwise: bb32];
    }

    bb32: {
        StorageDead(_67);
        StorageDead(_65);
        StorageDead(_64);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        _293 = const _;
        _73 = &(*_293);
        _72 = LendingError::name(move _73) -> [return: bb33, unwind: bb160];
    }

    bb33: {
        StorageDead(_73);
        StorageLive(_75);
        StorageLive(_76);
        _76 = LendingError::InvalidAccountInput;
        _75 = <LendingError as Into<u32>>::into(move _76) -> [return: bb34, unwind: bb159];
    }

    bb34: {
        StorageDead(_76);
        StorageLive(_77);
        StorageLive(_78);
        _292 = const _;
        _78 = &(*_292);
        _77 = <LendingError as ToString>::to_string(move _78) -> [return: bb35, unwind: bb159];
    }

    bb35: {
        StorageDead(_78);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        _82 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\handlers\\handler_refresh_reserves_batch.rs", line: const 41_u32 };
        _81 = anchor_lang::error::ErrorOrigin::Source(move _82);
        StorageDead(_82);
        _80 = std::option::Option::<ErrorOrigin>::Some(move _81);
        StorageDead(_81);
        StorageLive(_83);
        _83 = std::option::Option::<ComparedValues>::None;
        _71 = anchor_lang::error::AnchorError { error_name: move _72, error_code_number: move _75, error_msg: move _77, error_origin: move _80, compared_values: move _83 };
        StorageDead(_83);
        StorageDead(_80);
        StorageDead(_77);
        StorageDead(_75);
        StorageDead(_72);
        _70 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _71) -> [return: bb36, unwind: bb160];
    }

    bb36: {
        _302 = const true;
        StorageDead(_71);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        _87 = &(*_52);
        _86 = <RefMut<'_, reserve::Reserve> as Deref>::deref(move _87) -> [return: bb37, unwind: bb174];
    }

    bb37: {
        StorageDead(_87);
        _85 = ((*_86).2: anchor_lang::prelude::Pubkey);
        StorageLive(_88);
        _301 = deref_copy ((*_39).0: &anchor_lang::prelude::Pubkey);
        _88 = (*_301);
        _84 = (move _85, move _88);
        StorageDead(_88);
        StorageDead(_85);
        _302 = const false;
        _69 = anchor_lang::error::Error::with_pubkeys(move _70, move _84) -> [return: bb38, unwind: bb174];
    }

    bb38: {
        StorageDead(_84);
        _302 = const false;
        StorageDead(_70);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _69);
        StorageDead(_69);
        StorageDead(_86);
        StorageDead(_63);
        StorageDead(_62);
        goto -> bb148;
    }

    bb39: {
        StorageDead(_67);
        StorageDead(_65);
        StorageDead(_64);
        _62 = const ();
        StorageDead(_63);
        StorageDead(_62);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        _92 = &(*_39);
        _91 = account_loader_trait::FatAccountLoader::<'_, state::lending_market::LendingMarket>::try_from(move _92) -> [return: bb40, unwind: bb160];
    }

    bb40: {
        StorageDead(_92);
        _90 = <std::result::Result<account_loader_trait::FatAccountLoader<'_, state::lending_market::LendingMarket>, anchor_lang::error::Error> as Try>::branch(move _91) -> [return: bb41, unwind: bb160];
    }

    bb41: {
        StorageDead(_91);
        _93 = discriminant(_90);
        switchInt(move _93) -> [0: bb42, 1: bb43, otherwise: bb4];
    }

    bb42: {
        StorageLive(_97);
        _97 = move ((_90 as Continue).0: utils::account_loader_trait::FatAccountLoader<'_, state::lending_market::LendingMarket>);
        _89 = move _97;
        StorageDead(_97);
        _309 = discriminant(_90);
        StorageDead(_90);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        _102 = &_89;
        _101 = account_loader_trait::FatAccountLoader::<'_, state::lending_market::LendingMarket>::load(move _102) -> [return: bb45, unwind: bb158];
    }

    bb43: {
        StorageLive(_94);
        _94 = move ((_90 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_96);
        _96 = move _94;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _96) -> [return: bb44, unwind: bb172];
    }

    bb44: {
        StorageDead(_96);
        StorageDead(_94);
        _343 = discriminant(_90);
        StorageDead(_90);
        goto -> bb147;
    }

    bb45: {
        StorageDead(_102);
        _100 = <std::result::Result<Ref<'_, state::lending_market::LendingMarket>, anchor_lang::error::Error> as Try>::branch(move _101) -> [return: bb46, unwind: bb158];
    }

    bb46: {
        StorageDead(_101);
        _103 = discriminant(_100);
        switchInt(move _103) -> [0: bb47, 1: bb48, otherwise: bb4];
    }

    bb47: {
        StorageLive(_107);
        _107 = move ((_100 as Continue).0: std::cell::Ref<'_, state::lending_market::LendingMarket>);
        _99 = move _107;
        StorageDead(_107);
        _98 = &_99;
        _311 = discriminant(_100);
        StorageDead(_100);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        _112 = &(*_98);
        _111 = <Ref<'_, state::lending_market::LendingMarket> as Deref>::deref(move _112) -> [return: bb50, unwind: bb157];
    }

    bb48: {
        StorageLive(_104);
        _104 = move ((_100 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_106);
        _106 = move _104;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _106) -> [return: bb49, unwind: bb171];
    }

    bb49: {
        StorageDead(_106);
        StorageDead(_104);
        _341 = discriminant(_100);
        StorageDead(_100);
        goto -> bb146;
    }

    bb50: {
        StorageDead(_112);
        _110 = ((*_111).6: u8);
        StorageLive(_113);
        _113 = const false as u8 (IntToInt);
        _109 = Eq(move _110, move _113);
        switchInt(move _109) -> [0: bb52, otherwise: bb51];
    }

    bb51: {
        StorageDead(_113);
        StorageDead(_110);
        StorageDead(_111);
        _108 = const ();
        StorageDead(_109);
        StorageDead(_108);
        StorageLive(_129);
        StorageLive(_130);
        StorageLive(_131);
        StorageLive(_132);
        StorageLive(_133);
        _133 = &(*_52);
        _132 = <RefMut<'_, reserve::Reserve> as Deref>::deref(move _133) -> [return: bb57, unwind: bb157];
    }

    bb52: {
        StorageDead(_113);
        StorageDead(_110);
        StorageDead(_111);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        _298 = const _;
        _118 = &(*_298);
        _117 = LendingError::name(move _118) -> [return: bb53, unwind: bb157];
    }

    bb53: {
        StorageDead(_118);
        StorageLive(_120);
        StorageLive(_121);
        _121 = LendingError::GlobalEmergencyMode;
        _120 = <LendingError as Into<u32>>::into(move _121) -> [return: bb54, unwind: bb156];
    }

    bb54: {
        StorageDead(_121);
        StorageLive(_122);
        StorageLive(_123);
        _297 = const _;
        _123 = &(*_297);
        _122 = <LendingError as ToString>::to_string(move _123) -> [return: bb55, unwind: bb156];
    }

    bb55: {
        StorageDead(_123);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        _127 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\handlers\\handler_refresh_reserves_batch.rs", line: const 51_u32 };
        _126 = anchor_lang::error::ErrorOrigin::Source(move _127);
        StorageDead(_127);
        _125 = std::option::Option::<ErrorOrigin>::Some(move _126);
        StorageDead(_126);
        StorageLive(_128);
        _128 = std::option::Option::<ComparedValues>::None;
        _116 = anchor_lang::error::AnchorError { error_name: move _117, error_code_number: move _120, error_msg: move _122, error_origin: move _125, compared_values: move _128 };
        StorageDead(_128);
        StorageDead(_125);
        StorageDead(_122);
        StorageDead(_120);
        StorageDead(_117);
        _115 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _116) -> [return: bb56, unwind: bb157];
    }

    bb56: {
        StorageDead(_116);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _115);
        StorageDead(_115);
        StorageDead(_109);
        StorageDead(_108);
        goto -> bb145;
    }

    bb57: {
        StorageDead(_133);
        _131 = ((*_132).0: u64);
        StorageLive(_134);
        _134 = const _ as u64 (IntToInt);
        _130 = Eq(move _131, move _134);
        switchInt(move _130) -> [0: bb59, otherwise: bb58];
    }

    bb58: {
        StorageDead(_134);
        StorageDead(_131);
        StorageDead(_132);
        _129 = const ();
        StorageDead(_130);
        StorageDead(_129);
        StorageLive(_150);
        StorageLive(_151);
        _151 = _2;
        switchInt(move _151) -> [0: bb65, otherwise: bb64];
    }

    bb59: {
        StorageDead(_134);
        StorageDead(_131);
        StorageDead(_132);
        StorageLive(_136);
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        _296 = const _;
        _139 = &(*_296);
        _138 = LendingError::name(move _139) -> [return: bb60, unwind: bb157];
    }

    bb60: {
        StorageDead(_139);
        StorageLive(_141);
        StorageLive(_142);
        _142 = LendingError::ReserveDeprecated;
        _141 = <LendingError as Into<u32>>::into(move _142) -> [return: bb61, unwind: bb155];
    }

    bb61: {
        StorageDead(_142);
        StorageLive(_143);
        StorageLive(_144);
        _295 = const _;
        _144 = &(*_295);
        _143 = <LendingError as ToString>::to_string(move _144) -> [return: bb62, unwind: bb155];
    }

    bb62: {
        StorageDead(_144);
        StorageLive(_146);
        StorageLive(_147);
        StorageLive(_148);
        _148 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\handlers\\handler_refresh_reserves_batch.rs", line: const 56_u32 };
        _147 = anchor_lang::error::ErrorOrigin::Source(move _148);
        StorageDead(_148);
        _146 = std::option::Option::<ErrorOrigin>::Some(move _147);
        StorageDead(_147);
        StorageLive(_149);
        _149 = std::option::Option::<ComparedValues>::None;
        _137 = anchor_lang::error::AnchorError { error_name: move _138, error_code_number: move _141, error_msg: move _143, error_origin: move _146, compared_values: move _149 };
        StorageDead(_149);
        StorageDead(_146);
        StorageDead(_143);
        StorageDead(_141);
        StorageDead(_138);
        _136 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _137) -> [return: bb63, unwind: bb157];
    }

    bb63: {
        StorageDead(_137);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _136);
        StorageDead(_136);
        StorageDead(_130);
        StorageDead(_129);
        goto -> bb145;
    }

    bb64: {
        _150 = std::option::Option::<prices::GetPriceResult>::None;
        goto -> bb108;
    }

    bb65: {
        StorageLive(_152);
        StorageLive(_153);
        StorageLive(_154);
        StorageLive(_155);
        StorageLive(_156);
        _156 = &mut _12;
        _155 = <std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>> as Iterator>::next(move _156) -> [return: bb66, unwind: bb157];
    }

    bb66: {
        StorageDead(_156);
        _154 = maybe_price_account(move _155) -> [return: bb67, unwind: bb157];
    }

    bb67: {
        StorageDead(_155);
        _153 = <std::result::Result<std::option::Option<&anchor_lang::prelude::AccountInfo<'_>>, anchor_lang::error::Error> as Try>::branch(move _154) -> [return: bb68, unwind: bb157];
    }

    bb68: {
        StorageDead(_154);
        _157 = discriminant(_153);
        switchInt(move _157) -> [0: bb69, 1: bb70, otherwise: bb4];
    }

    bb69: {
        StorageLive(_161);
        _161 = ((_153 as Continue).0: std::option::Option<&anchor_lang::prelude::AccountInfo<'_>>);
        _152 = _161;
        StorageDead(_161);
        _313 = discriminant(_153);
        StorageDead(_153);
        StorageLive(_162);
        StorageLive(_163);
        StorageLive(_164);
        StorageLive(_165);
        StorageLive(_166);
        _166 = &mut _12;
        _165 = <std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>> as Iterator>::next(move _166) -> [return: bb72, unwind: bb157];
    }

    bb70: {
        StorageLive(_158);
        _158 = move ((_153 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_160);
        _160 = move _158;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _160) -> [return: bb71, unwind: bb170];
    }

    bb71: {
        StorageDead(_160);
        StorageDead(_158);
        _339 = discriminant(_153);
        StorageDead(_153);
        goto -> bb143;
    }

    bb72: {
        StorageDead(_166);
        _164 = maybe_price_account(move _165) -> [return: bb73, unwind: bb157];
    }

    bb73: {
        StorageDead(_165);
        _163 = <std::result::Result<std::option::Option<&anchor_lang::prelude::AccountInfo<'_>>, anchor_lang::error::Error> as Try>::branch(move _164) -> [return: bb74, unwind: bb157];
    }

    bb74: {
        StorageDead(_164);
        _167 = discriminant(_163);
        switchInt(move _167) -> [0: bb75, 1: bb76, otherwise: bb4];
    }

    bb75: {
        StorageLive(_171);
        _171 = ((_163 as Continue).0: std::option::Option<&anchor_lang::prelude::AccountInfo<'_>>);
        _162 = _171;
        StorageDead(_171);
        _315 = discriminant(_163);
        StorageDead(_163);
        StorageLive(_172);
        StorageLive(_173);
        StorageLive(_174);
        StorageLive(_175);
        StorageLive(_176);
        _176 = &mut _12;
        _175 = <std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>> as Iterator>::next(move _176) -> [return: bb78, unwind: bb157];
    }

    bb76: {
        StorageLive(_168);
        _168 = move ((_163 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_170);
        _170 = move _168;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _170) -> [return: bb77, unwind: bb169];
    }

    bb77: {
        StorageDead(_170);
        StorageDead(_168);
        _337 = discriminant(_163);
        StorageDead(_163);
        goto -> bb142;
    }

    bb78: {
        StorageDead(_176);
        _174 = maybe_price_account(move _175) -> [return: bb79, unwind: bb157];
    }

    bb79: {
        StorageDead(_175);
        _173 = <std::result::Result<std::option::Option<&anchor_lang::prelude::AccountInfo<'_>>, anchor_lang::error::Error> as Try>::branch(move _174) -> [return: bb80, unwind: bb157];
    }

    bb80: {
        StorageDead(_174);
        _177 = discriminant(_173);
        switchInt(move _177) -> [0: bb81, 1: bb82, otherwise: bb4];
    }

    bb81: {
        StorageLive(_181);
        _181 = ((_173 as Continue).0: std::option::Option<&anchor_lang::prelude::AccountInfo<'_>>);
        _172 = _181;
        StorageDead(_181);
        _317 = discriminant(_173);
        StorageDead(_173);
        StorageLive(_182);
        StorageLive(_183);
        StorageLive(_184);
        StorageLive(_185);
        StorageLive(_186);
        _186 = &mut _12;
        _185 = <std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>> as Iterator>::next(move _186) -> [return: bb84, unwind: bb157];
    }

    bb82: {
        StorageLive(_178);
        _178 = move ((_173 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_180);
        _180 = move _178;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _180) -> [return: bb83, unwind: bb168];
    }

    bb83: {
        StorageDead(_180);
        StorageDead(_178);
        _335 = discriminant(_173);
        StorageDead(_173);
        goto -> bb141;
    }

    bb84: {
        StorageDead(_186);
        _184 = maybe_price_account(move _185) -> [return: bb85, unwind: bb157];
    }

    bb85: {
        StorageDead(_185);
        _183 = <std::result::Result<std::option::Option<&anchor_lang::prelude::AccountInfo<'_>>, anchor_lang::error::Error> as Try>::branch(move _184) -> [return: bb86, unwind: bb157];
    }

    bb86: {
        StorageDead(_184);
        _187 = discriminant(_183);
        switchInt(move _187) -> [0: bb87, 1: bb88, otherwise: bb4];
    }

    bb87: {
        StorageLive(_191);
        _191 = ((_183 as Continue).0: std::option::Option<&anchor_lang::prelude::AccountInfo<'_>>);
        _182 = _191;
        StorageDead(_191);
        _319 = discriminant(_183);
        StorageDead(_183);
        StorageLive(_192);
        StorageLive(_193);
        StorageLive(_194);
        StorageLive(_195);
        _195 = &(*_52);
        _194 = <RefMut<'_, reserve::Reserve> as Deref>::deref(move _195) -> [return: bb90, unwind: bb157];
    }

    bb88: {
        StorageLive(_188);
        _188 = move ((_183 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_190);
        _190 = move _188;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _190) -> [return: bb89, unwind: bb167];
    }

    bb89: {
        StorageDead(_190);
        StorageDead(_188);
        _333 = discriminant(_183);
        StorageDead(_183);
        goto -> bb140;
    }

    bb90: {
        _193 = &(*_194);
        StorageDead(_195);
        StorageLive(_196);
        StorageLive(_197);
        StorageLive(_198);
        _198 = &(*_98);
        _197 = <Ref<'_, state::lending_market::LendingMarket> as Deref>::deref(move _198) -> [return: bb91, unwind: bb157];
    }

    bb91: {
        _196 = &(*_197);
        StorageDead(_198);
        StorageLive(_199);
        _199 = ((*_3).4: i64);
        _192 = is_price_refresh_needed(move _193, move _196, move _199) -> [return: bb92, unwind: bb157];
    }

    bb92: {
        switchInt(move _192) -> [0: bb106, otherwise: bb93];
    }

    bb93: {
        StorageDead(_199);
        StorageDead(_197);
        StorageDead(_196);
        StorageDead(_194);
        StorageDead(_193);
        StorageLive(_200);
        StorageLive(_201);
        StorageLive(_202);
        StorageLive(_203);
        StorageLive(_204);
        StorageLive(_205);
        _205 = &(*_52);
        _204 = <RefMut<'_, reserve::Reserve> as Deref>::deref(move _205) -> [return: bb94, unwind: bb157];
    }

    bb94: {
        StorageDead(_205);
        _203 = &(((*_204).9: state::reserve::ReserveConfig).19: state::token_info::TokenInfo);
        StorageLive(_206);
        _206 = _152;
        StorageLive(_207);
        _207 = _162;
        StorageLive(_208);
        _208 = _172;
        StorageLive(_209);
        _209 = _182;
        _202 = token_info::TokenInfo::validate_token_info_config(move _203, move _206, move _207, move _208, move _209) -> [return: bb95, unwind: bb157];
    }

    bb95: {
        StorageDead(_209);
        StorageDead(_208);
        StorageDead(_207);
        StorageDead(_206);
        StorageDead(_203);
        _201 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _202) -> [return: bb96, unwind: bb157];
    }

    bb96: {
        StorageDead(_202);
        _210 = discriminant(_201);
        switchInt(move _210) -> [0: bb97, 1: bb98, otherwise: bb4];
    }

    bb97: {
        StorageLive(_214);
        _214 = ((_201 as Continue).0: ());
        _200 = _214;
        StorageDead(_214);
        _321 = discriminant(_201);
        StorageDead(_204);
        StorageDead(_201);
        StorageDead(_200);
        StorageLive(_215);
        StorageLive(_216);
        StorageLive(_217);
        StorageLive(_218);
        StorageLive(_219);
        StorageLive(_220);
        _220 = &(*_52);
        _219 = <RefMut<'_, reserve::Reserve> as Deref>::deref(move _220) -> [return: bb100, unwind: bb157];
    }

    bb98: {
        StorageLive(_211);
        _211 = move ((_201 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_213);
        _213 = move _211;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _213) -> [return: bb99, unwind: bb166];
    }

    bb99: {
        StorageDead(_213);
        StorageDead(_211);
        _331 = discriminant(_201);
        StorageDead(_204);
        StorageDead(_201);
        StorageDead(_200);
        goto -> bb139;
    }

    bb100: {
        StorageDead(_220);
        _218 = &(((*_219).9: state::reserve::ReserveConfig).19: state::token_info::TokenInfo);
        _217 = &(*_218);
        StorageLive(_221);
        _221 = _152;
        StorageLive(_222);
        _222 = _162;
        StorageLive(_223);
        _223 = _172;
        StorageLive(_224);
        _224 = _182;
        StorageLive(_225);
        _225 = &(*_3);
        _216 = get_price(move _217, move _221, move _222, move _223, move _224, move _225) -> [return: bb101, unwind: bb157];
    }

    bb101: {
        StorageDead(_225);
        StorageDead(_224);
        StorageDead(_223);
        StorageDead(_222);
        StorageDead(_221);
        StorageDead(_217);
        _215 = <std::result::Result<std::option::Option<prices::GetPriceResult>, anchor_lang::error::Error> as Try>::branch(move _216) -> [return: bb102, unwind: bb157];
    }

    bb102: {
        StorageDead(_216);
        _226 = discriminant(_215);
        switchInt(move _226) -> [0: bb103, 1: bb104, otherwise: bb4];
    }

    bb103: {
        StorageLive(_230);
        _230 = move ((_215 as Continue).0: std::option::Option<utils::prices::GetPriceResult>);
        _150 = move _230;
        StorageDead(_230);
        _323 = discriminant(_215);
        StorageDead(_219);
        StorageDead(_218);
        StorageDead(_215);
        goto -> bb107;
    }

    bb104: {
        StorageLive(_227);
        _227 = move ((_215 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_229);
        _229 = move _227;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _229) -> [return: bb105, unwind: bb165];
    }

    bb105: {
        StorageDead(_229);
        StorageDead(_227);
        _329 = discriminant(_215);
        StorageDead(_219);
        StorageDead(_218);
        StorageDead(_215);
        goto -> bb139;
    }

    bb106: {
        StorageDead(_199);
        StorageDead(_197);
        StorageDead(_196);
        StorageDead(_194);
        StorageDead(_193);
        _150 = std::option::Option::<prices::GetPriceResult>::None;
        goto -> bb107;
    }

    bb107: {
        StorageDead(_192);
        StorageDead(_182);
        StorageDead(_172);
        StorageDead(_162);
        StorageDead(_152);
        goto -> bb108;
    }

    bb108: {
        StorageDead(_151);
        StorageLive(_231);
        StorageLive(_232);
        StorageLive(_233);
        StorageLive(_234);
        StorageLive(_235);
        StorageLive(_236);
        _236 = &mut (*_52);
        _235 = <RefMut<'_, reserve::Reserve> as DerefMut>::deref_mut(move _236) -> [return: bb109, unwind: bb157];
    }

    bb109: {
        _234 = &mut (*_235);
        StorageDead(_236);
        StorageLive(_237);
        _237 = &(*_3);
        StorageLive(_238);
        _238 = move _150;
        StorageLive(_239);
        StorageLive(_240);
        StorageLive(_241);
        _241 = &(*_98);
        _240 = <Ref<'_, state::lending_market::LendingMarket> as Deref>::deref(move _241) -> [return: bb110, unwind: bb157];
    }

    bb110: {
        StorageDead(_241);
        _239 = ((*_240).5: u16);
        _233 = lending_operations::refresh_reserve(move _234, move _237, move _238, move _239) -> [return: bb111, unwind: bb157];
    }

    bb111: {
        StorageDead(_239);
        StorageDead(_238);
        StorageDead(_237);
        StorageDead(_234);
        _232 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _233) -> [return: bb112, unwind: bb157];
    }

    bb112: {
        StorageDead(_233);
        _242 = discriminant(_232);
        switchInt(move _242) -> [0: bb113, 1: bb114, otherwise: bb4];
    }

    bb113: {
        StorageLive(_246);
        _246 = ((_232 as Continue).0: ());
        _231 = _246;
        StorageDead(_246);
        _325 = discriminant(_232);
        StorageDead(_240);
        StorageDead(_235);
        StorageDead(_232);
        StorageDead(_231);
        StorageLive(_247);
        StorageLive(_248);
        StorageLive(_249);
        _249 = ((*_3).4: i64);
        _248 = <u64 as TryFrom<i64>>::try_from(move _249) -> [return: bb116, unwind: bb157];
    }

    bb114: {
        StorageLive(_243);
        _243 = move ((_232 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_245);
        _245 = move _243;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _245) -> [return: bb115, unwind: bb164];
    }

    bb115: {
        StorageDead(_245);
        StorageDead(_243);
        _327 = discriminant(_232);
        StorageDead(_240);
        StorageDead(_235);
        StorageDead(_232);
        StorageDead(_231);
        goto -> bb144;
    }

    bb116: {
        StorageDead(_249);
        _247 = std::result::Result::<u64, TryFromIntError>::unwrap(move _248) -> [return: bb117, unwind: bb157];
    }

    bb117: {
        StorageDead(_248);
        StorageLive(_250);
        StorageLive(_251);
        StorageLive(_252);
        StorageLive(_253);
        _253 = &mut (*_52);
        _252 = <RefMut<'_, reserve::Reserve> as DerefMut>::deref_mut(move _253) -> [return: bb118, unwind: bb157];
    }

    bb118: {
        _251 = &mut (*_252);
        StorageDead(_253);
        StorageLive(_254);
        _254 = _247;
        _250 = refresh_reserve_limit_timestamps(move _251, move _254) -> [return: bb119, unwind: bb157];
    }

    bb119: {
        StorageDead(_254);
        StorageDead(_251);
        StorageDead(_252);
        StorageDead(_250);
        StorageLive(_255);
        _255 = _2;
        switchInt(move _255) -> [0: bb120, otherwise: bb133];
    }

    bb120: {
        StorageLive(_256);
        StorageLive(_257);
        StorageLive(_258);
        StorageLive(_259);
        StorageLive(_260);
        StorageLive(_261);
        StorageLive(_262);
        StorageLive(_263);
        StorageLive(_264);
        StorageLive(_265);
        StorageLive(_266);
        _294 = const _;
        _266 = &(*_294);
        _265 = &(*_266);
        _264 = move _265 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_265);
        StorageLive(_268);
        StorageLive(_269);
        StorageLive(_270);
        StorageLive(_271);
        StorageLive(_272);
        StorageLive(_273);
        StorageLive(_274);
        StorageLive(_275);
        StorageLive(_276);
        StorageLive(_277);
        StorageLive(_278);
        StorageLive(_279);
        _279 = &(*_52);
        _278 = <RefMut<'_, reserve::Reserve> as Deref>::deref(move _279) -> [return: bb121, unwind: bb157];
    }

    bb121: {
        StorageDead(_279);
        _277 = &(((*_278).9: state::reserve::ReserveConfig).19: state::token_info::TokenInfo);
        _276 = token_info::TokenInfo::symbol(move _277) -> [return: bb122, unwind: bb157];
    }

    bb122: {
        StorageDead(_277);
        _275 = &_276;
        _274 = &_275;
        _273 = &(*_274);
        _272 = core::fmt::rt::Argument::<'_>::new_display::<&&str>(move _273) -> [return: bb123, unwind: bb157];
    }

    bb123: {
        StorageDead(_273);
        StorageLive(_280);
        StorageLive(_281);
        StorageLive(_282);
        StorageLive(_283);
        StorageLive(_284);
        StorageLive(_285);
        StorageLive(_286);
        StorageLive(_287);
        StorageLive(_288);
        _288 = &(*_52);
        _287 = <RefMut<'_, reserve::Reserve> as Deref>::deref(move _288) -> [return: bb124, unwind: bb157];
    }

    bb124: {
        StorageDead(_288);
        _286 = &((*_287).5: state::reserve::ReserveLiquidity);
        _285 = ReserveLiquidity::get_market_price(move _286) -> [return: bb125, unwind: bb157];
    }

    bb125: {
        _284 = &_285;
        StorageDead(_286);
        _283 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as utils::fraction::FractionExtra>::to_display(move _284) -> [return: bb126, unwind: bb157];
    }

    bb126: {
        StorageDead(_284);
        _282 = &_283;
        _281 = &(*_282);
        _280 = core::fmt::rt::Argument::<'_>::new_display::<FractionDisplay<'_>>(move _281) -> [return: bb127, unwind: bb157];
    }

    bb127: {
        StorageDead(_281);
        _271 = [move _272, move _280];
        StorageDead(_280);
        StorageDead(_272);
        _270 = &_271;
        _269 = &(*_270);
        _268 = move _269 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_269);
        _263 = Arguments::<'_>::new_v1(move _264, move _268) -> [return: bb128, unwind: bb157];
    }

    bb128: {
        StorageDead(_268);
        StorageDead(_264);
        _262 = format(move _263) -> [return: bb129, unwind: bb157];
    }

    bb129: {
        StorageDead(_263);
        StorageDead(_287);
        StorageDead(_285);
        StorageDead(_283);
        StorageDead(_282);
        StorageDead(_278);
        StorageDead(_276);
        StorageDead(_275);
        StorageDead(_274);
        StorageDead(_271);
        StorageDead(_270);
        StorageDead(_266);
        _261 = move _262;
        StorageDead(_262);
        _260 = &_261;
        _259 = &(*_260);
        _258 = <std::string::String as Deref>::deref(move _259) -> [return: bb130, unwind: bb154];
    }

    bb130: {
        _257 = &(*_258);
        StorageDead(_259);
        _256 = solana_program::log::sol_log(move _257) -> [return: bb131, unwind: bb154];
    }

    bb131: {
        StorageDead(_257);
        drop(_261) -> [return: bb132, unwind: bb157];
    }

    bb132: {
        StorageDead(_261);
        StorageDead(_260);
        StorageDead(_258);
        StorageDead(_256);
        _15 = const ();
        goto -> bb134;
    }

    bb133: {
        _15 = const ();
        goto -> bb134;
    }

    bb134: {
        StorageDead(_255);
        StorageDead(_247);
        StorageDead(_150);
        drop(_99) -> [return: bb135, unwind: bb158];
    }

    bb135: {
        StorageDead(_99);
        StorageDead(_98);
        drop(_89) -> [return: bb136, unwind: bb160];
    }

    bb136: {
        StorageDead(_89);
        drop(_53) -> [return: bb137, unwind: bb161];
    }

    bb137: {
        StorageDead(_53);
        StorageDead(_52);
        drop(_43) -> [return: bb138, unwind: bb163];
    }

    bb138: {
        StorageDead(_43);
        StorageDead(_39);
        StorageDead(_17);
        goto -> bb8;
    }

    bb139: {
        StorageDead(_192);
        goto -> bb140;
    }

    bb140: {
        StorageDead(_182);
        goto -> bb141;
    }

    bb141: {
        StorageDead(_172);
        goto -> bb142;
    }

    bb142: {
        StorageDead(_162);
        goto -> bb143;
    }

    bb143: {
        StorageDead(_152);
        StorageDead(_151);
        goto -> bb144;
    }

    bb144: {
        StorageDead(_150);
        goto -> bb145;
    }

    bb145: {
        drop(_99) -> [return: bb146, unwind: bb158];
    }

    bb146: {
        StorageDead(_99);
        StorageDead(_98);
        drop(_89) -> [return: bb147, unwind: bb160];
    }

    bb147: {
        StorageDead(_89);
        goto -> bb148;
    }

    bb148: {
        drop(_53) -> [return: bb149, unwind: bb161];
    }

    bb149: {
        StorageDead(_53);
        StorageDead(_52);
        drop(_43) -> [return: bb150, unwind: bb163];
    }

    bb150: {
        StorageDead(_43);
        StorageDead(_39);
        goto -> bb151;
    }

    bb151: {
        StorageDead(_17);
        StorageDead(_14);
        StorageDead(_12);
        goto -> bb152;
    }

    bb152: {
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb153;
    }

    bb153: {
        return;
    }

    bb154 (cleanup): {
        drop(_261) -> [return: bb157, unwind terminate(cleanup)];
    }

    bb155 (cleanup): {
        drop(_138) -> [return: bb157, unwind terminate(cleanup)];
    }

    bb156 (cleanup): {
        drop(_117) -> [return: bb157, unwind terminate(cleanup)];
    }

    bb157 (cleanup): {
        drop(_99) -> [return: bb158, unwind terminate(cleanup)];
    }

    bb158 (cleanup): {
        drop(_89) -> [return: bb160, unwind terminate(cleanup)];
    }

    bb159 (cleanup): {
        drop(_72) -> [return: bb160, unwind terminate(cleanup)];
    }

    bb160 (cleanup): {
        drop(_53) -> [return: bb161, unwind terminate(cleanup)];
    }

    bb161 (cleanup): {
        drop(_43) -> [return: bb163, unwind terminate(cleanup)];
    }

    bb162 (cleanup): {
        drop(_27) -> [return: bb163, unwind terminate(cleanup)];
    }

    bb163 (cleanup): {
        resume;
    }

    bb164 (cleanup): {
        _351 = discriminant(_232);
        goto -> bb157;
    }

    bb165 (cleanup): {
        _352 = discriminant(_215);
        goto -> bb157;
    }

    bb166 (cleanup): {
        _353 = discriminant(_201);
        goto -> bb157;
    }

    bb167 (cleanup): {
        _354 = discriminant(_183);
        goto -> bb157;
    }

    bb168 (cleanup): {
        _355 = discriminant(_173);
        goto -> bb157;
    }

    bb169 (cleanup): {
        _356 = discriminant(_163);
        goto -> bb157;
    }

    bb170 (cleanup): {
        _357 = discriminant(_153);
        goto -> bb157;
    }

    bb171 (cleanup): {
        _358 = discriminant(_100);
        goto -> bb158;
    }

    bb172 (cleanup): {
        _359 = discriminant(_90);
        goto -> bb160;
    }

    bb173 (cleanup): {
        drop(_70) -> [return: bb160, unwind terminate(cleanup)];
    }

    bb174 (cleanup): {
        switchInt(_302) -> [0: bb160, otherwise: bb173];
    }

    bb175 (cleanup): {
        _360 = discriminant(_54);
        goto -> bb161;
    }

    bb176 (cleanup): {
        _361 = discriminant(_44);
        goto -> bb163;
    }

    bb177 (cleanup): {
        _362 = discriminant(_5);
        goto -> bb163;
    }
}
