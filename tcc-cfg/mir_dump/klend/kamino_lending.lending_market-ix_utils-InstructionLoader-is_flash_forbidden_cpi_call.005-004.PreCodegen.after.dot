digraph Mir_0_1121 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn InstructionLoader::is_flash_forbidden_cpi_call(_1: &amp;ReErased Self/#0) -&gt; std::result::Result&lt;bool, anchor_lang::error::Error&gt;<br align="left"/>let _2: usize;<br align="left"/>let mut _3: u16;<br align="left"/>let mut _4: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, anchor_lang::prelude::ProgramError&gt;, u16&gt;;<br align="left"/>let mut _5: std::result::Result&lt;u16, anchor_lang::prelude::ProgramError&gt;;<br align="left"/>let mut _6: &amp;ReErased Self/#0;<br align="left"/>let mut _7: isize;<br align="left"/>let _8: std::result::Result&lt;std::convert::Infallible, anchor_lang::prelude::ProgramError&gt;;<br align="left"/>let mut _9: !;<br align="left"/>let mut _10: std::result::Result&lt;std::convert::Infallible, anchor_lang::prelude::ProgramError&gt;;<br align="left"/>let _11: u16;<br align="left"/>let _12: solana_program::instruction::Instruction;<br align="left"/>let mut _13: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, anchor_lang::prelude::ProgramError&gt;, solana_program::instruction::Instruction&gt;;<br align="left"/>let mut _14: std::result::Result&lt;solana_program::instruction::Instruction, anchor_lang::prelude::ProgramError&gt;;<br align="left"/>let mut _15: &amp;ReErased Self/#0;<br align="left"/>let mut _16: usize;<br align="left"/>let mut _17: isize;<br align="left"/>let _18: std::result::Result&lt;std::convert::Infallible, anchor_lang::prelude::ProgramError&gt;;<br align="left"/>let mut _19: !;<br align="left"/>let mut _20: std::result::Result&lt;std::convert::Infallible, anchor_lang::prelude::ProgramError&gt;;<br align="left"/>let _21: solana_program::instruction::Instruction;<br align="left"/>let _22: ();<br align="left"/>let mut _23: bool;<br align="left"/>let mut _24: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let _25: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let mut _26: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let mut _27: !;<br align="left"/>let _28: ();<br align="left"/>let mut _29: bool;<br align="left"/>let mut _30: usize;<br align="left"/>let mut _31: !;<br align="left"/>let mut _32: isize;<br align="left"/>let mut _33: isize;<br align="left"/>let mut _34: isize;<br align="left"/>let mut _35: isize;<br align="left"/>let mut _36: isize;<br align="left"/>let mut _37: isize;<br align="left"/>let mut _38: isize;<br align="left"/>let mut _39: isize;<br align="left"/>let mut _40: isize;<br align="left"/>let mut _41: isize;<br align="left"/>debug self =&gt; _1;<br align="left"/>debug current_index =&gt; _2;<br align="left"/>debug residual =&gt; _8;<br align="left"/>debug val =&gt; _11;<br align="left"/>debug current_ixn =&gt; _12;<br align="left"/>debug residual =&gt; _18;<br align="left"/>debug val =&gt; _21;<br align="left"/>>;
    bb0__0_1121 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_2)<br/>StorageLive(_3)<br/>StorageLive(_4)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>_6 = &amp;(*_1)<br/></td></tr><tr><td align="left">_5 = &lt;Self as InstructionLoader&gt;::load_current_index(move _6)</td></tr></table>>];
    bb1__0_1121 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_6)<br/></td></tr><tr><td align="left">_4 = &lt;std::result::Result&lt;u16, anchor_lang::prelude::ProgramError&gt; as Try&gt;::branch(move _5)</td></tr></table>>];
    bb2__0_1121 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/>_7 = discriminant(_4)<br/></td></tr><tr><td align="left">switchInt(move _7)</td></tr></table>>];
    bb3__0_1121 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageLive(_11)<br/>_11 = ((_4 as Continue).0: u16)<br/>_3 = _11<br/>StorageDead(_11)<br/>_2 = move _3 as usize (IntToInt)<br/>StorageDead(_3)<br/>_32 = discriminant(_4)<br/>StorageDead(_4)<br/>StorageLive(_12)<br/>StorageLive(_13)<br/>StorageLive(_14)<br/>StorageLive(_15)<br/>_15 = &amp;(*_1)<br/>StorageLive(_16)<br/>_16 = _2<br/></td></tr><tr><td align="left">_14 = &lt;Self as InstructionLoader&gt;::load_instruction_at(move _15, move _16)</td></tr></table>>];
    bb4__0_1121 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb5__0_1121 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageLive(_8)<br/>_8 = move ((_4 as Break).0: std::result::Result&lt;std::convert::Infallible, anchor_lang::prelude::ProgramError&gt;)<br/>StorageLive(_10)<br/>_10 = move _8<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;bool, anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, anchor_lang::prelude::ProgramError&gt;&gt;&gt;::from_residual(move _10)</td></tr></table>>];
    bb6__0_1121 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_10)<br/>StorageDead(_8)<br/>StorageDead(_3)<br/>_38 = discriminant(_4)<br/>StorageDead(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb7__0_1121 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_16)<br/>StorageDead(_15)<br/></td></tr><tr><td align="left">_13 = &lt;std::result::Result&lt;Instruction, anchor_lang::prelude::ProgramError&gt; as Try&gt;::branch(move _14)</td></tr></table>>];
    bb8__0_1121 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_14)<br/>_17 = discriminant(_13)<br/></td></tr><tr><td align="left">switchInt(move _17)</td></tr></table>>];
    bb9__0_1121 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageLive(_21)<br/>_21 = move ((_13 as Continue).0: solana_program::instruction::Instruction)<br/>_12 = move _21<br/>StorageDead(_21)<br/>_34 = discriminant(_13)<br/>StorageDead(_13)<br/>StorageLive(_22)<br/>StorageLive(_23)<br/>StorageLive(_24)<br/>StorageLive(_25)<br/>_25 = const {alloc279: &amp;anchor_lang::prelude::Pubkey}<br/>_24 = &amp;(*_25)<br/>StorageLive(_26)<br/>_26 = &amp;(_12.0: anchor_lang::prelude::Pubkey)<br/></td></tr><tr><td align="left">_23 = &lt;anchor_lang::prelude::Pubkey as PartialEq&gt;::ne(move _24, move _26)</td></tr></table>>];
    bb10__0_1121 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageLive(_18)<br/>_18 = move ((_13 as Break).0: std::result::Result&lt;std::convert::Infallible, anchor_lang::prelude::ProgramError&gt;)<br/>StorageLive(_20)<br/>_20 = move _18<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;bool, anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, anchor_lang::prelude::ProgramError&gt;&gt;&gt;::from_residual(move _20)</td></tr></table>>];
    bb11__0_1121 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageDead(_20)<br/>StorageDead(_18)<br/>_36 = discriminant(_13)<br/>StorageDead(_13)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb12__0_1121 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left">switchInt(move _23)</td></tr></table>>];
    bb13__0_1121 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageDead(_26)<br/>StorageDead(_25)<br/>StorageDead(_24)<br/>_0 = std::result::Result::&lt;bool, anchor_lang::error::Error&gt;::Ok(const true)<br/>StorageDead(_23)<br/>StorageDead(_22)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb14__0_1121 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageDead(_26)<br/>StorageDead(_25)<br/>StorageDead(_24)<br/>_22 = const ()<br/>StorageDead(_23)<br/>StorageDead(_22)<br/>StorageLive(_28)<br/>StorageLive(_29)<br/>StorageLive(_30)<br/></td></tr><tr><td align="left">_30 = get_stack_height()</td></tr></table>>];
    bb15__0_1121 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">_29 = Gt(move _30, const _)<br/></td></tr><tr><td align="left">switchInt(move _29)</td></tr></table>>];
    bb16__0_1121 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageDead(_30)<br/>_0 = std::result::Result::&lt;bool, anchor_lang::error::Error&gt;::Ok(const true)<br/>StorageDead(_29)<br/>StorageDead(_28)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb17__0_1121 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageDead(_30)<br/>_28 = const ()<br/>StorageDead(_29)<br/>StorageDead(_28)<br/>_0 = std::result::Result::&lt;bool, anchor_lang::error::Error&gt;::Ok(const false)<br/></td></tr><tr><td align="left">drop(_12)</td></tr></table>>];
    bb18__0_1121 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageDead(_12)<br/>StorageDead(_2)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb19__0_1121 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left">drop(_12)</td></tr></table>>];
    bb20__0_1121 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">StorageDead(_12)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb21__0_1121 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">StorageDead(_2)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb22__0_1121 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left">return</td></tr></table>>];
    bb23__0_1121 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">23 (cleanup)</td></tr><tr><td align="left">drop(_12)</td></tr></table>>];
    bb24__0_1121 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">24 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb25__0_1121 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">25 (cleanup)</td></tr><tr><td align="left" balign="left">_40 = discriminant(_13)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb26__0_1121 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">26 (cleanup)</td></tr><tr><td align="left" balign="left">_41 = discriminant(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb0__0_1121 -> bb1__0_1121 [label="return"];
    bb1__0_1121 -> bb2__0_1121 [label="return"];
    bb1__0_1121 -> bb24__0_1121 [label="unwind"];
    bb2__0_1121 -> bb3__0_1121 [label="0"];
    bb2__0_1121 -> bb5__0_1121 [label="1"];
    bb2__0_1121 -> bb4__0_1121 [label="otherwise"];
    bb3__0_1121 -> bb7__0_1121 [label="return"];
    bb5__0_1121 -> bb6__0_1121 [label="return"];
    bb5__0_1121 -> bb26__0_1121 [label="unwind"];
    bb6__0_1121 -> bb21__0_1121 [label=""];
    bb7__0_1121 -> bb8__0_1121 [label="return"];
    bb7__0_1121 -> bb24__0_1121 [label="unwind"];
    bb8__0_1121 -> bb9__0_1121 [label="0"];
    bb8__0_1121 -> bb10__0_1121 [label="1"];
    bb8__0_1121 -> bb4__0_1121 [label="otherwise"];
    bb9__0_1121 -> bb12__0_1121 [label="return"];
    bb9__0_1121 -> bb23__0_1121 [label="unwind"];
    bb10__0_1121 -> bb11__0_1121 [label="return"];
    bb10__0_1121 -> bb25__0_1121 [label="unwind"];
    bb11__0_1121 -> bb20__0_1121 [label=""];
    bb12__0_1121 -> bb14__0_1121 [label="0"];
    bb12__0_1121 -> bb13__0_1121 [label="otherwise"];
    bb13__0_1121 -> bb19__0_1121 [label=""];
    bb14__0_1121 -> bb15__0_1121 [label="return"];
    bb14__0_1121 -> bb23__0_1121 [label="unwind"];
    bb15__0_1121 -> bb17__0_1121 [label="0"];
    bb15__0_1121 -> bb16__0_1121 [label="otherwise"];
    bb16__0_1121 -> bb19__0_1121 [label=""];
    bb17__0_1121 -> bb18__0_1121 [label="return"];
    bb17__0_1121 -> bb24__0_1121 [label="unwind"];
    bb18__0_1121 -> bb22__0_1121 [label=""];
    bb19__0_1121 -> bb20__0_1121 [label="return"];
    bb19__0_1121 -> bb24__0_1121 [label="unwind"];
    bb20__0_1121 -> bb21__0_1121 [label=""];
    bb21__0_1121 -> bb22__0_1121 [label=""];
    bb23__0_1121 -> bb24__0_1121 [label="return"];
    bb25__0_1121 -> bb24__0_1121 [label=""];
    bb26__0_1121 -> bb24__0_1121 [label=""];
}
