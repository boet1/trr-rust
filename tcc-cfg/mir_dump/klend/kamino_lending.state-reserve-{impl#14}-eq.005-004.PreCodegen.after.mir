// MIR for `reserve::<impl at programs\klend\src\state\reserve.rs:31:26: 31:35>::eq` after PreCodegen

fn reserve::<impl at programs\klend\src\state\reserve.rs:31:26: 31:35>::eq(_1: &reserve::BigFractionBytes, _2: &reserve::BigFractionBytes) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: bool;
    let mut _4: &[u64; 4];
    let mut _5: &[u64; 4];
    let mut _6: &[u64; 2];
    let mut _7: &[u64; 2];

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        _4 = &((*_1).0: [u64; 4]);
        StorageLive(_5);
        _5 = &((*_2).0: [u64; 4]);
        _3 = <[u64; 4] as PartialEq>::eq(move _4, move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _3) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_6);
        _6 = &((*_1).1: [u64; 2]);
        StorageLive(_7);
        _7 = &((*_2).1: [u64; 2]);
        _0 = <[u64; 2] as PartialEq>::eq(move _6, move _7) -> [return: bb4, unwind continue];
    }

    bb3: {
        StorageDead(_5);
        StorageDead(_4);
        _0 = const false;
        goto -> bb5;
    }

    bb4: {
        StorageDead(_7);
        StorageDead(_6);
        goto -> bb5;
    }

    bb5: {
        StorageDead(_3);
        return;
    }
}
