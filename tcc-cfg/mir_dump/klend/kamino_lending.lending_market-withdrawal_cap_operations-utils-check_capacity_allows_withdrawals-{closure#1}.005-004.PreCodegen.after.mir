// MIR for `check_capacity_allows_withdrawals::{closure#1}` after PreCodegen

fn check_capacity_allows_withdrawals::{closure#1}(_1: {closure@programs\klend\src\lending_market\withdrawal_cap_operations.rs:120:25: 120:27}) -> LendingError {
    let mut _0: LendingError;
    let mut _2: LendingError;
    let _3: LendingError;
    let _4: ();
    let _5: ();
    let mut _6: std::fmt::Arguments<'_>;
    let mut _7: &[&str];
    let mut _8: &[&str; 2];
    let _9: &[&str; 2];
    let _10: [&str; 2];
    let mut _11: &[core::fmt::rt::Argument<'_>];
    let mut _12: &[core::fmt::rt::Argument<'_>; 1];
    let _13: &[core::fmt::rt::Argument<'_>; 1];
    let _14: [core::fmt::rt::Argument<'_>; 1];
    let mut _15: core::fmt::rt::Argument<'_>;
    let mut _16: &&LendingError;
    let _17: &&LendingError;
    let _18: &LendingError;
    let mut _19: &[core::fmt::rt::Placeholder];
    let mut _20: &[core::fmt::rt::Placeholder; 1];
    let _21: &[core::fmt::rt::Placeholder; 1];
    let _22: [core::fmt::rt::Placeholder; 1];
    let mut _23: core::fmt::rt::Placeholder;
    let mut _24: core::fmt::rt::Alignment;
    let mut _25: core::fmt::rt::Count;
    let mut _26: core::fmt::rt::Count;
    let mut _27: core::fmt::rt::UnsafeArg;
    scope 1 {
        debug tmp => _3;
        let mut _28: &[&str; 2];
        scope 2 {
        }
    }

    bb0: {
        StorageLive(_2);
        _2 = LendingError::MathOverflow;
        StorageLive(_3);
        _3 = _2;
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _28 = const _;
        _9 = &(*_28);
        _8 = &(*_9);
        _7 = move _8 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_8);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        _18 = &_3;
        _17 = &_18;
        _16 = &(*_17);
        _15 = core::fmt::rt::Argument::<'_>::new_debug::<&LendingError>(move _16) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_16);
        _14 = [move _15];
        StorageDead(_15);
        _13 = &_14;
        _12 = &(*_13);
        _11 = move _12 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_12);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        _24 = core::fmt::rt::Alignment::Unknown;
        StorageLive(_25);
        _25 = core::fmt::rt::Count::Implied;
        StorageLive(_26);
        _26 = core::fmt::rt::Count::Implied;
        _23 = core::fmt::rt::Placeholder::new(const 0_usize, const ' ', move _24, const 4_u32, move _25, move _26) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_24);
        _22 = [move _23];
        StorageDead(_23);
        _21 = &_22;
        _20 = &(*_21);
        _19 = move _20 as &[core::fmt::rt::Placeholder] (PointerCoercion(Unsize));
        StorageDead(_20);
        StorageLive(_27);
        _27 = core::fmt::rt::UnsafeArg::new() -> [return: bb3, unwind continue];
    }

    bb3: {
        _6 = Arguments::<'_>::new_v1_formatted(move _7, move _11, move _19, move _27) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_27);
        StorageDead(_19);
        StorageDead(_11);
        StorageDead(_7);
        _5 = _print(move _6) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_6);
        StorageDead(_22);
        StorageDead(_21);
        StorageDead(_18);
        StorageDead(_17);
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_9);
        StorageDead(_5);
        _4 = const ();
        StorageDead(_4);
        _0 = _3;
        StorageDead(_3);
        StorageDead(_2);
        return;
    }
}
