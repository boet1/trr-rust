// MIR for `uint_types::<impl at C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.5\src\uint.rs:573:3: 573:13>::overflowing_pow::{closure#0}` before PreCodegen

fn uint_types::<impl at C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.5\src\uint.rs:573:3: 573:13>::overflowing_pow::{closure#0}(_1: &{closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.5\src\uint.rs:1020:19: 1020:30}, _2: &uint_types::U256) -> bool {
    debug x => _2;
    let mut _0: bool;
    let mut _3: u64;
    let mut _4: u64;
    let mut _5: &utils::fraction::uint_types::U256;

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = &(*_2);
        _4 = uint_types::U256::low_u64(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_5);
        _3 = BitAnd(move _4, const 1_u64);
        StorageDead(_4);
        _0 = Eq(move _3, const 0_u64);
        StorageDead(_3);
        return;
    }
}
