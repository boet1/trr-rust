digraph Mir_0_12157 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn uint_types::&lt;impl TryFrom&lt;uint_types::U128&gt; for u64&gt;::try_from(_1: utils::fraction::uint_types::U128) -&gt; std::result::Result&lt;u64, &amp;ReErased str&gt;<br align="left"/>let _2: [u64; 2_usize];<br align="left"/>let mut _3: bool;<br align="left"/>let mut _4: &amp;ReErased utils::fraction::uint_types::U128;<br align="left"/>let mut _5: bool;<br align="left"/>let mut _6: u64;<br align="left"/>let _7: usize;<br align="left"/>let mut _8: usize;<br align="left"/>let mut _9: bool;<br align="left"/>let mut _10: u64;<br align="left"/>let mut _11: &amp;ReErased str;<br align="left"/>let _12: &amp;ReErased str;<br align="left"/>let mut _13: u64;<br align="left"/>let _14: usize;<br align="left"/>let mut _15: usize;<br align="left"/>let mut _16: bool;<br align="left"/>debug u =&gt; _1;<br align="left"/>debug arr =&gt; _2;<br align="left"/>>;
    bb0__0_12157 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_2)<br/>_2 = (_1.0: [u64; 2])<br/>StorageLive(_3)<br/>StorageLive(_4)<br/>_4 = &amp;_1<br/></td></tr><tr><td align="left">_3 = uint_types::U128::fits_word(move _4)</td></tr></table>>];
    bb1__0_12157 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left">switchInt(move _3)</td></tr></table>>];
    bb2__0_12157 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_4)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>StorageLive(_7)<br/>_7 = const 0_usize<br/>_8 = Len(_2)<br/>_9 = Lt(_7, _8)<br/></td></tr><tr><td align="left">assert(move _9, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _8, _7)</td></tr></table>>];
    bb3__0_12157 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb4__0_12157 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">_6 = _2[_7]<br/>StorageLive(_10)<br/></td></tr><tr><td align="left">_10 = core::num::&lt;impl u64&gt;::max_value()</td></tr></table>>];
    bb5__0_12157 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">_5 = Gt(move _6, move _10)<br/></td></tr><tr><td align="left">switchInt(move _5)</td></tr></table>>];
    bb6__0_12157 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_10)<br/>StorageDead(_7)<br/>StorageDead(_6)<br/>StorageLive(_11)<br/>StorageLive(_12)<br/>_12 = const &quot;integer overflow when casting to u64&quot;<br/>_11 = &amp;(*_12)<br/>_0 = std::result::Result::&lt;u64, &amp;str&gt;::Err(move _11)<br/>StorageDead(_11)<br/>StorageDead(_12)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb7__0_12157 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_10)<br/>StorageDead(_7)<br/>StorageDead(_6)<br/>StorageLive(_13)<br/>StorageLive(_14)<br/>_14 = const 0_usize<br/>_15 = Len(_2)<br/>_16 = Lt(_14, _15)<br/></td></tr><tr><td align="left">assert(move _16, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _15, _14)</td></tr></table>>];
    bb8__0_12157 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">_13 = _2[_14]<br/>_0 = std::result::Result::&lt;u64, &amp;str&gt;::Ok(move _13)<br/>StorageDead(_13)<br/>StorageDead(_14)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb9__0_12157 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/>StorageDead(_3)<br/>StorageDead(_2)<br/></td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_12157 -> bb1__0_12157 [label="return"];
    bb1__0_12157 -> bb3__0_12157 [label="0"];
    bb1__0_12157 -> bb2__0_12157 [label="otherwise"];
    bb2__0_12157 -> bb4__0_12157 [label="success"];
    bb3__0_12157 -> bb6__0_12157 [label=""];
    bb4__0_12157 -> bb5__0_12157 [label="return"];
    bb5__0_12157 -> bb7__0_12157 [label="0"];
    bb5__0_12157 -> bb6__0_12157 [label="otherwise"];
    bb6__0_12157 -> bb9__0_12157 [label=""];
    bb7__0_12157 -> bb8__0_12157 [label="success"];
    bb8__0_12157 -> bb9__0_12157 [label=""];
}
