// MIR for `handlers::handler_update_lending_market::process` before PreCodegen

fn handlers::handler_update_lending_market::process(_1: anchor_lang::context::Context<'_, '_, '_, '_, handlers::handler_update_lending_market::UpdateLendingMarket<'_>>, _2: u64, _3: [u8; 72]) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug mode => _2;
    debug value => _3;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _4: state::UpdateLendingMarketMode;
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, state::UpdateLendingMarketMode>;
    let mut _6: std::result::Result<state::UpdateLendingMarketMode, anchor_lang::prelude::ProgramError>;
    let mut _7: std::result::Result<state::UpdateLendingMarketMode, num_enum::TryFromPrimitiveError<state::UpdateLendingMarketMode>>;
    let mut _8: u64;
    let mut _9: {closure@programs\klend\src\handlers\handler_update_lending_market.rs:22:18: 22:21};
    let mut _10: isize;
    let _11: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _12: !;
    let mut _13: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let _14: state::UpdateLendingMarketMode;
    let mut _16: std::cell::RefMut<'_, state::lending_market::LendingMarket>;
    let mut _17: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::RefMut<'_, state::lending_market::LendingMarket>>;
    let mut _18: std::result::Result<std::cell::RefMut<'_, state::lending_market::LendingMarket>, anchor_lang::error::Error>;
    let mut _19: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _20: isize;
    let mut _22: !;
    let mut _23: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _25: ();
    let mut _26: &str;
    let _27: &str;
    let mut _28: &std::string::String;
    let _29: &std::string::String;
    let _30: std::string::String;
    let mut _32: std::fmt::Arguments<'_>;
    let mut _33: &[&str];
    let mut _34: &[&str; 3];
    let _35: &[&str; 3];
    let _36: [&str; 3];
    let mut _37: &[core::fmt::rt::Argument<'_>];
    let mut _38: &[core::fmt::rt::Argument<'_>; 3];
    let _39: &[core::fmt::rt::Argument<'_>; 3];
    let _40: [core::fmt::rt::Argument<'_>; 3];
    let mut _41: core::fmt::rt::Argument<'_>;
    let mut _42: &anchor_lang::prelude::Pubkey;
    let _43: &anchor_lang::prelude::Pubkey;
    let _44: anchor_lang::prelude::Pubkey;
    let mut _45: &anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>;
    let mut _46: core::fmt::rt::Argument<'_>;
    let mut _47: &state::UpdateLendingMarketMode;
    let _48: &state::UpdateLendingMarketMode;
    let mut _49: core::fmt::rt::Argument<'_>;
    let mut _50: &&[u8];
    let _51: &&[u8];
    let _52: &[u8];
    let _53: &[u8];
    let mut _54: &[u8; 72];
    let mut _55: std::ops::Range<usize>;
    let _56: ();
    let mut _57: bool;
    let mut _58: &state::lending_market::LendingMarket;
    let _59: &state::lending_market::LendingMarket;
    let mut _60: &std::cell::RefMut<'_, state::lending_market::LendingMarket>;
    let mut _61: !;
    let mut _62: anchor_lang::error::Error;
    let mut _63: anchor_lang::error::AnchorError;
    let mut _64: std::string::String;
    let mut _65: &LendingError;
    let _66: LendingError;
    let mut _67: u32;
    let mut _68: LendingError;
    let mut _69: std::string::String;
    let mut _70: &LendingError;
    let _71: LendingError;
    let mut _72: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _73: anchor_lang::error::ErrorOrigin;
    let mut _74: anchor_lang::error::Source;
    let mut _75: std::option::Option<anchor_lang::error::ComparedValues>;
    let _76: ();
    let mut _77: u64;
    let _78: ();
    let mut _79: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _80: std::result::Result<(), anchor_lang::error::Error>;
    let mut _81: lending_market::config_items::ConfigItemUpdater<'_, anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey, for<'a> fn(&'a mut anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<anchor_lang::prelude::Pubkey>}, for<'t, 'a> fn(&'t anchor_lang::prelude::Pubkey, &'a anchor_lang::prelude::Pubkey) -> std::result::Result<std::option::Option<&'t anchor_lang::prelude::Pubkey>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<anchor_lang::prelude::Pubkey>}, for<'a> fn(&'a anchor_lang::prelude::Pubkey) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<anchor_lang::prelude::Pubkey>}, for<'a, 'b, 'c> fn(&'a anchor_lang::prelude::Pubkey, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<anchor_lang::prelude::Pubkey>}>;
    let mut _82: lending_market::config_items::ConfigItemUpdater<'_, anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey, for<'a> fn(&'a mut anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<anchor_lang::prelude::Pubkey>}, for<'t, 'a> fn(&'t anchor_lang::prelude::Pubkey, &'a anchor_lang::prelude::Pubkey) -> std::result::Result<std::option::Option<&'t anchor_lang::prelude::Pubkey>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<anchor_lang::prelude::Pubkey>}, for<'a> fn(&'a anchor_lang::prelude::Pubkey) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<anchor_lang::prelude::Pubkey>}, for<'a, 'b, 'c> fn(&'a anchor_lang::prelude::Pubkey, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<anchor_lang::prelude::Pubkey>}>;
    let mut _83: &mut anchor_lang::prelude::Pubkey;
    let mut _84: &mut anchor_lang::prelude::Pubkey;
    let mut _85: &mut state::lending_market::LendingMarket;
    let mut _86: &mut std::cell::RefMut<'_, state::lending_market::LendingMarket>;
    let mut _87: &[u8];
    let mut _88: &[u8; 72];
    let _89: &[u8; 72];
    let mut _90: isize;
    let mut _92: !;
    let mut _93: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _95: ();
    let mut _96: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _97: std::result::Result<(), anchor_lang::error::Error>;
    let mut _98: lending_market::config_items::ConfigItemUpdater<'_, u8, u8, for<'a> fn(&'a mut u8, u8) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u8>}, for<'t, 'a> fn(&'t u8, &'a u8) -> std::result::Result<std::option::Option<&'t u8>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u8>}, for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::validations::check_bool::<u8>}, for<'a, 'b, 'c> fn(&'a u8, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u8>}>;
    let mut _99: lending_market::config_items::ConfigItemUpdater<'_, u8, u8, for<'a> fn(&'a mut u8, u8) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u8>}, for<'t, 'a> fn(&'t u8, &'a u8) -> std::result::Result<std::option::Option<&'t u8>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u8>}, for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<u8>}, for<'a, 'b, 'c> fn(&'a u8, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u8>}>;
    let mut _100: lending_market::config_items::ConfigItemUpdater<'_, u8, u8, for<'a> fn(&'a mut u8, u8) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u8>}, for<'t, 'a> fn(&'t u8, &'a u8) -> std::result::Result<std::option::Option<&'t u8>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u8>}, for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<u8>}, for<'a, 'b, 'c> fn(&'a u8, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u8>}>;
    let mut _101: &mut u8;
    let mut _102: &mut u8;
    let mut _103: &mut state::lending_market::LendingMarket;
    let mut _104: &mut std::cell::RefMut<'_, state::lending_market::LendingMarket>;
    let mut _105: &[u8];
    let mut _106: &[u8; 72];
    let _107: &[u8; 72];
    let mut _108: isize;
    let mut _110: !;
    let mut _111: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _113: ();
    let mut _114: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _115: std::result::Result<(), anchor_lang::error::Error>;
    let mut _116: lending_market::config_items::ConfigItemUpdater<'_, u8, u8, for<'a> fn(&'a mut u8, u8) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u8>}, for<'t, 'a> fn(&'t u8, &'a u8) -> std::result::Result<std::option::Option<&'t u8>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u8>}, {closure@programs\klend\src\lending_market\config_items.rs:243:9: 243:21}, for<'a, 'b, 'c> fn(&'a u8, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u8>}>;
    let mut _117: lending_market::config_items::ConfigItemUpdater<'_, u8, u8, for<'a> fn(&'a mut u8, u8) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u8>}, for<'t, 'a> fn(&'t u8, &'a u8) -> std::result::Result<std::option::Option<&'t u8>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u8>}, for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<u8>}, for<'a, 'b, 'c> fn(&'a u8, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u8>}>;
    let mut _118: lending_market::config_items::ConfigItemUpdater<'_, u8, u8, for<'a> fn(&'a mut u8, u8) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u8>}, for<'t, 'a> fn(&'t u8, &'a u8) -> std::result::Result<std::option::Option<&'t u8>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u8>}, for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<u8>}, for<'a, 'b, 'c> fn(&'a u8, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u8>}>;
    let mut _119: &mut u8;
    let mut _120: &mut u8;
    let mut _121: &mut state::lending_market::LendingMarket;
    let mut _122: &mut std::cell::RefMut<'_, state::lending_market::LendingMarket>;
    let mut _123: {closure@programs\klend\src\lending_market\config_items.rs:243:9: 243:21};
    let mut _124: std::ops::RangeInclusive<u128>;
    let mut _125: &[u8];
    let mut _126: &[u8; 72];
    let _127: &[u8; 72];
    let mut _128: isize;
    let mut _130: !;
    let mut _131: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _133: ();
    let mut _134: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _135: std::result::Result<(), anchor_lang::error::Error>;
    let mut _136: lending_market::config_items::ConfigItemUpdater<'_, u64, u64, for<'a> fn(&'a mut u64, u64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u64>}, for<'t, 'a> fn(&'t u64, &'a u64) -> std::result::Result<std::option::Option<&'t u64>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u64>}, for<'a> fn(&'a u64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::validations::check_not_zero::<u64>}, for<'a, 'b, 'c> fn(&'a u64, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u64>}>;
    let mut _137: lending_market::config_items::ConfigItemUpdater<'_, u64, u64, for<'a> fn(&'a mut u64, u64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u64>}, for<'t, 'a> fn(&'t u64, &'a u64) -> std::result::Result<std::option::Option<&'t u64>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u64>}, for<'a> fn(&'a u64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<u64>}, for<'a, 'b, 'c> fn(&'a u64, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u64>}>;
    let mut _138: lending_market::config_items::ConfigItemUpdater<'_, u64, u64, for<'a> fn(&'a mut u64, u64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u64>}, for<'t, 'a> fn(&'t u64, &'a u64) -> std::result::Result<std::option::Option<&'t u64>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u64>}, for<'a> fn(&'a u64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<u64>}, for<'a, 'b, 'c> fn(&'a u64, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u64>}>;
    let mut _139: &mut u64;
    let mut _140: &mut u64;
    let mut _141: &mut state::lending_market::LendingMarket;
    let mut _142: &mut std::cell::RefMut<'_, state::lending_market::LendingMarket>;
    let mut _143: &[u8];
    let mut _144: &[u8; 72];
    let _145: &[u8; 72];
    let mut _146: isize;
    let mut _148: !;
    let mut _149: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _151: ();
    let mut _152: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _153: std::result::Result<(), anchor_lang::error::Error>;
    let mut _154: lending_market::config_items::ConfigItemUpdater<'_, u64, u64, for<'a> fn(&'a mut u64, u64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u64>}, for<'t, 'a> fn(&'t u64, &'a u64) -> std::result::Result<std::option::Option<&'t u64>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u64>}, for<'a> fn(&'a u64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<u64>}, for<'a, 'b, 'c> fn(&'a u64, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u64>}>;
    let mut _155: lending_market::config_items::ConfigItemUpdater<'_, u64, u64, for<'a> fn(&'a mut u64, u64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u64>}, for<'t, 'a> fn(&'t u64, &'a u64) -> std::result::Result<std::option::Option<&'t u64>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u64>}, for<'a> fn(&'a u64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<u64>}, for<'a, 'b, 'c> fn(&'a u64, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u64>}>;
    let mut _156: &mut u64;
    let mut _157: &mut u64;
    let mut _158: &mut state::lending_market::LendingMarket;
    let mut _159: &mut std::cell::RefMut<'_, state::lending_market::LendingMarket>;
    let mut _160: &[u8];
    let mut _161: &[u8; 72];
    let _162: &[u8; 72];
    let mut _163: isize;
    let mut _165: !;
    let mut _166: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _168: !;
    let _169: !;
    let mut _170: std::fmt::Arguments<'_>;
    let mut _171: &[&str];
    let mut _172: &[&str; 1];
    let _173: &[&str; 1];
    let _174: [&str; 1];
    let _175: ();
    let mut _176: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _177: std::result::Result<(), anchor_lang::error::Error>;
    let mut _178: lending_market::config_items::ConfigItemUpdater<'_, u64, u64, for<'a> fn(&'a mut u64, u64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u64>}, for<'t, 'a> fn(&'t u64, &'a u64) -> std::result::Result<std::option::Option<&'t u64>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u64>}, for<'a> fn(&'a u64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::validations::check_not_zero::<u64>}, for<'a, 'b, 'c> fn(&'a u64, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u64>}>;
    let mut _179: lending_market::config_items::ConfigItemUpdater<'_, u64, u64, for<'a> fn(&'a mut u64, u64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u64>}, for<'t, 'a> fn(&'t u64, &'a u64) -> std::result::Result<std::option::Option<&'t u64>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u64>}, for<'a> fn(&'a u64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<u64>}, for<'a, 'b, 'c> fn(&'a u64, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u64>}>;
    let mut _180: lending_market::config_items::ConfigItemUpdater<'_, u64, u64, for<'a> fn(&'a mut u64, u64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u64>}, for<'t, 'a> fn(&'t u64, &'a u64) -> std::result::Result<std::option::Option<&'t u64>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u64>}, for<'a> fn(&'a u64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<u64>}, for<'a, 'b, 'c> fn(&'a u64, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u64>}>;
    let mut _181: &mut u64;
    let mut _182: &mut u64;
    let mut _183: &mut state::lending_market::LendingMarket;
    let mut _184: &mut std::cell::RefMut<'_, state::lending_market::LendingMarket>;
    let mut _185: &[u8];
    let mut _186: &[u8; 72];
    let _187: &[u8; 72];
    let mut _188: isize;
    let mut _190: !;
    let mut _191: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _193: ();
    let mut _194: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _195: std::result::Result<(), anchor_lang::error::Error>;
    let mut _196: lending_market::config_items::ConfigItemUpdater<'_, anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey, for<'a> fn(&'a mut anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<anchor_lang::prelude::Pubkey>}, for<'t, 'a> fn(&'t anchor_lang::prelude::Pubkey, &'a anchor_lang::prelude::Pubkey) -> std::result::Result<std::option::Option<&'t anchor_lang::prelude::Pubkey>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<anchor_lang::prelude::Pubkey>}, for<'a> fn(&'a anchor_lang::prelude::Pubkey) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<anchor_lang::prelude::Pubkey>}, for<'a, 'b, 'c> fn(&'a anchor_lang::prelude::Pubkey, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<anchor_lang::prelude::Pubkey>}>;
    let mut _197: lending_market::config_items::ConfigItemUpdater<'_, anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey, for<'a> fn(&'a mut anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<anchor_lang::prelude::Pubkey>}, for<'t, 'a> fn(&'t anchor_lang::prelude::Pubkey, &'a anchor_lang::prelude::Pubkey) -> std::result::Result<std::option::Option<&'t anchor_lang::prelude::Pubkey>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<anchor_lang::prelude::Pubkey>}, for<'a> fn(&'a anchor_lang::prelude::Pubkey) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<anchor_lang::prelude::Pubkey>}, for<'a, 'b, 'c> fn(&'a anchor_lang::prelude::Pubkey, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<anchor_lang::prelude::Pubkey>}>;
    let mut _198: &mut anchor_lang::prelude::Pubkey;
    let mut _199: &mut anchor_lang::prelude::Pubkey;
    let mut _200: &mut state::lending_market::LendingMarket;
    let mut _201: &mut std::cell::RefMut<'_, state::lending_market::LendingMarket>;
    let mut _202: &[u8];
    let mut _203: &[u8; 72];
    let _204: &[u8; 72];
    let mut _205: isize;
    let mut _207: !;
    let mut _208: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _210: ();
    let mut _211: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _212: std::result::Result<(), anchor_lang::error::Error>;
    let mut _213: lending_market::config_items::ConfigItemUpdater<'_, u8, u8, for<'a> fn(&'a mut u8, u8) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u8>}, for<'t, 'a> fn(&'t u8, &'a u8) -> std::result::Result<std::option::Option<&'t u8>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u8>}, {closure@programs\klend\src\lending_market\config_items.rs:243:9: 243:21}, for<'a, 'b, 'c> fn(&'a u8, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u8>}>;
    let mut _214: lending_market::config_items::ConfigItemUpdater<'_, u8, u8, for<'a> fn(&'a mut u8, u8) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u8>}, for<'t, 'a> fn(&'t u8, &'a u8) -> std::result::Result<std::option::Option<&'t u8>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u8>}, for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<u8>}, for<'a, 'b, 'c> fn(&'a u8, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u8>}>;
    let mut _215: lending_market::config_items::ConfigItemUpdater<'_, u8, u8, for<'a> fn(&'a mut u8, u8) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u8>}, for<'t, 'a> fn(&'t u8, &'a u8) -> std::result::Result<std::option::Option<&'t u8>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u8>}, for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<u8>}, for<'a, 'b, 'c> fn(&'a u8, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u8>}>;
    let mut _216: &mut u8;
    let mut _217: &mut u8;
    let mut _218: &mut state::lending_market::LendingMarket;
    let mut _219: &mut std::cell::RefMut<'_, state::lending_market::LendingMarket>;
    let mut _220: {closure@programs\klend\src\lending_market\config_items.rs:243:9: 243:21};
    let mut _221: std::ops::RangeInclusive<u128>;
    let mut _222: &[u8];
    let mut _223: &[u8; 72];
    let _224: &[u8; 72];
    let mut _225: isize;
    let mut _227: !;
    let mut _228: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _230: ();
    let mut _231: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _232: std::result::Result<(), anchor_lang::error::Error>;
    let mut _233: lending_market::config_items::ConfigItemUpdater<'_, std::cell::RefMut<'_, state::lending_market::LendingMarket>, state::lending_market::ElevationGroup, {closure@programs\klend\src\handlers\handler_update_lending_market.rs:79:21: 79:36}, {closure@programs\klend\src\handlers\handler_update_lending_market.rs:80:21: 80:36}, for<'a> fn(&'a state::lending_market::ElevationGroup) -> std::result::Result<(), anchor_lang::error::Error> {handlers::handler_update_lending_market::validate_new_elevation_group}, for<'a, 'b, 'c> fn(&'a state::lending_market::ElevationGroup, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<state::lending_market::ElevationGroup>}>;
    let mut _234: lending_market::config_items::ConfigItemUpdater<'_, std::cell::RefMut<'_, state::lending_market::LendingMarket>, state::lending_market::ElevationGroup, {closure@programs\klend\src\handlers\handler_update_lending_market.rs:79:21: 79:36}, {closure@programs\klend\src\handlers\handler_update_lending_market.rs:80:21: 80:36}, for<'a> fn(&'a state::lending_market::ElevationGroup) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<state::lending_market::ElevationGroup>}, for<'a, 'b, 'c> fn(&'a state::lending_market::ElevationGroup, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<state::lending_market::ElevationGroup>}>;
    let mut _235: lending_market::config_items::ConfigItemUpdater<'_, std::cell::RefMut<'_, state::lending_market::LendingMarket>, state::lending_market::ElevationGroup, {closure@programs\klend\src\handlers\handler_update_lending_market.rs:79:21: 79:36}, {closure@programs\klend\src\handlers\handler_update_lending_market.rs:80:21: 80:36}, for<'a> fn(&'a state::lending_market::ElevationGroup) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<state::lending_market::ElevationGroup>}, for<'a, 'b, 'c> fn(&'a state::lending_market::ElevationGroup, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<state::lending_market::ElevationGroup>}>;
    let mut _236: lending_market::config_items::ConfigItemUpdater<'_, std::cell::RefMut<'_, state::lending_market::LendingMarket>, (), (), (), (), ()>;
    let mut _237: &mut std::cell::RefMut<'_, state::lending_market::LendingMarket>;
    let mut _238: {closure@programs\klend\src\handlers\handler_update_lending_market.rs:79:21: 79:36};
    let mut _239: {closure@programs\klend\src\handlers\handler_update_lending_market.rs:80:21: 80:36};
    let mut _240: &[u8];
    let mut _241: &[u8; 72];
    let _242: &[u8; 72];
    let mut _243: isize;
    let mut _245: !;
    let mut _246: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _248: ();
    let mut _249: bool;
    let mut _250: u16;
    let mut _251: &state::lending_market::LendingMarket;
    let mut _252: &std::cell::RefMut<'_, state::lending_market::LendingMarket>;
    let _253: ();
    let mut _254: &str;
    let _255: &str;
    let _256: ();
    let mut _257: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _258: std::result::Result<(), anchor_lang::error::Error>;
    let mut _259: lending_market::config_items::ConfigItemUpdater<'_, u16, u16, for<'a> fn(&'a mut u16, u16) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u16>}, for<'t, 'a> fn(&'t u16, &'a u16) -> std::result::Result<std::option::Option<&'t u16>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u16>}, for<'a> fn(&'a u16) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::validations::check_valid_bps::<u16>}, for<'a, 'b, 'c> fn(&'a u16, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u16>}>;
    let mut _260: lending_market::config_items::ConfigItemUpdater<'_, u16, u16, for<'a> fn(&'a mut u16, u16) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u16>}, for<'t, 'a> fn(&'t u16, &'a u16) -> std::result::Result<std::option::Option<&'t u16>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u16>}, for<'a> fn(&'a u16) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<u16>}, for<'a, 'b, 'c> fn(&'a u16, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u16>}>;
    let mut _261: lending_market::config_items::ConfigItemUpdater<'_, u16, u16, for<'a> fn(&'a mut u16, u16) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u16>}, for<'t, 'a> fn(&'t u16, &'a u16) -> std::result::Result<std::option::Option<&'t u16>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u16>}, for<'a> fn(&'a u16) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<u16>}, for<'a, 'b, 'c> fn(&'a u16, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u16>}>;
    let mut _262: &mut u16;
    let mut _263: &mut u16;
    let mut _264: &mut state::lending_market::LendingMarket;
    let mut _265: &mut std::cell::RefMut<'_, state::lending_market::LendingMarket>;
    let mut _266: &[u8];
    let mut _267: &[u8; 72];
    let _268: &[u8; 72];
    let mut _269: isize;
    let mut _271: !;
    let mut _272: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _274: ();
    let mut _275: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _276: std::result::Result<(), anchor_lang::error::Error>;
    let mut _277: lending_market::config_items::ConfigItemUpdater<'_, u8, u8, for<'a> fn(&'a mut u8, u8) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u8>}, for<'t, 'a> fn(&'t u8, &'a u8) -> std::result::Result<std::option::Option<&'t u8>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u8>}, for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::validations::check_valid_pct::<u8>}, for<'a, 'b, 'c> fn(&'a u8, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u8>}>;
    let mut _278: lending_market::config_items::ConfigItemUpdater<'_, u8, u8, for<'a> fn(&'a mut u8, u8) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u8>}, for<'t, 'a> fn(&'t u8, &'a u8) -> std::result::Result<std::option::Option<&'t u8>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u8>}, for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<u8>}, for<'a, 'b, 'c> fn(&'a u8, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u8>}>;
    let mut _279: lending_market::config_items::ConfigItemUpdater<'_, u8, u8, for<'a> fn(&'a mut u8, u8) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u8>}, for<'t, 'a> fn(&'t u8, &'a u8) -> std::result::Result<std::option::Option<&'t u8>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u8>}, for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<u8>}, for<'a, 'b, 'c> fn(&'a u8, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u8>}>;
    let mut _280: &mut u8;
    let mut _281: &mut u8;
    let mut _282: &mut state::lending_market::LendingMarket;
    let mut _283: &mut std::cell::RefMut<'_, state::lending_market::LendingMarket>;
    let mut _284: &[u8];
    let mut _285: &[u8; 72];
    let _286: &[u8; 72];
    let mut _287: isize;
    let mut _289: !;
    let mut _290: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _292: ();
    let mut _293: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _294: std::result::Result<(), anchor_lang::error::Error>;
    let mut _295: lending_market::config_items::ConfigItemUpdater<'_, u8, u8, for<'a> fn(&'a mut u8, u8) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u8>}, for<'t, 'a> fn(&'t u8, &'a u8) -> std::result::Result<std::option::Option<&'t u8>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u8>}, for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::validations::check_bool::<u8>}, for<'a, 'b, 'c> fn(&'a u8, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u8>}>;
    let mut _296: lending_market::config_items::ConfigItemUpdater<'_, u8, u8, for<'a> fn(&'a mut u8, u8) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u8>}, for<'t, 'a> fn(&'t u8, &'a u8) -> std::result::Result<std::option::Option<&'t u8>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u8>}, for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<u8>}, for<'a, 'b, 'c> fn(&'a u8, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u8>}>;
    let mut _297: lending_market::config_items::ConfigItemUpdater<'_, u8, u8, for<'a> fn(&'a mut u8, u8) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u8>}, for<'t, 'a> fn(&'t u8, &'a u8) -> std::result::Result<std::option::Option<&'t u8>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u8>}, for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<u8>}, for<'a, 'b, 'c> fn(&'a u8, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u8>}>;
    let mut _298: &mut u8;
    let mut _299: &mut u8;
    let mut _300: &mut state::lending_market::LendingMarket;
    let mut _301: &mut std::cell::RefMut<'_, state::lending_market::LendingMarket>;
    let mut _302: &[u8];
    let mut _303: &[u8; 72];
    let _304: &[u8; 72];
    let mut _305: isize;
    let mut _307: !;
    let mut _308: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _310: ();
    let mut _311: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _312: std::result::Result<(), anchor_lang::error::Error>;
    let mut _313: lending_market::config_items::ConfigItemUpdater<'_, u8, u8, for<'a> fn(&'a mut u8, u8) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u8>}, for<'t, 'a> fn(&'t u8, &'a u8) -> std::result::Result<std::option::Option<&'t u8>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u8>}, for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::validations::check_bool::<u8>}, for<'a, 'b, 'c> fn(&'a u8, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u8>}>;
    let mut _314: lending_market::config_items::ConfigItemUpdater<'_, u8, u8, for<'a> fn(&'a mut u8, u8) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u8>}, for<'t, 'a> fn(&'t u8, &'a u8) -> std::result::Result<std::option::Option<&'t u8>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u8>}, for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<u8>}, for<'a, 'b, 'c> fn(&'a u8, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u8>}>;
    let mut _315: lending_market::config_items::ConfigItemUpdater<'_, u8, u8, for<'a> fn(&'a mut u8, u8) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u8>}, for<'t, 'a> fn(&'t u8, &'a u8) -> std::result::Result<std::option::Option<&'t u8>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u8>}, for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<u8>}, for<'a, 'b, 'c> fn(&'a u8, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u8>}>;
    let mut _316: &mut u8;
    let mut _317: &mut u8;
    let mut _318: &mut state::lending_market::LendingMarket;
    let mut _319: &mut std::cell::RefMut<'_, state::lending_market::LendingMarket>;
    let mut _320: &[u8];
    let mut _321: &[u8; 72];
    let _322: &[u8; 72];
    let mut _323: isize;
    let mut _325: !;
    let mut _326: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _328: ();
    let mut _329: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _330: std::result::Result<(), anchor_lang::error::Error>;
    let mut _331: lending_market::config_items::ConfigItemUpdater<'_, u128, u128, for<'a> fn(&'a mut u128, u128) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u128>}, for<'t, 'a> fn(&'t u128, &'a u128) -> std::result::Result<std::option::Option<&'t u128>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u128>}, for<'a> fn(&'a u128) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<u128>}, for<'a, 'b, 'c> fn(&'a u128, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::renderings::as_fraction::<u128>}>;
    let mut _332: lending_market::config_items::ConfigItemUpdater<'_, u128, u128, for<'a> fn(&'a mut u128, u128) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u128>}, for<'t, 'a> fn(&'t u128, &'a u128) -> std::result::Result<std::option::Option<&'t u128>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u128>}, for<'a> fn(&'a u128) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<u128>}, for<'a, 'b, 'c> fn(&'a u128, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u128>}>;
    let mut _333: lending_market::config_items::ConfigItemUpdater<'_, u128, u128, for<'a> fn(&'a mut u128, u128) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u128>}, for<'t, 'a> fn(&'t u128, &'a u128) -> std::result::Result<std::option::Option<&'t u128>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u128>}, for<'a> fn(&'a u128) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<u128>}, for<'a, 'b, 'c> fn(&'a u128, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u128>}>;
    let mut _334: &mut u128;
    let mut _335: &mut u128;
    let mut _336: &mut state::lending_market::LendingMarket;
    let mut _337: &mut std::cell::RefMut<'_, state::lending_market::LendingMarket>;
    let mut _338: &[u8];
    let mut _339: &[u8; 72];
    let _340: &[u8; 72];
    let mut _341: isize;
    let mut _343: !;
    let mut _344: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _346: ();
    let mut _347: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _348: std::result::Result<(), anchor_lang::error::Error>;
    let mut _349: lending_market::config_items::ConfigItemUpdater<'_, u64, u64, for<'a> fn(&'a mut u64, u64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u64>}, for<'t, 'a> fn(&'t u64, &'a u64) -> std::result::Result<std::option::Option<&'t u64>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u64>}, for<'a> fn(&'a u64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<u64>}, for<'a, 'b, 'c> fn(&'a u64, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u64>}>;
    let mut _350: lending_market::config_items::ConfigItemUpdater<'_, u64, u64, for<'a> fn(&'a mut u64, u64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u64>}, for<'t, 'a> fn(&'t u64, &'a u64) -> std::result::Result<std::option::Option<&'t u64>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u64>}, for<'a> fn(&'a u64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<u64>}, for<'a, 'b, 'c> fn(&'a u64, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u64>}>;
    let mut _351: &mut u64;
    let mut _352: &mut u64;
    let mut _353: &mut state::lending_market::LendingMarket;
    let mut _354: &mut std::cell::RefMut<'_, state::lending_market::LendingMarket>;
    let mut _355: &[u8];
    let mut _356: &[u8; 72];
    let _357: &[u8; 72];
    let mut _358: isize;
    let mut _360: !;
    let mut _361: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _363: ();
    let mut _364: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _365: std::result::Result<(), anchor_lang::error::Error>;
    let mut _366: lending_market::config_items::ConfigItemUpdater<'_, u64, u64, for<'a> fn(&'a mut u64, u64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u64>}, for<'t, 'a> fn(&'t u64, &'a u64) -> std::result::Result<std::option::Option<&'t u64>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u64>}, for<'a> fn(&'a u64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<u64>}, for<'a, 'b, 'c> fn(&'a u64, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u64>}>;
    let mut _367: lending_market::config_items::ConfigItemUpdater<'_, u64, u64, for<'a> fn(&'a mut u64, u64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u64>}, for<'t, 'a> fn(&'t u64, &'a u64) -> std::result::Result<std::option::Option<&'t u64>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u64>}, for<'a> fn(&'a u64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<u64>}, for<'a, 'b, 'c> fn(&'a u64, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u64>}>;
    let mut _368: &mut u64;
    let mut _369: &mut u64;
    let mut _370: &mut state::lending_market::LendingMarket;
    let mut _371: &mut std::cell::RefMut<'_, state::lending_market::LendingMarket>;
    let mut _372: &[u8];
    let mut _373: &[u8; 72];
    let _374: &[u8; 72];
    let mut _375: isize;
    let mut _377: !;
    let mut _378: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _380: ();
    let mut _381: &str;
    let _382: &str;
    let mut _383: &std::string::String;
    let _384: &std::string::String;
    let _385: std::string::String;
    let mut _387: std::fmt::Arguments<'_>;
    let mut _388: &[&str];
    let mut _389: &[&str; 1];
    let _390: &[&str; 1];
    let _391: [&str; 1];
    let mut _392: &[core::fmt::rt::Argument<'_>];
    let mut _393: &[core::fmt::rt::Argument<'_>; 1];
    let _394: &[core::fmt::rt::Argument<'_>; 1];
    let _395: [core::fmt::rt::Argument<'_>; 1];
    let mut _396: core::fmt::rt::Argument<'_>;
    let mut _397: &[u8; 8];
    let _398: &[u8; 8];
    let _399: &state::lending_market::LendingMarket;
    let mut _400: &std::cell::RefMut<'_, state::lending_market::LendingMarket>;
    let _401: ();
    let mut _402: &str;
    let _403: &str;
    let mut _404: &std::string::String;
    let _405: &std::string::String;
    let _406: std::string::String;
    let mut _408: std::fmt::Arguments<'_>;
    let mut _409: &[&str];
    let mut _410: &[&str; 1];
    let _411: &[&str; 1];
    let _412: [&str; 1];
    let mut _413: &[core::fmt::rt::Argument<'_>];
    let mut _414: &[core::fmt::rt::Argument<'_>; 1];
    let _415: &[core::fmt::rt::Argument<'_>; 1];
    let _416: [core::fmt::rt::Argument<'_>; 1];
    let mut _417: core::fmt::rt::Argument<'_>;
    let mut _418: &[u8; 8];
    let _419: &[u8; 8];
    let _420: &state::lending_market::LendingMarket;
    let mut _421: &std::cell::RefMut<'_, state::lending_market::LendingMarket>;
    let mut _422: &mut state::lending_market::LendingMarket;
    let mut _423: &mut std::cell::RefMut<'_, state::lending_market::LendingMarket>;
    let mut _424: &mut state::lending_market::LendingMarket;
    let mut _425: &mut std::cell::RefMut<'_, state::lending_market::LendingMarket>;
    let _426: ();
    let mut _427: &str;
    let _428: &str;
    let mut _429: &std::string::String;
    let _430: &std::string::String;
    let _431: std::string::String;
    let mut _433: std::fmt::Arguments<'_>;
    let mut _434: &[&str];
    let mut _435: &[&str; 1];
    let _436: &[&str; 1];
    let _437: [&str; 1];
    let mut _438: &[core::fmt::rt::Argument<'_>];
    let mut _439: &[core::fmt::rt::Argument<'_>; 1];
    let _440: &[core::fmt::rt::Argument<'_>; 1];
    let _441: [core::fmt::rt::Argument<'_>; 1];
    let mut _442: core::fmt::rt::Argument<'_>;
    let mut _443: &[u8; 8];
    let _444: &[u8; 8];
    let _445: &state::lending_market::LendingMarket;
    let mut _446: &std::cell::RefMut<'_, state::lending_market::LendingMarket>;
    let _447: ();
    let mut _448: &str;
    let _449: &str;
    let mut _450: &std::string::String;
    let _451: &std::string::String;
    let _452: std::string::String;
    let mut _454: std::fmt::Arguments<'_>;
    let mut _455: &[&str];
    let mut _456: &[&str; 1];
    let _457: &[&str; 1];
    let _458: [&str; 1];
    let mut _459: &[core::fmt::rt::Argument<'_>];
    let mut _460: &[core::fmt::rt::Argument<'_>; 1];
    let _461: &[core::fmt::rt::Argument<'_>; 1];
    let _462: [core::fmt::rt::Argument<'_>; 1];
    let mut _463: core::fmt::rt::Argument<'_>;
    let mut _464: &[u8; 8];
    let _465: &[u8; 8];
    let _466: &state::lending_market::LendingMarket;
    let mut _467: &std::cell::RefMut<'_, state::lending_market::LendingMarket>;
    let mut _468: !;
    let _469: !;
    let mut _470: std::fmt::Arguments<'_>;
    let mut _471: &[&str];
    let mut _472: &[&str; 1];
    let _473: &[&str; 1];
    let _474: [&str; 1];
    let _475: ();
    let mut _476: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _477: std::result::Result<(), anchor_lang::error::Error>;
    let mut _478: lending_market::config_items::ConfigItemUpdater<'_, [u8; 32], [u8; 32], for<'a> fn(&'a mut [u8; 32], [u8; 32]) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<[u8; 32]>}, for<'t, 'a> fn(&'t [u8; 32], &'a [u8; 32]) -> std::result::Result<std::option::Option<&'t [u8; 32]>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<[u8; 32]>}, for<'a> fn(&'a [u8; 32]) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<[u8; 32]>}, for<'a, 'b, 'c> fn(&'a [u8; 32], &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::renderings::as_utf8_null_padded_string::<32>}>;
    let mut _479: lending_market::config_items::ConfigItemUpdater<'_, [u8; 32], [u8; 32], for<'a> fn(&'a mut [u8; 32], [u8; 32]) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<[u8; 32]>}, for<'t, 'a> fn(&'t [u8; 32], &'a [u8; 32]) -> std::result::Result<std::option::Option<&'t [u8; 32]>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<[u8; 32]>}, for<'a> fn(&'a [u8; 32]) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<[u8; 32]>}, for<'a, 'b, 'c> fn(&'a [u8; 32], &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<[u8; 32]>}>;
    let mut _480: lending_market::config_items::ConfigItemUpdater<'_, [u8; 32], [u8; 32], for<'a> fn(&'a mut [u8; 32], [u8; 32]) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<[u8; 32]>}, for<'t, 'a> fn(&'t [u8; 32], &'a [u8; 32]) -> std::result::Result<std::option::Option<&'t [u8; 32]>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<[u8; 32]>}, for<'a> fn(&'a [u8; 32]) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<[u8; 32]>}, for<'a, 'b, 'c> fn(&'a [u8; 32], &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<[u8; 32]>}>;
    let mut _481: &mut [u8; 32];
    let mut _482: &mut [u8; 32];
    let mut _483: &mut state::lending_market::LendingMarket;
    let mut _484: &mut std::cell::RefMut<'_, state::lending_market::LendingMarket>;
    let mut _485: &[u8];
    let mut _486: &[u8; 72];
    let _487: &[u8; 72];
    let mut _488: isize;
    let mut _490: !;
    let mut _491: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _493: ();
    let mut _494: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _495: std::result::Result<(), anchor_lang::error::Error>;
    let mut _496: lending_market::config_items::ConfigItemUpdater<'_, u64, u64, for<'a> fn(&'a mut u64, u64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u64>}, for<'t, 'a> fn(&'t u64, &'a u64) -> std::result::Result<std::option::Option<&'t u64>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u64>}, for<'a> fn(&'a u64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::validations::check_not_zero::<u64>}, for<'a, 'b, 'c> fn(&'a u64, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u64>}>;
    let mut _497: lending_market::config_items::ConfigItemUpdater<'_, u64, u64, for<'a> fn(&'a mut u64, u64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u64>}, for<'t, 'a> fn(&'t u64, &'a u64) -> std::result::Result<std::option::Option<&'t u64>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u64>}, for<'a> fn(&'a u64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<u64>}, for<'a, 'b, 'c> fn(&'a u64, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u64>}>;
    let mut _498: lending_market::config_items::ConfigItemUpdater<'_, u64, u64, for<'a> fn(&'a mut u64, u64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u64>}, for<'t, 'a> fn(&'t u64, &'a u64) -> std::result::Result<std::option::Option<&'t u64>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u64>}, for<'a> fn(&'a u64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<u64>}, for<'a, 'b, 'c> fn(&'a u64, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u64>}>;
    let mut _499: &mut u64;
    let mut _500: &mut u64;
    let mut _501: &mut state::lending_market::LendingMarket;
    let mut _502: &mut std::cell::RefMut<'_, state::lending_market::LendingMarket>;
    let mut _503: &[u8];
    let mut _504: &[u8; 72];
    let _505: &[u8; 72];
    let mut _506: isize;
    let mut _508: !;
    let mut _509: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _511: ();
    let mut _512: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _513: std::result::Result<(), anchor_lang::error::Error>;
    let mut _514: lending_market::config_items::ConfigItemUpdater<'_, u64, u64, for<'a> fn(&'a mut u64, u64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u64>}, for<'t, 'a> fn(&'t u64, &'a u64) -> std::result::Result<std::option::Option<&'t u64>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u64>}, {closure@programs\klend\src\lending_market\config_items.rs:264:9: 264:21}, for<'a, 'b, 'c> fn(&'a u64, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u64>}>;
    let mut _515: lending_market::config_items::ConfigItemUpdater<'_, u64, u64, for<'a> fn(&'a mut u64, u64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u64>}, for<'t, 'a> fn(&'t u64, &'a u64) -> std::result::Result<std::option::Option<&'t u64>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u64>}, for<'a> fn(&'a u64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<u64>}, for<'a, 'b, 'c> fn(&'a u64, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u64>}>;
    let mut _516: lending_market::config_items::ConfigItemUpdater<'_, u64, u64, for<'a> fn(&'a mut u64, u64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u64>}, for<'t, 'a> fn(&'t u64, &'a u64) -> std::result::Result<std::option::Option<&'t u64>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u64>}, for<'a> fn(&'a u64) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<u64>}, for<'a, 'b, 'c> fn(&'a u64, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u64>}>;
    let mut _517: &mut u64;
    let mut _518: &mut u64;
    let mut _519: &mut state::lending_market::LendingMarket;
    let mut _520: &mut std::cell::RefMut<'_, state::lending_market::LendingMarket>;
    let mut _521: {closure@programs\klend\src\lending_market\config_items.rs:264:9: 264:21};
    let mut _522: &[u8];
    let mut _523: &[u8; 72];
    let _524: &[u8; 72];
    let mut _525: isize;
    let mut _527: !;
    let mut _528: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _530: ();
    let mut _531: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _532: std::result::Result<(), anchor_lang::error::Error>;
    let mut _533: lending_market::config_items::ConfigItemUpdater<'_, u8, u8, for<'a> fn(&'a mut u8, u8) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u8>}, for<'t, 'a> fn(&'t u8, &'a u8) -> std::result::Result<std::option::Option<&'t u8>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u8>}, for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::validations::check_bool::<u8>}, for<'a, 'b, 'c> fn(&'a u8, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u8>}>;
    let mut _534: lending_market::config_items::ConfigItemUpdater<'_, u8, u8, for<'a> fn(&'a mut u8, u8) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u8>}, for<'t, 'a> fn(&'t u8, &'a u8) -> std::result::Result<std::option::Option<&'t u8>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u8>}, for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<u8>}, for<'a, 'b, 'c> fn(&'a u8, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u8>}>;
    let mut _535: lending_market::config_items::ConfigItemUpdater<'_, u8, u8, for<'a> fn(&'a mut u8, u8) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u8>}, for<'t, 'a> fn(&'t u8, &'a u8) -> std::result::Result<std::option::Option<&'t u8>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u8>}, for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<u8>}, for<'a, 'b, 'c> fn(&'a u8, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u8>}>;
    let mut _536: &mut u8;
    let mut _537: &mut u8;
    let mut _538: &mut state::lending_market::LendingMarket;
    let mut _539: &mut std::cell::RefMut<'_, state::lending_market::LendingMarket>;
    let mut _540: &[u8];
    let mut _541: &[u8; 72];
    let _542: &[u8; 72];
    let mut _543: isize;
    let mut _545: !;
    let mut _546: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _548: ();
    let mut _549: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _550: std::result::Result<(), anchor_lang::error::Error>;
    let mut _551: lending_market::config_items::ConfigItemUpdater<'_, u8, u8, for<'a> fn(&'a mut u8, u8) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u8>}, for<'t, 'a> fn(&'t u8, &'a u8) -> std::result::Result<std::option::Option<&'t u8>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u8>}, for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::validations::check_bool::<u8>}, for<'a, 'b, 'c> fn(&'a u8, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u8>}>;
    let mut _552: lending_market::config_items::ConfigItemUpdater<'_, u8, u8, for<'a> fn(&'a mut u8, u8) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u8>}, for<'t, 'a> fn(&'t u8, &'a u8) -> std::result::Result<std::option::Option<&'t u8>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u8>}, for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<u8>}, for<'a, 'b, 'c> fn(&'a u8, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u8>}>;
    let mut _553: lending_market::config_items::ConfigItemUpdater<'_, u8, u8, for<'a> fn(&'a mut u8, u8) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u8>}, for<'t, 'a> fn(&'t u8, &'a u8) -> std::result::Result<std::option::Option<&'t u8>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u8>}, for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<u8>}, for<'a, 'b, 'c> fn(&'a u8, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u8>}>;
    let mut _554: &mut u8;
    let mut _555: &mut u8;
    let mut _556: &mut state::lending_market::LendingMarket;
    let mut _557: &mut std::cell::RefMut<'_, state::lending_market::LendingMarket>;
    let mut _558: &[u8];
    let mut _559: &[u8; 72];
    let _560: &[u8; 72];
    let mut _561: isize;
    let mut _563: !;
    let mut _564: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _566: ();
    let mut _567: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _568: std::result::Result<(), anchor_lang::error::Error>;
    let mut _569: lending_market::config_items::ConfigItemUpdater<'_, u8, u8, for<'a> fn(&'a mut u8, u8) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u8>}, for<'t, 'a> fn(&'t u8, &'a u8) -> std::result::Result<std::option::Option<&'t u8>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u8>}, for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::validations::check_bool::<u8>}, for<'a, 'b, 'c> fn(&'a u8, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u8>}>;
    let mut _570: lending_market::config_items::ConfigItemUpdater<'_, u8, u8, for<'a> fn(&'a mut u8, u8) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u8>}, for<'t, 'a> fn(&'t u8, &'a u8) -> std::result::Result<std::option::Option<&'t u8>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u8>}, for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<u8>}, for<'a, 'b, 'c> fn(&'a u8, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u8>}>;
    let mut _571: lending_market::config_items::ConfigItemUpdater<'_, u8, u8, for<'a> fn(&'a mut u8, u8) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::set_field_directly::<u8>}, for<'t, 'a> fn(&'t u8, &'a u8) -> std::result::Result<std::option::Option<&'t u8>, anchor_lang::error::Error> {lending_market::config_items::get_field_directly::<u8>}, for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<u8>}, for<'a, 'b, 'c> fn(&'a u8, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<u8>}>;
    let mut _572: &mut u8;
    let mut _573: &mut u8;
    let mut _574: &mut state::lending_market::LendingMarket;
    let mut _575: &mut std::cell::RefMut<'_, state::lending_market::LendingMarket>;
    let mut _576: &[u8];
    let mut _577: &[u8; 72];
    let _578: &[u8; 72];
    let mut _579: isize;
    let mut _581: !;
    let mut _582: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _584: ();
    let mut _594: &mut handlers::handler_update_lending_market::UpdateLendingMarket<'_>;
    let mut _595: &mut handlers::handler_update_lending_market::UpdateLendingMarket<'_>;
    let mut _596: bool;
    let mut _597: bool;
    let mut _598: bool;
    let mut _599: isize;
    let mut _600: isize;
    let mut _601: isize;
    let mut _602: isize;
    let mut _603: isize;
    let mut _604: isize;
    let mut _605: isize;
    let mut _606: isize;
    let mut _607: isize;
    let mut _608: isize;
    let mut _609: isize;
    let mut _610: isize;
    let mut _611: isize;
    let mut _612: isize;
    let mut _613: isize;
    let mut _614: isize;
    let mut _615: isize;
    let mut _616: isize;
    let mut _617: isize;
    let mut _618: isize;
    let mut _619: isize;
    let mut _620: isize;
    let mut _621: isize;
    let mut _622: isize;
    let mut _623: isize;
    let mut _624: isize;
    let mut _625: isize;
    let mut _626: isize;
    let mut _627: isize;
    let mut _628: isize;
    let mut _629: isize;
    let mut _630: isize;
    let mut _631: isize;
    let mut _632: isize;
    let mut _633: isize;
    let mut _634: isize;
    let mut _635: isize;
    let mut _636: isize;
    let mut _637: isize;
    let mut _638: isize;
    let mut _639: isize;
    let mut _640: isize;
    let mut _641: isize;
    let mut _642: isize;
    let mut _643: isize;
    let mut _644: isize;
    let mut _645: isize;
    let mut _646: isize;
    let mut _647: isize;
    let mut _648: isize;
    let mut _649: isize;
    let mut _650: isize;
    let mut _651: isize;
    let mut _652: isize;
    let mut _653: isize;
    let mut _654: isize;
    let mut _655: isize;
    let mut _656: isize;
    let mut _657: isize;
    let mut _658: isize;
    let mut _659: isize;
    let mut _660: isize;
    let mut _661: isize;
    let mut _662: isize;
    let mut _663: isize;
    let mut _664: isize;
    let mut _665: isize;
    let mut _666: isize;
    let mut _667: isize;
    let mut _668: isize;
    let mut _669: isize;
    let mut _670: isize;
    let mut _671: isize;
    let mut _672: isize;
    let mut _673: isize;
    let mut _674: isize;
    let mut _675: isize;
    let mut _676: isize;
    let mut _677: isize;
    let mut _678: isize;
    let mut _679: isize;
    let mut _680: isize;
    let mut _681: isize;
    let mut _682: isize;
    let mut _683: isize;
    let mut _684: isize;
    let mut _685: isize;
    let mut _686: isize;
    let mut _687: isize;
    let mut _688: isize;
    let mut _689: isize;
    let mut _690: isize;
    let mut _691: isize;
    let mut _692: isize;
    let mut _693: isize;
    let mut _694: isize;
    let mut _695: isize;
    let mut _696: isize;
    let mut _697: isize;
    let mut _698: isize;
    let mut _699: isize;
    let mut _700: isize;
    let mut _701: isize;
    let mut _702: isize;
    let mut _703: isize;
    let mut _704: isize;
    let mut _705: isize;
    let mut _706: isize;
    let mut _707: isize;
    let mut _708: isize;
    let mut _709: isize;
    let mut _710: isize;
    let mut _711: isize;
    let mut _712: isize;
    let mut _713: isize;
    let mut _714: isize;
    let mut _715: isize;
    let mut _716: isize;
    let mut _717: isize;
    let mut _718: isize;
    scope 1 {
        debug mode => _4;
        let _15: &mut std::cell::RefMut<'_, state::lending_market::LendingMarket>;
        let _21: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
        let _24: std::cell::RefMut<'_, state::lending_market::LendingMarket>;
        scope 6 {
            debug market => _15;
            let _31: std::string::String;
            let _91: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _94: ();
            let _109: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _112: ();
            let _129: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _132: ();
            let _147: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _150: ();
            let _164: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _167: ();
            let _189: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _192: ();
            let _206: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _209: ();
            let _226: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _229: ();
            let _244: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _247: ();
            let _270: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _273: ();
            let _288: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _291: ();
            let _306: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _309: ();
            let _324: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _327: ();
            let _342: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _345: ();
            let _359: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _362: ();
            let _376: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _379: ();
            let _386: std::string::String;
            let _407: std::string::String;
            let _432: std::string::String;
            let _453: std::string::String;
            let _489: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _492: ();
            let _507: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _510: ();
            let _526: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _529: ();
            let _544: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _547: ();
            let _562: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _565: ();
            let _580: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _583: ();
            let mut _585: &LendingError;
            let mut _586: &LendingError;
            let mut _587: &[&str; 1];
            let mut _588: &[&str; 1];
            let mut _589: &[&str; 1];
            let mut _590: &[&str; 1];
            let mut _591: &[&str; 1];
            let mut _592: &[&str; 1];
            let mut _593: &[&str; 3];
            scope 11 {
                debug res => _31;
            }
            scope 12 {
                debug residual => _91;
                scope 13 {
                }
            }
            scope 14 {
                debug val => _94;
                scope 15 {
                }
            }
            scope 16 {
                debug residual => _109;
                scope 17 {
                }
            }
            scope 18 {
                debug val => _112;
                scope 19 {
                }
            }
            scope 20 {
                debug residual => _129;
                scope 21 {
                }
            }
            scope 22 {
                debug val => _132;
                scope 23 {
                }
            }
            scope 24 {
                debug residual => _147;
                scope 25 {
                }
            }
            scope 26 {
                debug val => _150;
                scope 27 {
                }
            }
            scope 28 {
                debug residual => _164;
                scope 29 {
                }
            }
            scope 30 {
                debug val => _167;
                scope 31 {
                }
            }
            scope 32 {
                debug residual => _189;
                scope 33 {
                }
            }
            scope 34 {
                debug val => _192;
                scope 35 {
                }
            }
            scope 36 {
                debug residual => _206;
                scope 37 {
                }
            }
            scope 38 {
                debug val => _209;
                scope 39 {
                }
            }
            scope 40 {
                debug residual => _226;
                scope 41 {
                }
            }
            scope 42 {
                debug val => _229;
                scope 43 {
                }
            }
            scope 44 {
                debug residual => _244;
                scope 45 {
                }
            }
            scope 46 {
                debug val => _247;
                scope 47 {
                }
            }
            scope 48 {
                debug residual => _270;
                scope 49 {
                }
            }
            scope 50 {
                debug val => _273;
                scope 51 {
                }
            }
            scope 52 {
                debug residual => _288;
                scope 53 {
                }
            }
            scope 54 {
                debug val => _291;
                scope 55 {
                }
            }
            scope 56 {
                debug residual => _306;
                scope 57 {
                }
            }
            scope 58 {
                debug val => _309;
                scope 59 {
                }
            }
            scope 60 {
                debug residual => _324;
                scope 61 {
                }
            }
            scope 62 {
                debug val => _327;
                scope 63 {
                }
            }
            scope 64 {
                debug residual => _342;
                scope 65 {
                }
            }
            scope 66 {
                debug val => _345;
                scope 67 {
                }
            }
            scope 68 {
                debug residual => _359;
                scope 69 {
                }
            }
            scope 70 {
                debug val => _362;
                scope 71 {
                }
            }
            scope 72 {
                debug residual => _376;
                scope 73 {
                }
            }
            scope 74 {
                debug val => _379;
                scope 75 {
                }
            }
            scope 76 {
                debug res => _386;
            }
            scope 77 {
                debug res => _407;
            }
            scope 78 {
                debug res => _432;
            }
            scope 79 {
                debug res => _453;
            }
            scope 80 {
                debug residual => _489;
                scope 81 {
                }
            }
            scope 82 {
                debug val => _492;
                scope 83 {
                }
            }
            scope 84 {
                debug residual => _507;
                scope 85 {
                }
            }
            scope 86 {
                debug val => _510;
                scope 87 {
                }
            }
            scope 88 {
                debug residual => _526;
                scope 89 {
                }
            }
            scope 90 {
                debug val => _529;
                scope 91 {
                }
            }
            scope 92 {
                debug residual => _544;
                scope 93 {
                }
            }
            scope 94 {
                debug val => _547;
                scope 95 {
                }
            }
            scope 96 {
                debug residual => _562;
                scope 97 {
                }
            }
            scope 98 {
                debug val => _565;
                scope 99 {
                }
            }
            scope 100 {
                debug residual => _580;
                scope 101 {
                }
            }
            scope 102 {
                debug val => _583;
                scope 103 {
                }
            }
        }
        scope 7 {
            debug residual => _21;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _24;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _11;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _14;
        scope 5 {
        }
    }

    bb0: {
        _598 = const false;
        _597 = const false;
        _596 = const false;
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = _2;
        _7 = <state::UpdateLendingMarketMode as TryFrom<u64>>::try_from(move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_8);
        StorageLive(_9);
        _9 = {closure@programs\klend\src\handlers\handler_update_lending_market.rs:22:18: 22:21};
        _6 = std::result::Result::<state::UpdateLendingMarketMode, TryFromPrimitiveError<state::UpdateLendingMarketMode>>::map_err::<anchor_lang::prelude::ProgramError, {closure@programs\klend\src\handlers\handler_update_lending_market.rs:22:18: 22:21}>(move _7, move _9) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_9);
        StorageDead(_7);
        _5 = <std::result::Result<state::UpdateLendingMarketMode, anchor_lang::prelude::ProgramError> as Try>::branch(move _6) -> [return: bb3, unwind: bb305];
    }

    bb3: {
        StorageDead(_6);
        _10 = discriminant(_5);
        switchInt(move _10) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_14);
        _14 = ((_5 as Continue).0: state::UpdateLendingMarketMode);
        _4 = _14;
        StorageDead(_14);
        _599 = discriminant(_5);
        StorageDead(_5);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _594 = deref_copy (_1.1: &mut handlers::handler_update_lending_market::UpdateLendingMarket<'_>);
        _19 = &((*_594).1: anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>);
        _18 = anchor_lang::prelude::AccountLoader::<'_, state::lending_market::LendingMarket>::load_mut(move _19) -> [return: bb8, unwind continue];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_11);
        _11 = move ((_5 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_13);
        _13 = move _11;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _13) -> [return: bb7, unwind: bb335];
    }

    bb7: {
        StorageDead(_13);
        StorageDead(_11);
        _693 = discriminant(_5);
        StorageDead(_5);
        goto -> bb296;
    }

    bb8: {
        StorageDead(_19);
        _17 = <std::result::Result<RefMut<'_, state::lending_market::LendingMarket>, anchor_lang::error::Error> as Try>::branch(move _18) -> [return: bb9, unwind: bb305];
    }

    bb9: {
        StorageDead(_18);
        _20 = discriminant(_17);
        switchInt(move _20) -> [0: bb10, 1: bb11, otherwise: bb5];
    }

    bb10: {
        StorageLive(_24);
        _24 = move ((_17 as Continue).0: std::cell::RefMut<'_, state::lending_market::LendingMarket>);
        _16 = move _24;
        StorageDead(_24);
        _15 = &mut _16;
        _601 = discriminant(_17);
        StorageDead(_17);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        _593 = const _;
        _35 = &(*_593);
        _34 = &(*_35);
        _33 = move _34 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_34);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        _595 = deref_copy (_1.1: &mut handlers::handler_update_lending_market::UpdateLendingMarket<'_>);
        _45 = &((*_595).1: anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket>);
        _44 = <anchor_lang::prelude::AccountLoader<'_, state::lending_market::LendingMarket> as anchor_lang::Key>::key(move _45) -> [return: bb13, unwind: bb304];
    }

    bb11: {
        StorageLive(_21);
        _21 = move ((_17 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_23);
        _23 = move _21;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _23) -> [return: bb12, unwind: bb334];
    }

    bb12: {
        StorageDead(_23);
        StorageDead(_21);
        _691 = discriminant(_17);
        StorageDead(_17);
        goto -> bb295;
    }

    bb13: {
        StorageDead(_45);
        _43 = &_44;
        _42 = &(*_43);
        _41 = core::fmt::rt::Argument::<'_>::new_debug::<anchor_lang::prelude::Pubkey>(move _42) -> [return: bb14, unwind: bb304];
    }

    bb14: {
        StorageDead(_42);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        _48 = &_4;
        _47 = &(*_48);
        _46 = core::fmt::rt::Argument::<'_>::new_debug::<state::UpdateLendingMarketMode>(move _47) -> [return: bb15, unwind: bb304];
    }

    bb15: {
        StorageDead(_47);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        _54 = &_3;
        StorageLive(_55);
        _55 = std::ops::Range::<usize> { start: const 0_usize, end: const 32_usize };
        _53 = <[u8; 72] as Index<std::ops::Range<usize>>>::index(move _54, move _55) -> [return: bb16, unwind: bb304];
    }

    bb16: {
        StorageDead(_55);
        StorageDead(_54);
        _52 = &(*_53);
        _51 = &_52;
        _50 = &(*_51);
        _49 = core::fmt::rt::Argument::<'_>::new_debug::<&[u8]>(move _50) -> [return: bb17, unwind: bb304];
    }

    bb17: {
        StorageDead(_50);
        _40 = [move _41, move _46, move _49];
        StorageDead(_49);
        StorageDead(_46);
        StorageDead(_41);
        _39 = &_40;
        _38 = &(*_39);
        _37 = move _38 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_38);
        _32 = Arguments::<'_>::new_v1(move _33, move _37) -> [return: bb18, unwind: bb304];
    }

    bb18: {
        StorageDead(_37);
        StorageDead(_33);
        _31 = format(move _32) -> [return: bb19, unwind: bb304];
    }

    bb19: {
        StorageDead(_32);
        StorageDead(_53);
        StorageDead(_52);
        StorageDead(_51);
        StorageDead(_48);
        StorageDead(_44);
        StorageDead(_43);
        StorageDead(_40);
        StorageDead(_39);
        StorageDead(_35);
        _30 = move _31;
        StorageDead(_31);
        _29 = &_30;
        _28 = &(*_29);
        _27 = <std::string::String as Deref>::deref(move _28) -> [return: bb20, unwind: bb303];
    }

    bb20: {
        _26 = &(*_27);
        StorageDead(_28);
        _25 = solana_program::log::sol_log(move _26) -> [return: bb21, unwind: bb303];
    }

    bb21: {
        StorageDead(_26);
        drop(_30) -> [return: bb22, unwind: bb304];
    }

    bb22: {
        StorageDead(_30);
        StorageDead(_29);
        StorageDead(_27);
        StorageDead(_25);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        _60 = &(*_15);
        _59 = <RefMut<'_, state::lending_market::LendingMarket> as Deref>::deref(move _60) -> [return: bb23, unwind: bb304];
    }

    bb23: {
        _58 = &(*_59);
        StorageDead(_60);
        _57 = state::lending_market::LendingMarket::is_immutable(move _58) -> [return: bb24, unwind: bb304];
    }

    bb24: {
        switchInt(move _57) -> [0: bb26, otherwise: bb25];
    }

    bb25: {
        StorageDead(_58);
        StorageDead(_59);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        _586 = const _;
        _65 = &(*_586);
        _64 = LendingError::name(move _65) -> [return: bb27, unwind: bb304];
    }

    bb26: {
        StorageDead(_58);
        StorageDead(_59);
        _56 = const ();
        StorageDead(_57);
        StorageDead(_56);
        StorageLive(_76);
        _77 = discriminant(_4);
        switchInt(move _77) -> [0: bb32, 1: bb41, 2: bb51, 3: bb63, 4: bb82, 5: bb73, 6: bb94, 7: bb84, 8: bb103, 9: bb115, 10: bb125, 11: bb229, 12: bb140, 13: bb150, 14: bb160, 15: bb170, 16: bb180, 17: bb189, 18: bb198, 19: bb231, 20: bb241, 21: bb251, 22: bb262, 23: bb272, 24: bb31, otherwise: bb5];
    }

    bb27: {
        StorageDead(_65);
        StorageLive(_67);
        StorageLive(_68);
        _68 = LendingError::OperationNotPermittedMarketImmutable;
        _67 = <LendingError as Into<u32>>::into(move _68) -> [return: bb28, unwind: bb302];
    }

    bb28: {
        StorageDead(_68);
        StorageLive(_69);
        StorageLive(_70);
        _585 = const _;
        _70 = &(*_585);
        _69 = <LendingError as ToString>::to_string(move _70) -> [return: bb29, unwind: bb302];
    }

    bb29: {
        StorageDead(_70);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        _74 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\handlers\\handler_update_lending_market.rs", line: const 33_u32 };
        _73 = anchor_lang::error::ErrorOrigin::Source(move _74);
        StorageDead(_74);
        _72 = std::option::Option::<ErrorOrigin>::Some(move _73);
        StorageDead(_73);
        StorageLive(_75);
        _75 = std::option::Option::<ComparedValues>::None;
        _63 = anchor_lang::error::AnchorError { error_name: move _64, error_code_number: move _67, error_msg: move _69, error_origin: move _72, compared_values: move _75 };
        StorageDead(_75);
        StorageDead(_72);
        StorageDead(_69);
        StorageDead(_67);
        StorageDead(_64);
        _62 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _63) -> [return: bb30, unwind: bb304];
    }

    bb30: {
        StorageDead(_63);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _62);
        StorageDead(_62);
        StorageDead(_57);
        StorageDead(_56);
        goto -> bb294;
    }

    bb31: {
        StorageLive(_566);
        StorageLive(_567);
        StorageLive(_568);
        StorageLive(_569);
        StorageLive(_570);
        StorageLive(_571);
        StorageLive(_572);
        StorageLive(_573);
        StorageLive(_574);
        StorageLive(_575);
        _575 = &mut (*_15);
        _574 = <RefMut<'_, state::lending_market::LendingMarket> as DerefMut>::deref_mut(move _575) -> [return: bb282, unwind: bb304];
    }

    bb32: {
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        _86 = &mut (*_15);
        _85 = <RefMut<'_, state::lending_market::LendingMarket> as DerefMut>::deref_mut(move _86) -> [return: bb33, unwind: bb304];
    }

    bb33: {
        StorageDead(_86);
        _84 = &mut ((*_85).3: anchor_lang::prelude::Pubkey);
        _83 = &mut (*_84);
        _82 = for_field::<anchor_lang::prelude::Pubkey>(move _83) -> [return: bb34, unwind: bb304];
    }

    bb34: {
        StorageDead(_83);
        _81 = ConfigItemUpdater::<'_, anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey, for<'a> fn(&'a mut anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<anchor_lang::prelude::Pubkey>}, for<'t, 'a> fn(&'t anchor_lang::prelude::Pubkey, &'a anchor_lang::prelude::Pubkey) -> std::result::Result<std::option::Option<&'t anchor_lang::prelude::Pubkey>, anchor_lang::error::Error> {get_field_directly::<anchor_lang::prelude::Pubkey>}, for<'a> fn(&'a anchor_lang::prelude::Pubkey) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<anchor_lang::prelude::Pubkey>}, for<'a, 'b, 'c> fn(&'a anchor_lang::prelude::Pubkey, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<anchor_lang::prelude::Pubkey>}>::named::<&str>(move _82, const "&mut market.lending_market_owner_cached") -> [return: bb35, unwind: bb304];
    }

    bb35: {
        StorageDead(_82);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        _89 = &_3;
        _88 = &(*_89);
        _87 = move _88 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_88);
        _80 = ConfigItemUpdater::<'_, anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey, for<'a> fn(&'a mut anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<anchor_lang::prelude::Pubkey>}, for<'t, 'a> fn(&'t anchor_lang::prelude::Pubkey, &'a anchor_lang::prelude::Pubkey) -> std::result::Result<std::option::Option<&'t anchor_lang::prelude::Pubkey>, anchor_lang::error::Error> {get_field_directly::<anchor_lang::prelude::Pubkey>}, for<'a> fn(&'a anchor_lang::prelude::Pubkey) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<anchor_lang::prelude::Pubkey>}, for<'a, 'b, 'c> fn(&'a anchor_lang::prelude::Pubkey, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<anchor_lang::prelude::Pubkey>}>::set(move _81, move _87) -> [return: bb36, unwind: bb304];
    }

    bb36: {
        StorageDead(_87);
        StorageDead(_81);
        _79 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _80) -> [return: bb37, unwind: bb304];
    }

    bb37: {
        StorageDead(_80);
        _90 = discriminant(_79);
        switchInt(move _90) -> [0: bb38, 1: bb39, otherwise: bb5];
    }

    bb38: {
        StorageLive(_94);
        _94 = ((_79 as Continue).0: ());
        _78 = _94;
        StorageDead(_94);
        _603 = discriminant(_79);
        StorageDead(_89);
        StorageDead(_85);
        StorageDead(_84);
        StorageDead(_79);
        StorageDead(_78);
        _76 = const ();
        goto -> bb291;
    }

    bb39: {
        StorageLive(_91);
        _91 = move ((_79 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_93);
        _93 = move _91;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _93) -> [return: bb40, unwind: bb333];
    }

    bb40: {
        StorageDead(_93);
        StorageDead(_91);
        _689 = discriminant(_79);
        StorageDead(_89);
        StorageDead(_85);
        StorageDead(_84);
        StorageDead(_79);
        StorageDead(_78);
        goto -> bb293;
    }

    bb41: {
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        _104 = &mut (*_15);
        _103 = <RefMut<'_, state::lending_market::LendingMarket> as DerefMut>::deref_mut(move _104) -> [return: bb42, unwind: bb304];
    }

    bb42: {
        StorageDead(_104);
        _102 = &mut ((*_103).6: u8);
        _101 = &mut (*_102);
        _100 = for_field::<u8>(move _101) -> [return: bb43, unwind: bb304];
    }

    bb43: {
        StorageDead(_101);
        _99 = ConfigItemUpdater::<'_, u8, u8, for<'a> fn(&'a mut u8, u8) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u8>}, for<'t, 'a> fn(&'t u8, &'a u8) -> std::result::Result<std::option::Option<&'t u8>, anchor_lang::error::Error> {get_field_directly::<u8>}, for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<u8>}, for<'a, 'b, 'c> fn(&'a u8, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u8>}>::named::<&str>(move _100, const "&mut market.emergency_mode") -> [return: bb44, unwind: bb304];
    }

    bb44: {
        StorageDead(_100);
        _98 = ConfigItemUpdater::<'_, u8, u8, for<'a> fn(&'a mut u8, u8) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u8>}, for<'t, 'a> fn(&'t u8, &'a u8) -> std::result::Result<std::option::Option<&'t u8>, anchor_lang::error::Error> {get_field_directly::<u8>}, for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<u8>}, for<'a, 'b, 'c> fn(&'a u8, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u8>}>::validating::<for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {check_bool::<u8>}>(move _99, check_bool::<u8>) -> [return: bb45, unwind: bb304];
    }

    bb45: {
        StorageDead(_99);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        _107 = &_3;
        _106 = &(*_107);
        _105 = move _106 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_106);
        _97 = ConfigItemUpdater::<'_, u8, u8, for<'a> fn(&'a mut u8, u8) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u8>}, for<'t, 'a> fn(&'t u8, &'a u8) -> std::result::Result<std::option::Option<&'t u8>, anchor_lang::error::Error> {get_field_directly::<u8>}, for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {check_bool::<u8>}, for<'a, 'b, 'c> fn(&'a u8, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u8>}>::set(move _98, move _105) -> [return: bb46, unwind: bb304];
    }

    bb46: {
        StorageDead(_105);
        StorageDead(_98);
        _96 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _97) -> [return: bb47, unwind: bb304];
    }

    bb47: {
        StorageDead(_97);
        _108 = discriminant(_96);
        switchInt(move _108) -> [0: bb48, 1: bb49, otherwise: bb5];
    }

    bb48: {
        StorageLive(_112);
        _112 = ((_96 as Continue).0: ());
        _95 = _112;
        StorageDead(_112);
        _605 = discriminant(_96);
        StorageDead(_107);
        StorageDead(_103);
        StorageDead(_102);
        StorageDead(_96);
        StorageDead(_95);
        _76 = const ();
        goto -> bb291;
    }

    bb49: {
        StorageLive(_109);
        _109 = move ((_96 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_111);
        _111 = move _109;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _111) -> [return: bb50, unwind: bb332];
    }

    bb50: {
        StorageDead(_111);
        StorageDead(_109);
        _687 = discriminant(_96);
        StorageDead(_107);
        StorageDead(_103);
        StorageDead(_102);
        StorageDead(_96);
        StorageDead(_95);
        goto -> bb293;
    }

    bb51: {
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        _122 = &mut (*_15);
        _121 = <RefMut<'_, state::lending_market::LendingMarket> as DerefMut>::deref_mut(move _122) -> [return: bb52, unwind: bb304];
    }

    bb52: {
        StorageDead(_122);
        _120 = &mut ((*_121).10: u8);
        _119 = &mut (*_120);
        _118 = for_field::<u8>(move _119) -> [return: bb53, unwind: bb304];
    }

    bb53: {
        StorageDead(_119);
        _117 = ConfigItemUpdater::<'_, u8, u8, for<'a> fn(&'a mut u8, u8) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u8>}, for<'t, 'a> fn(&'t u8, &'a u8) -> std::result::Result<std::option::Option<&'t u8>, anchor_lang::error::Error> {get_field_directly::<u8>}, for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<u8>}, for<'a, 'b, 'c> fn(&'a u8, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u8>}>::named::<&str>(move _118, const "&mut market.liquidation_max_debt_close_factor_pct") -> [return: bb54, unwind: bb304];
    }

    bb54: {
        _598 = const true;
        StorageDead(_118);
        StorageLive(_123);
        StorageLive(_124);
        _124 = RangeInclusive::<u128>::new(const 5_u128, const 100_u128) -> [return: bb55, unwind: bb331];
    }

    bb55: {
        _123 = check_in_range::<u8>(move _124) -> [return: bb56, unwind: bb331];
    }

    bb56: {
        StorageDead(_124);
        _598 = const false;
        _116 = ConfigItemUpdater::<'_, u8, u8, for<'a> fn(&'a mut u8, u8) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u8>}, for<'t, 'a> fn(&'t u8, &'a u8) -> std::result::Result<std::option::Option<&'t u8>, anchor_lang::error::Error> {get_field_directly::<u8>}, for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<u8>}, for<'a, 'b, 'c> fn(&'a u8, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u8>}>::validating::<{closure@programs\klend\src\lending_market\config_items.rs:243:9: 243:21}>(move _117, move _123) -> [return: bb57, unwind: bb331];
    }

    bb57: {
        StorageDead(_123);
        _598 = const false;
        StorageDead(_117);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        _127 = &_3;
        _126 = &(*_127);
        _125 = move _126 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_126);
        _115 = ConfigItemUpdater::<'_, u8, u8, for<'a> fn(&'a mut u8, u8) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u8>}, for<'t, 'a> fn(&'t u8, &'a u8) -> std::result::Result<std::option::Option<&'t u8>, anchor_lang::error::Error> {get_field_directly::<u8>}, {closure@programs\klend\src\lending_market\config_items.rs:243:9: 243:21}, for<'a, 'b, 'c> fn(&'a u8, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u8>}>::set(move _116, move _125) -> [return: bb58, unwind: bb304];
    }

    bb58: {
        StorageDead(_125);
        StorageDead(_116);
        _114 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _115) -> [return: bb59, unwind: bb304];
    }

    bb59: {
        StorageDead(_115);
        _128 = discriminant(_114);
        switchInt(move _128) -> [0: bb60, 1: bb61, otherwise: bb5];
    }

    bb60: {
        StorageLive(_132);
        _132 = ((_114 as Continue).0: ());
        _113 = _132;
        StorageDead(_132);
        _607 = discriminant(_114);
        StorageDead(_127);
        StorageDead(_121);
        StorageDead(_120);
        StorageDead(_114);
        StorageDead(_113);
        _76 = const ();
        goto -> bb291;
    }

    bb61: {
        StorageLive(_129);
        _129 = move ((_114 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_131);
        _131 = move _129;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _131) -> [return: bb62, unwind: bb329];
    }

    bb62: {
        StorageDead(_131);
        StorageDead(_129);
        _685 = discriminant(_114);
        StorageDead(_127);
        StorageDead(_121);
        StorageDead(_120);
        StorageDead(_114);
        StorageDead(_113);
        goto -> bb293;
    }

    bb63: {
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        StorageLive(_136);
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        _142 = &mut (*_15);
        _141 = <RefMut<'_, state::lending_market::LendingMarket> as DerefMut>::deref_mut(move _142) -> [return: bb64, unwind: bb304];
    }

    bb64: {
        StorageDead(_142);
        _140 = &mut ((*_141).13: u64);
        _139 = &mut (*_140);
        _138 = for_field::<u64>(move _139) -> [return: bb65, unwind: bb304];
    }

    bb65: {
        StorageDead(_139);
        _137 = ConfigItemUpdater::<'_, u64, u64, for<'a> fn(&'a mut u64, u64) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u64>}, for<'t, 'a> fn(&'t u64, &'a u64) -> std::result::Result<std::option::Option<&'t u64>, anchor_lang::error::Error> {get_field_directly::<u64>}, for<'a> fn(&'a u64) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<u64>}, for<'a, 'b, 'c> fn(&'a u64, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u64>}>::named::<&str>(move _138, const "&mut market.max_liquidatable_debt_market_value_at_once") -> [return: bb66, unwind: bb304];
    }

    bb66: {
        StorageDead(_138);
        _136 = ConfigItemUpdater::<'_, u64, u64, for<'a> fn(&'a mut u64, u64) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u64>}, for<'t, 'a> fn(&'t u64, &'a u64) -> std::result::Result<std::option::Option<&'t u64>, anchor_lang::error::Error> {get_field_directly::<u64>}, for<'a> fn(&'a u64) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<u64>}, for<'a, 'b, 'c> fn(&'a u64, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u64>}>::validating::<for<'a> fn(&'a u64) -> std::result::Result<(), anchor_lang::error::Error> {check_not_zero::<u64>}>(move _137, check_not_zero::<u64>) -> [return: bb67, unwind: bb304];
    }

    bb67: {
        StorageDead(_137);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        _145 = &_3;
        _144 = &(*_145);
        _143 = move _144 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_144);
        _135 = ConfigItemUpdater::<'_, u64, u64, for<'a> fn(&'a mut u64, u64) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u64>}, for<'t, 'a> fn(&'t u64, &'a u64) -> std::result::Result<std::option::Option<&'t u64>, anchor_lang::error::Error> {get_field_directly::<u64>}, for<'a> fn(&'a u64) -> std::result::Result<(), anchor_lang::error::Error> {check_not_zero::<u64>}, for<'a, 'b, 'c> fn(&'a u64, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u64>}>::set(move _136, move _143) -> [return: bb68, unwind: bb304];
    }

    bb68: {
        StorageDead(_143);
        StorageDead(_136);
        _134 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _135) -> [return: bb69, unwind: bb304];
    }

    bb69: {
        StorageDead(_135);
        _146 = discriminant(_134);
        switchInt(move _146) -> [0: bb70, 1: bb71, otherwise: bb5];
    }

    bb70: {
        StorageLive(_150);
        _150 = ((_134 as Continue).0: ());
        _133 = _150;
        StorageDead(_150);
        _609 = discriminant(_134);
        StorageDead(_145);
        StorageDead(_141);
        StorageDead(_140);
        StorageDead(_134);
        StorageDead(_133);
        _76 = const ();
        goto -> bb291;
    }

    bb71: {
        StorageLive(_147);
        _147 = move ((_134 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_149);
        _149 = move _147;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _149) -> [return: bb72, unwind: bb328];
    }

    bb72: {
        StorageDead(_149);
        StorageDead(_147);
        _683 = discriminant(_134);
        StorageDead(_145);
        StorageDead(_141);
        StorageDead(_140);
        StorageDead(_134);
        StorageDead(_133);
        goto -> bb293;
    }

    bb73: {
        StorageLive(_151);
        StorageLive(_152);
        StorageLive(_153);
        StorageLive(_154);
        StorageLive(_155);
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        StorageLive(_159);
        _159 = &mut (*_15);
        _158 = <RefMut<'_, state::lending_market::LendingMarket> as DerefMut>::deref_mut(move _159) -> [return: bb74, unwind: bb304];
    }

    bb74: {
        StorageDead(_159);
        _157 = &mut ((*_158).15: u64);
        _156 = &mut (*_157);
        _155 = for_field::<u64>(move _156) -> [return: bb75, unwind: bb304];
    }

    bb75: {
        StorageDead(_156);
        _154 = ConfigItemUpdater::<'_, u64, u64, for<'a> fn(&'a mut u64, u64) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u64>}, for<'t, 'a> fn(&'t u64, &'a u64) -> std::result::Result<std::option::Option<&'t u64>, anchor_lang::error::Error> {get_field_directly::<u64>}, for<'a> fn(&'a u64) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<u64>}, for<'a, 'b, 'c> fn(&'a u64, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u64>}>::named::<&str>(move _155, const "&mut market.global_allowed_borrow_value") -> [return: bb76, unwind: bb304];
    }

    bb76: {
        StorageDead(_155);
        StorageLive(_160);
        StorageLive(_161);
        StorageLive(_162);
        _162 = &_3;
        _161 = &(*_162);
        _160 = move _161 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_161);
        _153 = ConfigItemUpdater::<'_, u64, u64, for<'a> fn(&'a mut u64, u64) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u64>}, for<'t, 'a> fn(&'t u64, &'a u64) -> std::result::Result<std::option::Option<&'t u64>, anchor_lang::error::Error> {get_field_directly::<u64>}, for<'a> fn(&'a u64) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<u64>}, for<'a, 'b, 'c> fn(&'a u64, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u64>}>::set(move _154, move _160) -> [return: bb77, unwind: bb304];
    }

    bb77: {
        StorageDead(_160);
        StorageDead(_154);
        _152 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _153) -> [return: bb78, unwind: bb304];
    }

    bb78: {
        StorageDead(_153);
        _163 = discriminant(_152);
        switchInt(move _163) -> [0: bb79, 1: bb80, otherwise: bb5];
    }

    bb79: {
        StorageLive(_167);
        _167 = ((_152 as Continue).0: ());
        _151 = _167;
        StorageDead(_167);
        _611 = discriminant(_152);
        StorageDead(_162);
        StorageDead(_158);
        StorageDead(_157);
        StorageDead(_152);
        StorageDead(_151);
        _76 = const ();
        goto -> bb291;
    }

    bb80: {
        StorageLive(_164);
        _164 = move ((_152 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_166);
        _166 = move _164;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _166) -> [return: bb81, unwind: bb327];
    }

    bb81: {
        StorageDead(_166);
        StorageDead(_164);
        _681 = discriminant(_152);
        StorageDead(_162);
        StorageDead(_158);
        StorageDead(_157);
        StorageDead(_152);
        StorageDead(_151);
        goto -> bb293;
    }

    bb82: {
        StorageLive(_169);
        StorageLive(_170);
        StorageLive(_171);
        StorageLive(_172);
        StorageLive(_173);
        _592 = const _;
        _173 = &(*_592);
        _172 = &(*_173);
        _171 = move _172 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_172);
        _170 = Arguments::<'_>::new_const(move _171) -> [return: bb83, unwind: bb304];
    }

    bb83: {
        StorageDead(_171);
        _169 = panic_fmt(move _170) -> bb304;
    }

    bb84: {
        StorageLive(_175);
        StorageLive(_176);
        StorageLive(_177);
        StorageLive(_178);
        StorageLive(_179);
        StorageLive(_180);
        StorageLive(_181);
        StorageLive(_182);
        StorageLive(_183);
        StorageLive(_184);
        _184 = &mut (*_15);
        _183 = <RefMut<'_, state::lending_market::LendingMarket> as DerefMut>::deref_mut(move _184) -> [return: bb85, unwind: bb304];
    }

    bb85: {
        StorageDead(_184);
        _182 = &mut ((*_183).12: u64);
        _181 = &mut (*_182);
        _180 = for_field::<u64>(move _181) -> [return: bb86, unwind: bb304];
    }

    bb86: {
        StorageDead(_181);
        _179 = ConfigItemUpdater::<'_, u64, u64, for<'a> fn(&'a mut u64, u64) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u64>}, for<'t, 'a> fn(&'t u64, &'a u64) -> std::result::Result<std::option::Option<&'t u64>, anchor_lang::error::Error> {get_field_directly::<u64>}, for<'a> fn(&'a u64) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<u64>}, for<'a, 'b, 'c> fn(&'a u64, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u64>}>::named::<&str>(move _180, const "&mut market.min_full_liquidation_value_threshold") -> [return: bb87, unwind: bb304];
    }

    bb87: {
        StorageDead(_180);
        _178 = ConfigItemUpdater::<'_, u64, u64, for<'a> fn(&'a mut u64, u64) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u64>}, for<'t, 'a> fn(&'t u64, &'a u64) -> std::result::Result<std::option::Option<&'t u64>, anchor_lang::error::Error> {get_field_directly::<u64>}, for<'a> fn(&'a u64) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<u64>}, for<'a, 'b, 'c> fn(&'a u64, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u64>}>::validating::<for<'a> fn(&'a u64) -> std::result::Result<(), anchor_lang::error::Error> {check_not_zero::<u64>}>(move _179, check_not_zero::<u64>) -> [return: bb88, unwind: bb304];
    }

    bb88: {
        StorageDead(_179);
        StorageLive(_185);
        StorageLive(_186);
        StorageLive(_187);
        _187 = &_3;
        _186 = &(*_187);
        _185 = move _186 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_186);
        _177 = ConfigItemUpdater::<'_, u64, u64, for<'a> fn(&'a mut u64, u64) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u64>}, for<'t, 'a> fn(&'t u64, &'a u64) -> std::result::Result<std::option::Option<&'t u64>, anchor_lang::error::Error> {get_field_directly::<u64>}, for<'a> fn(&'a u64) -> std::result::Result<(), anchor_lang::error::Error> {check_not_zero::<u64>}, for<'a, 'b, 'c> fn(&'a u64, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u64>}>::set(move _178, move _185) -> [return: bb89, unwind: bb304];
    }

    bb89: {
        StorageDead(_185);
        StorageDead(_178);
        _176 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _177) -> [return: bb90, unwind: bb304];
    }

    bb90: {
        StorageDead(_177);
        _188 = discriminant(_176);
        switchInt(move _188) -> [0: bb91, 1: bb92, otherwise: bb5];
    }

    bb91: {
        StorageLive(_192);
        _192 = ((_176 as Continue).0: ());
        _175 = _192;
        StorageDead(_192);
        _613 = discriminant(_176);
        StorageDead(_187);
        StorageDead(_183);
        StorageDead(_182);
        StorageDead(_176);
        StorageDead(_175);
        _76 = const ();
        goto -> bb291;
    }

    bb92: {
        StorageLive(_189);
        _189 = move ((_176 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_191);
        _191 = move _189;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _191) -> [return: bb93, unwind: bb326];
    }

    bb93: {
        StorageDead(_191);
        StorageDead(_189);
        _679 = discriminant(_176);
        StorageDead(_187);
        StorageDead(_183);
        StorageDead(_182);
        StorageDead(_176);
        StorageDead(_175);
        goto -> bb293;
    }

    bb94: {
        StorageLive(_193);
        StorageLive(_194);
        StorageLive(_195);
        StorageLive(_196);
        StorageLive(_197);
        StorageLive(_198);
        StorageLive(_199);
        StorageLive(_200);
        StorageLive(_201);
        _201 = &mut (*_15);
        _200 = <RefMut<'_, state::lending_market::LendingMarket> as DerefMut>::deref_mut(move _201) -> [return: bb95, unwind: bb304];
    }

    bb95: {
        StorageDead(_201);
        _199 = &mut ((*_200).16: anchor_lang::prelude::Pubkey);
        _198 = &mut (*_199);
        _197 = for_field::<anchor_lang::prelude::Pubkey>(move _198) -> [return: bb96, unwind: bb304];
    }

    bb96: {
        StorageDead(_198);
        _196 = ConfigItemUpdater::<'_, anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey, for<'a> fn(&'a mut anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<anchor_lang::prelude::Pubkey>}, for<'t, 'a> fn(&'t anchor_lang::prelude::Pubkey, &'a anchor_lang::prelude::Pubkey) -> std::result::Result<std::option::Option<&'t anchor_lang::prelude::Pubkey>, anchor_lang::error::Error> {get_field_directly::<anchor_lang::prelude::Pubkey>}, for<'a> fn(&'a anchor_lang::prelude::Pubkey) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<anchor_lang::prelude::Pubkey>}, for<'a, 'b, 'c> fn(&'a anchor_lang::prelude::Pubkey, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<anchor_lang::prelude::Pubkey>}>::named::<&str>(move _197, const "&mut market.risk_council") -> [return: bb97, unwind: bb304];
    }

    bb97: {
        StorageDead(_197);
        StorageLive(_202);
        StorageLive(_203);
        StorageLive(_204);
        _204 = &_3;
        _203 = &(*_204);
        _202 = move _203 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_203);
        _195 = ConfigItemUpdater::<'_, anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey, for<'a> fn(&'a mut anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<anchor_lang::prelude::Pubkey>}, for<'t, 'a> fn(&'t anchor_lang::prelude::Pubkey, &'a anchor_lang::prelude::Pubkey) -> std::result::Result<std::option::Option<&'t anchor_lang::prelude::Pubkey>, anchor_lang::error::Error> {get_field_directly::<anchor_lang::prelude::Pubkey>}, for<'a> fn(&'a anchor_lang::prelude::Pubkey) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<anchor_lang::prelude::Pubkey>}, for<'a, 'b, 'c> fn(&'a anchor_lang::prelude::Pubkey, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<anchor_lang::prelude::Pubkey>}>::set(move _196, move _202) -> [return: bb98, unwind: bb304];
    }

    bb98: {
        StorageDead(_202);
        StorageDead(_196);
        _194 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _195) -> [return: bb99, unwind: bb304];
    }

    bb99: {
        StorageDead(_195);
        _205 = discriminant(_194);
        switchInt(move _205) -> [0: bb100, 1: bb101, otherwise: bb5];
    }

    bb100: {
        StorageLive(_209);
        _209 = ((_194 as Continue).0: ());
        _193 = _209;
        StorageDead(_209);
        _615 = discriminant(_194);
        StorageDead(_204);
        StorageDead(_200);
        StorageDead(_199);
        StorageDead(_194);
        StorageDead(_193);
        _76 = const ();
        goto -> bb291;
    }

    bb101: {
        StorageLive(_206);
        _206 = move ((_194 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_208);
        _208 = move _206;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _208) -> [return: bb102, unwind: bb325];
    }

    bb102: {
        StorageDead(_208);
        StorageDead(_206);
        _677 = discriminant(_194);
        StorageDead(_204);
        StorageDead(_200);
        StorageDead(_199);
        StorageDead(_194);
        StorageDead(_193);
        goto -> bb293;
    }

    bb103: {
        StorageLive(_210);
        StorageLive(_211);
        StorageLive(_212);
        StorageLive(_213);
        StorageLive(_214);
        StorageLive(_215);
        StorageLive(_216);
        StorageLive(_217);
        StorageLive(_218);
        StorageLive(_219);
        _219 = &mut (*_15);
        _218 = <RefMut<'_, state::lending_market::LendingMarket> as DerefMut>::deref_mut(move _219) -> [return: bb104, unwind: bb304];
    }

    bb104: {
        StorageDead(_219);
        _217 = &mut ((*_218).11: u8);
        _216 = &mut (*_217);
        _215 = for_field::<u8>(move _216) -> [return: bb105, unwind: bb304];
    }

    bb105: {
        StorageDead(_216);
        _214 = ConfigItemUpdater::<'_, u8, u8, for<'a> fn(&'a mut u8, u8) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u8>}, for<'t, 'a> fn(&'t u8, &'a u8) -> std::result::Result<std::option::Option<&'t u8>, anchor_lang::error::Error> {get_field_directly::<u8>}, for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<u8>}, for<'a, 'b, 'c> fn(&'a u8, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u8>}>::named::<&str>(move _215, const "&mut market.insolvency_risk_unhealthy_ltv_pct") -> [return: bb106, unwind: bb304];
    }

    bb106: {
        _597 = const true;
        StorageDead(_215);
        StorageLive(_220);
        StorageLive(_221);
        _221 = RangeInclusive::<u128>::new(const 5_u128, const 100_u128) -> [return: bb107, unwind: bb324];
    }

    bb107: {
        _220 = check_in_range::<u8>(move _221) -> [return: bb108, unwind: bb324];
    }

    bb108: {
        StorageDead(_221);
        _597 = const false;
        _213 = ConfigItemUpdater::<'_, u8, u8, for<'a> fn(&'a mut u8, u8) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u8>}, for<'t, 'a> fn(&'t u8, &'a u8) -> std::result::Result<std::option::Option<&'t u8>, anchor_lang::error::Error> {get_field_directly::<u8>}, for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<u8>}, for<'a, 'b, 'c> fn(&'a u8, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u8>}>::validating::<{closure@programs\klend\src\lending_market\config_items.rs:243:9: 243:21}>(move _214, move _220) -> [return: bb109, unwind: bb324];
    }

    bb109: {
        StorageDead(_220);
        _597 = const false;
        StorageDead(_214);
        StorageLive(_222);
        StorageLive(_223);
        StorageLive(_224);
        _224 = &_3;
        _223 = &(*_224);
        _222 = move _223 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_223);
        _212 = ConfigItemUpdater::<'_, u8, u8, for<'a> fn(&'a mut u8, u8) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u8>}, for<'t, 'a> fn(&'t u8, &'a u8) -> std::result::Result<std::option::Option<&'t u8>, anchor_lang::error::Error> {get_field_directly::<u8>}, {closure@programs\klend\src\lending_market\config_items.rs:243:9: 243:21}, for<'a, 'b, 'c> fn(&'a u8, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u8>}>::set(move _213, move _222) -> [return: bb110, unwind: bb304];
    }

    bb110: {
        StorageDead(_222);
        StorageDead(_213);
        _211 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _212) -> [return: bb111, unwind: bb304];
    }

    bb111: {
        StorageDead(_212);
        _225 = discriminant(_211);
        switchInt(move _225) -> [0: bb112, 1: bb113, otherwise: bb5];
    }

    bb112: {
        StorageLive(_229);
        _229 = ((_211 as Continue).0: ());
        _210 = _229;
        StorageDead(_229);
        _617 = discriminant(_211);
        StorageDead(_224);
        StorageDead(_218);
        StorageDead(_217);
        StorageDead(_211);
        StorageDead(_210);
        _76 = const ();
        goto -> bb291;
    }

    bb113: {
        StorageLive(_226);
        _226 = move ((_211 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_228);
        _228 = move _226;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _228) -> [return: bb114, unwind: bb322];
    }

    bb114: {
        StorageDead(_228);
        StorageDead(_226);
        _675 = discriminant(_211);
        StorageDead(_224);
        StorageDead(_218);
        StorageDead(_217);
        StorageDead(_211);
        StorageDead(_210);
        goto -> bb293;
    }

    bb115: {
        StorageLive(_230);
        StorageLive(_231);
        StorageLive(_232);
        StorageLive(_233);
        StorageLive(_234);
        StorageLive(_235);
        StorageLive(_236);
        StorageLive(_237);
        _237 = &mut (*_15);
        _236 = for_object::<RefMut<'_, state::lending_market::LendingMarket>>(move _237) -> [return: bb116, unwind: bb304];
    }

    bb116: {
        StorageDead(_237);
        StorageLive(_238);
        _238 = {closure@programs\klend\src\handlers\handler_update_lending_market.rs:79:21: 79:36};
        StorageLive(_239);
        _239 = {closure@programs\klend\src\handlers\handler_update_lending_market.rs:80:21: 80:36};
        _235 = ConfigItemUpdater::<'_, RefMut<'_, state::lending_market::LendingMarket>, (), (), (), (), ()>::using_setter_and_getter::<state::lending_market::ElevationGroup, {closure@programs\klend\src\handlers\handler_update_lending_market.rs:79:21: 79:36}, {closure@programs\klend\src\handlers\handler_update_lending_market.rs:80:21: 80:36}>(move _236, move _238, move _239) -> [return: bb117, unwind: bb304];
    }

    bb117: {
        StorageDead(_239);
        StorageDead(_238);
        StorageDead(_236);
        _234 = ConfigItemUpdater::<'_, RefMut<'_, state::lending_market::LendingMarket>, state::lending_market::ElevationGroup, {closure@programs\klend\src\handlers\handler_update_lending_market.rs:79:21: 79:36}, {closure@programs\klend\src\handlers\handler_update_lending_market.rs:80:21: 80:36}, for<'a> fn(&'a state::lending_market::ElevationGroup) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<state::lending_market::ElevationGroup>}, for<'a, 'b, 'c> fn(&'a state::lending_market::ElevationGroup, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<state::lending_market::ElevationGroup>}>::named::<&str>(move _235, const "elevation_group") -> [return: bb118, unwind: bb304];
    }

    bb118: {
        StorageDead(_235);
        _233 = ConfigItemUpdater::<'_, RefMut<'_, state::lending_market::LendingMarket>, state::lending_market::ElevationGroup, {closure@programs\klend\src\handlers\handler_update_lending_market.rs:79:21: 79:36}, {closure@programs\klend\src\handlers\handler_update_lending_market.rs:80:21: 80:36}, for<'a> fn(&'a state::lending_market::ElevationGroup) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<state::lending_market::ElevationGroup>}, for<'a, 'b, 'c> fn(&'a state::lending_market::ElevationGroup, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<state::lending_market::ElevationGroup>}>::validating::<for<'a> fn(&'a state::lending_market::ElevationGroup) -> std::result::Result<(), anchor_lang::error::Error> {validate_new_elevation_group}>(move _234, validate_new_elevation_group) -> [return: bb119, unwind: bb304];
    }

    bb119: {
        StorageDead(_234);
        StorageLive(_240);
        StorageLive(_241);
        StorageLive(_242);
        _242 = &_3;
        _241 = &(*_242);
        _240 = move _241 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_241);
        _232 = ConfigItemUpdater::<'_, RefMut<'_, state::lending_market::LendingMarket>, state::lending_market::ElevationGroup, {closure@programs\klend\src\handlers\handler_update_lending_market.rs:79:21: 79:36}, {closure@programs\klend\src\handlers\handler_update_lending_market.rs:80:21: 80:36}, for<'a> fn(&'a state::lending_market::ElevationGroup) -> std::result::Result<(), anchor_lang::error::Error> {validate_new_elevation_group}, for<'a, 'b, 'c> fn(&'a state::lending_market::ElevationGroup, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<state::lending_market::ElevationGroup>}>::set(move _233, move _240) -> [return: bb120, unwind: bb304];
    }

    bb120: {
        StorageDead(_240);
        StorageDead(_233);
        _231 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _232) -> [return: bb121, unwind: bb304];
    }

    bb121: {
        StorageDead(_232);
        _243 = discriminant(_231);
        switchInt(move _243) -> [0: bb122, 1: bb123, otherwise: bb5];
    }

    bb122: {
        StorageLive(_247);
        _247 = ((_231 as Continue).0: ());
        _230 = _247;
        StorageDead(_247);
        _619 = discriminant(_231);
        StorageDead(_242);
        StorageDead(_231);
        StorageDead(_230);
        _76 = const ();
        goto -> bb291;
    }

    bb123: {
        StorageLive(_244);
        _244 = move ((_231 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_246);
        _246 = move _244;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _246) -> [return: bb124, unwind: bb321];
    }

    bb124: {
        StorageDead(_246);
        StorageDead(_244);
        _673 = discriminant(_231);
        StorageDead(_242);
        StorageDead(_231);
        StorageDead(_230);
        goto -> bb293;
    }

    bb125: {
        StorageLive(_248);
        StorageLive(_249);
        StorageLive(_250);
        StorageLive(_251);
        StorageLive(_252);
        _252 = &(*_15);
        _251 = <RefMut<'_, state::lending_market::LendingMarket> as Deref>::deref(move _252) -> [return: bb126, unwind: bb304];
    }

    bb126: {
        StorageDead(_252);
        _250 = ((*_251).5: u16);
        _249 = Ne(move _250, const 0_u16);
        switchInt(move _249) -> [0: bb129, otherwise: bb127];
    }

    bb127: {
        StorageDead(_251);
        StorageDead(_250);
        StorageLive(_253);
        StorageLive(_254);
        StorageLive(_255);
        _255 = const "WARNING: Referral fee bps already set, unrefreshed obligations referral fees could be lost!";
        _254 = &(*_255);
        _253 = solana_program::log::sol_log(move _254) -> [return: bb128, unwind: bb304];
    }

    bb128: {
        StorageDead(_254);
        StorageDead(_255);
        StorageDead(_253);
        _248 = const ();
        goto -> bb130;
    }

    bb129: {
        StorageDead(_251);
        StorageDead(_250);
        _248 = const ();
        goto -> bb130;
    }

    bb130: {
        StorageDead(_249);
        StorageDead(_248);
        StorageLive(_256);
        StorageLive(_257);
        StorageLive(_258);
        StorageLive(_259);
        StorageLive(_260);
        StorageLive(_261);
        StorageLive(_262);
        StorageLive(_263);
        StorageLive(_264);
        StorageLive(_265);
        _265 = &mut (*_15);
        _264 = <RefMut<'_, state::lending_market::LendingMarket> as DerefMut>::deref_mut(move _265) -> [return: bb131, unwind: bb304];
    }

    bb131: {
        StorageDead(_265);
        _263 = &mut ((*_264).5: u16);
        _262 = &mut (*_263);
        _261 = for_field::<u16>(move _262) -> [return: bb132, unwind: bb304];
    }

    bb132: {
        StorageDead(_262);
        _260 = ConfigItemUpdater::<'_, u16, u16, for<'a> fn(&'a mut u16, u16) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u16>}, for<'t, 'a> fn(&'t u16, &'a u16) -> std::result::Result<std::option::Option<&'t u16>, anchor_lang::error::Error> {get_field_directly::<u16>}, for<'a> fn(&'a u16) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<u16>}, for<'a, 'b, 'c> fn(&'a u16, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u16>}>::named::<&str>(move _261, const "&mut market.referral_fee_bps") -> [return: bb133, unwind: bb304];
    }

    bb133: {
        StorageDead(_261);
        _259 = ConfigItemUpdater::<'_, u16, u16, for<'a> fn(&'a mut u16, u16) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u16>}, for<'t, 'a> fn(&'t u16, &'a u16) -> std::result::Result<std::option::Option<&'t u16>, anchor_lang::error::Error> {get_field_directly::<u16>}, for<'a> fn(&'a u16) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<u16>}, for<'a, 'b, 'c> fn(&'a u16, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u16>}>::validating::<for<'a> fn(&'a u16) -> std::result::Result<(), anchor_lang::error::Error> {check_valid_bps::<u16>}>(move _260, check_valid_bps::<u16>) -> [return: bb134, unwind: bb304];
    }

    bb134: {
        StorageDead(_260);
        StorageLive(_266);
        StorageLive(_267);
        StorageLive(_268);
        _268 = &_3;
        _267 = &(*_268);
        _266 = move _267 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_267);
        _258 = ConfigItemUpdater::<'_, u16, u16, for<'a> fn(&'a mut u16, u16) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u16>}, for<'t, 'a> fn(&'t u16, &'a u16) -> std::result::Result<std::option::Option<&'t u16>, anchor_lang::error::Error> {get_field_directly::<u16>}, for<'a> fn(&'a u16) -> std::result::Result<(), anchor_lang::error::Error> {check_valid_bps::<u16>}, for<'a, 'b, 'c> fn(&'a u16, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u16>}>::set(move _259, move _266) -> [return: bb135, unwind: bb304];
    }

    bb135: {
        StorageDead(_266);
        StorageDead(_259);
        _257 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _258) -> [return: bb136, unwind: bb304];
    }

    bb136: {
        StorageDead(_258);
        _269 = discriminant(_257);
        switchInt(move _269) -> [0: bb137, 1: bb138, otherwise: bb5];
    }

    bb137: {
        StorageLive(_273);
        _273 = ((_257 as Continue).0: ());
        _256 = _273;
        StorageDead(_273);
        _621 = discriminant(_257);
        StorageDead(_268);
        StorageDead(_264);
        StorageDead(_263);
        StorageDead(_257);
        StorageDead(_256);
        _76 = const ();
        goto -> bb291;
    }

    bb138: {
        StorageLive(_270);
        _270 = move ((_257 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_272);
        _272 = move _270;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _272) -> [return: bb139, unwind: bb320];
    }

    bb139: {
        StorageDead(_272);
        StorageDead(_270);
        _671 = discriminant(_257);
        StorageDead(_268);
        StorageDead(_264);
        StorageDead(_263);
        StorageDead(_257);
        StorageDead(_256);
        goto -> bb293;
    }

    bb140: {
        StorageLive(_274);
        StorageLive(_275);
        StorageLive(_276);
        StorageLive(_277);
        StorageLive(_278);
        StorageLive(_279);
        StorageLive(_280);
        StorageLive(_281);
        StorageLive(_282);
        StorageLive(_283);
        _283 = &mut (*_15);
        _282 = <RefMut<'_, state::lending_market::LendingMarket> as DerefMut>::deref_mut(move _283) -> [return: bb141, unwind: bb304];
    }

    bb141: {
        StorageDead(_283);
        _281 = &mut ((*_282).9: u8);
        _280 = &mut (*_281);
        _279 = for_field::<u8>(move _280) -> [return: bb142, unwind: bb304];
    }

    bb142: {
        StorageDead(_280);
        _278 = ConfigItemUpdater::<'_, u8, u8, for<'a> fn(&'a mut u8, u8) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u8>}, for<'t, 'a> fn(&'t u8, &'a u8) -> std::result::Result<std::option::Option<&'t u8>, anchor_lang::error::Error> {get_field_directly::<u8>}, for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<u8>}, for<'a, 'b, 'c> fn(&'a u8, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u8>}>::named::<&str>(move _279, const "&mut market.price_refresh_trigger_to_max_age_pct") -> [return: bb143, unwind: bb304];
    }

    bb143: {
        StorageDead(_279);
        _277 = ConfigItemUpdater::<'_, u8, u8, for<'a> fn(&'a mut u8, u8) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u8>}, for<'t, 'a> fn(&'t u8, &'a u8) -> std::result::Result<std::option::Option<&'t u8>, anchor_lang::error::Error> {get_field_directly::<u8>}, for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<u8>}, for<'a, 'b, 'c> fn(&'a u8, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u8>}>::validating::<for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {check_valid_pct::<u8>}>(move _278, check_valid_pct::<u8>) -> [return: bb144, unwind: bb304];
    }

    bb144: {
        StorageDead(_278);
        StorageLive(_284);
        StorageLive(_285);
        StorageLive(_286);
        _286 = &_3;
        _285 = &(*_286);
        _284 = move _285 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_285);
        _276 = ConfigItemUpdater::<'_, u8, u8, for<'a> fn(&'a mut u8, u8) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u8>}, for<'t, 'a> fn(&'t u8, &'a u8) -> std::result::Result<std::option::Option<&'t u8>, anchor_lang::error::Error> {get_field_directly::<u8>}, for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {check_valid_pct::<u8>}, for<'a, 'b, 'c> fn(&'a u8, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u8>}>::set(move _277, move _284) -> [return: bb145, unwind: bb304];
    }

    bb145: {
        StorageDead(_284);
        StorageDead(_277);
        _275 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _276) -> [return: bb146, unwind: bb304];
    }

    bb146: {
        StorageDead(_276);
        _287 = discriminant(_275);
        switchInt(move _287) -> [0: bb147, 1: bb148, otherwise: bb5];
    }

    bb147: {
        StorageLive(_291);
        _291 = ((_275 as Continue).0: ());
        _274 = _291;
        StorageDead(_291);
        _623 = discriminant(_275);
        StorageDead(_286);
        StorageDead(_282);
        StorageDead(_281);
        StorageDead(_275);
        StorageDead(_274);
        _76 = const ();
        goto -> bb291;
    }

    bb148: {
        StorageLive(_288);
        _288 = move ((_275 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_290);
        _290 = move _288;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _290) -> [return: bb149, unwind: bb319];
    }

    bb149: {
        StorageDead(_290);
        StorageDead(_288);
        _669 = discriminant(_275);
        StorageDead(_286);
        StorageDead(_282);
        StorageDead(_281);
        StorageDead(_275);
        StorageDead(_274);
        goto -> bb293;
    }

    bb150: {
        StorageLive(_292);
        StorageLive(_293);
        StorageLive(_294);
        StorageLive(_295);
        StorageLive(_296);
        StorageLive(_297);
        StorageLive(_298);
        StorageLive(_299);
        StorageLive(_300);
        StorageLive(_301);
        _301 = &mut (*_15);
        _300 = <RefMut<'_, state::lending_market::LendingMarket> as DerefMut>::deref_mut(move _301) -> [return: bb151, unwind: bb304];
    }

    bb151: {
        StorageDead(_301);
        _299 = &mut ((*_300).7: u8);
        _298 = &mut (*_299);
        _297 = for_field::<u8>(move _298) -> [return: bb152, unwind: bb304];
    }

    bb152: {
        StorageDead(_298);
        _296 = ConfigItemUpdater::<'_, u8, u8, for<'a> fn(&'a mut u8, u8) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u8>}, for<'t, 'a> fn(&'t u8, &'a u8) -> std::result::Result<std::option::Option<&'t u8>, anchor_lang::error::Error> {get_field_directly::<u8>}, for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<u8>}, for<'a, 'b, 'c> fn(&'a u8, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u8>}>::named::<&str>(move _297, const "&mut market.autodeleverage_enabled") -> [return: bb153, unwind: bb304];
    }

    bb153: {
        StorageDead(_297);
        _295 = ConfigItemUpdater::<'_, u8, u8, for<'a> fn(&'a mut u8, u8) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u8>}, for<'t, 'a> fn(&'t u8, &'a u8) -> std::result::Result<std::option::Option<&'t u8>, anchor_lang::error::Error> {get_field_directly::<u8>}, for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<u8>}, for<'a, 'b, 'c> fn(&'a u8, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u8>}>::validating::<for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {check_bool::<u8>}>(move _296, check_bool::<u8>) -> [return: bb154, unwind: bb304];
    }

    bb154: {
        StorageDead(_296);
        StorageLive(_302);
        StorageLive(_303);
        StorageLive(_304);
        _304 = &_3;
        _303 = &(*_304);
        _302 = move _303 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_303);
        _294 = ConfigItemUpdater::<'_, u8, u8, for<'a> fn(&'a mut u8, u8) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u8>}, for<'t, 'a> fn(&'t u8, &'a u8) -> std::result::Result<std::option::Option<&'t u8>, anchor_lang::error::Error> {get_field_directly::<u8>}, for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {check_bool::<u8>}, for<'a, 'b, 'c> fn(&'a u8, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u8>}>::set(move _295, move _302) -> [return: bb155, unwind: bb304];
    }

    bb155: {
        StorageDead(_302);
        StorageDead(_295);
        _293 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _294) -> [return: bb156, unwind: bb304];
    }

    bb156: {
        StorageDead(_294);
        _305 = discriminant(_293);
        switchInt(move _305) -> [0: bb157, 1: bb158, otherwise: bb5];
    }

    bb157: {
        StorageLive(_309);
        _309 = ((_293 as Continue).0: ());
        _292 = _309;
        StorageDead(_309);
        _625 = discriminant(_293);
        StorageDead(_304);
        StorageDead(_300);
        StorageDead(_299);
        StorageDead(_293);
        StorageDead(_292);
        _76 = const ();
        goto -> bb291;
    }

    bb158: {
        StorageLive(_306);
        _306 = move ((_293 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_308);
        _308 = move _306;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _308) -> [return: bb159, unwind: bb318];
    }

    bb159: {
        StorageDead(_308);
        StorageDead(_306);
        _667 = discriminant(_293);
        StorageDead(_304);
        StorageDead(_300);
        StorageDead(_299);
        StorageDead(_293);
        StorageDead(_292);
        goto -> bb293;
    }

    bb160: {
        StorageLive(_310);
        StorageLive(_311);
        StorageLive(_312);
        StorageLive(_313);
        StorageLive(_314);
        StorageLive(_315);
        StorageLive(_316);
        StorageLive(_317);
        StorageLive(_318);
        StorageLive(_319);
        _319 = &mut (*_15);
        _318 = <RefMut<'_, state::lending_market::LendingMarket> as DerefMut>::deref_mut(move _319) -> [return: bb161, unwind: bb304];
    }

    bb161: {
        StorageDead(_319);
        _317 = &mut ((*_318).8: u8);
        _316 = &mut (*_317);
        _315 = for_field::<u8>(move _316) -> [return: bb162, unwind: bb304];
    }

    bb162: {
        StorageDead(_316);
        _314 = ConfigItemUpdater::<'_, u8, u8, for<'a> fn(&'a mut u8, u8) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u8>}, for<'t, 'a> fn(&'t u8, &'a u8) -> std::result::Result<std::option::Option<&'t u8>, anchor_lang::error::Error> {get_field_directly::<u8>}, for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<u8>}, for<'a, 'b, 'c> fn(&'a u8, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u8>}>::named::<&str>(move _315, const "&mut market.borrow_disabled") -> [return: bb163, unwind: bb304];
    }

    bb163: {
        StorageDead(_315);
        _313 = ConfigItemUpdater::<'_, u8, u8, for<'a> fn(&'a mut u8, u8) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u8>}, for<'t, 'a> fn(&'t u8, &'a u8) -> std::result::Result<std::option::Option<&'t u8>, anchor_lang::error::Error> {get_field_directly::<u8>}, for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<u8>}, for<'a, 'b, 'c> fn(&'a u8, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u8>}>::validating::<for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {check_bool::<u8>}>(move _314, check_bool::<u8>) -> [return: bb164, unwind: bb304];
    }

    bb164: {
        StorageDead(_314);
        StorageLive(_320);
        StorageLive(_321);
        StorageLive(_322);
        _322 = &_3;
        _321 = &(*_322);
        _320 = move _321 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_321);
        _312 = ConfigItemUpdater::<'_, u8, u8, for<'a> fn(&'a mut u8, u8) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u8>}, for<'t, 'a> fn(&'t u8, &'a u8) -> std::result::Result<std::option::Option<&'t u8>, anchor_lang::error::Error> {get_field_directly::<u8>}, for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {check_bool::<u8>}, for<'a, 'b, 'c> fn(&'a u8, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u8>}>::set(move _313, move _320) -> [return: bb165, unwind: bb304];
    }

    bb165: {
        StorageDead(_320);
        StorageDead(_313);
        _311 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _312) -> [return: bb166, unwind: bb304];
    }

    bb166: {
        StorageDead(_312);
        _323 = discriminant(_311);
        switchInt(move _323) -> [0: bb167, 1: bb168, otherwise: bb5];
    }

    bb167: {
        StorageLive(_327);
        _327 = ((_311 as Continue).0: ());
        _310 = _327;
        StorageDead(_327);
        _627 = discriminant(_311);
        StorageDead(_322);
        StorageDead(_318);
        StorageDead(_317);
        StorageDead(_311);
        StorageDead(_310);
        _76 = const ();
        goto -> bb291;
    }

    bb168: {
        StorageLive(_324);
        _324 = move ((_311 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_326);
        _326 = move _324;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _326) -> [return: bb169, unwind: bb317];
    }

    bb169: {
        StorageDead(_326);
        StorageDead(_324);
        _665 = discriminant(_311);
        StorageDead(_322);
        StorageDead(_318);
        StorageDead(_317);
        StorageDead(_311);
        StorageDead(_310);
        goto -> bb293;
    }

    bb170: {
        StorageLive(_328);
        StorageLive(_329);
        StorageLive(_330);
        StorageLive(_331);
        StorageLive(_332);
        StorageLive(_333);
        StorageLive(_334);
        StorageLive(_335);
        StorageLive(_336);
        StorageLive(_337);
        _337 = &mut (*_15);
        _336 = <RefMut<'_, state::lending_market::LendingMarket> as DerefMut>::deref_mut(move _337) -> [return: bb171, unwind: bb304];
    }

    bb171: {
        StorageDead(_337);
        _335 = &mut ((*_336).20: u128);
        _334 = &mut (*_335);
        _333 = for_field::<u128>(move _334) -> [return: bb172, unwind: bb304];
    }

    bb172: {
        StorageDead(_334);
        _332 = ConfigItemUpdater::<'_, u128, u128, for<'a> fn(&'a mut u128, u128) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u128>}, for<'t, 'a> fn(&'t u128, &'a u128) -> std::result::Result<std::option::Option<&'t u128>, anchor_lang::error::Error> {get_field_directly::<u128>}, for<'a> fn(&'a u128) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<u128>}, for<'a, 'b, 'c> fn(&'a u128, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u128>}>::named::<&str>(move _333, const "&mut market.min_net_value_in_obligation_sf") -> [return: bb173, unwind: bb304];
    }

    bb173: {
        StorageDead(_333);
        _331 = ConfigItemUpdater::<'_, u128, u128, for<'a> fn(&'a mut u128, u128) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u128>}, for<'t, 'a> fn(&'t u128, &'a u128) -> std::result::Result<std::option::Option<&'t u128>, anchor_lang::error::Error> {get_field_directly::<u128>}, for<'a> fn(&'a u128) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<u128>}, for<'a, 'b, 'c> fn(&'a u128, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u128>}>::rendering::<for<'a, 'b, 'c> fn(&'a u128, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {as_fraction::<u128>}>(move _332, as_fraction::<u128>) -> [return: bb174, unwind: bb304];
    }

    bb174: {
        StorageDead(_332);
        StorageLive(_338);
        StorageLive(_339);
        StorageLive(_340);
        _340 = &_3;
        _339 = &(*_340);
        _338 = move _339 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_339);
        _330 = ConfigItemUpdater::<'_, u128, u128, for<'a> fn(&'a mut u128, u128) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u128>}, for<'t, 'a> fn(&'t u128, &'a u128) -> std::result::Result<std::option::Option<&'t u128>, anchor_lang::error::Error> {get_field_directly::<u128>}, for<'a> fn(&'a u128) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<u128>}, for<'a, 'b, 'c> fn(&'a u128, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {as_fraction::<u128>}>::set(move _331, move _338) -> [return: bb175, unwind: bb304];
    }

    bb175: {
        StorageDead(_338);
        StorageDead(_331);
        _329 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _330) -> [return: bb176, unwind: bb304];
    }

    bb176: {
        StorageDead(_330);
        _341 = discriminant(_329);
        switchInt(move _341) -> [0: bb177, 1: bb178, otherwise: bb5];
    }

    bb177: {
        StorageLive(_345);
        _345 = ((_329 as Continue).0: ());
        _328 = _345;
        StorageDead(_345);
        _629 = discriminant(_329);
        StorageDead(_340);
        StorageDead(_336);
        StorageDead(_335);
        StorageDead(_329);
        StorageDead(_328);
        _76 = const ();
        goto -> bb291;
    }

    bb178: {
        StorageLive(_342);
        _342 = move ((_329 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_344);
        _344 = move _342;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _344) -> [return: bb179, unwind: bb316];
    }

    bb179: {
        StorageDead(_344);
        StorageDead(_342);
        _663 = discriminant(_329);
        StorageDead(_340);
        StorageDead(_336);
        StorageDead(_335);
        StorageDead(_329);
        StorageDead(_328);
        goto -> bb293;
    }

    bb180: {
        StorageLive(_346);
        StorageLive(_347);
        StorageLive(_348);
        StorageLive(_349);
        StorageLive(_350);
        StorageLive(_351);
        StorageLive(_352);
        StorageLive(_353);
        StorageLive(_354);
        _354 = &mut (*_15);
        _353 = <RefMut<'_, state::lending_market::LendingMarket> as DerefMut>::deref_mut(move _354) -> [return: bb181, unwind: bb304];
    }

    bb181: {
        StorageDead(_354);
        _352 = &mut ((*_353).21: u64);
        _351 = &mut (*_352);
        _350 = for_field::<u64>(move _351) -> [return: bb182, unwind: bb304];
    }

    bb182: {
        StorageDead(_351);
        _349 = ConfigItemUpdater::<'_, u64, u64, for<'a> fn(&'a mut u64, u64) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u64>}, for<'t, 'a> fn(&'t u64, &'a u64) -> std::result::Result<std::option::Option<&'t u64>, anchor_lang::error::Error> {get_field_directly::<u64>}, for<'a> fn(&'a u64) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<u64>}, for<'a, 'b, 'c> fn(&'a u64, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u64>}>::named::<&str>(move _350, const "&mut market.min_value_skip_liquidation_ltv_checks") -> [return: bb183, unwind: bb304];
    }

    bb183: {
        StorageDead(_350);
        StorageLive(_355);
        StorageLive(_356);
        StorageLive(_357);
        _357 = &_3;
        _356 = &(*_357);
        _355 = move _356 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_356);
        _348 = ConfigItemUpdater::<'_, u64, u64, for<'a> fn(&'a mut u64, u64) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u64>}, for<'t, 'a> fn(&'t u64, &'a u64) -> std::result::Result<std::option::Option<&'t u64>, anchor_lang::error::Error> {get_field_directly::<u64>}, for<'a> fn(&'a u64) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<u64>}, for<'a, 'b, 'c> fn(&'a u64, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u64>}>::set(move _349, move _355) -> [return: bb184, unwind: bb304];
    }

    bb184: {
        StorageDead(_355);
        StorageDead(_349);
        _347 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _348) -> [return: bb185, unwind: bb304];
    }

    bb185: {
        StorageDead(_348);
        _358 = discriminant(_347);
        switchInt(move _358) -> [0: bb186, 1: bb187, otherwise: bb5];
    }

    bb186: {
        StorageLive(_362);
        _362 = ((_347 as Continue).0: ());
        _346 = _362;
        StorageDead(_362);
        _631 = discriminant(_347);
        StorageDead(_357);
        StorageDead(_353);
        StorageDead(_352);
        StorageDead(_347);
        StorageDead(_346);
        _76 = const ();
        goto -> bb291;
    }

    bb187: {
        StorageLive(_359);
        _359 = move ((_347 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_361);
        _361 = move _359;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _361) -> [return: bb188, unwind: bb315];
    }

    bb188: {
        StorageDead(_361);
        StorageDead(_359);
        _661 = discriminant(_347);
        StorageDead(_357);
        StorageDead(_353);
        StorageDead(_352);
        StorageDead(_347);
        StorageDead(_346);
        goto -> bb293;
    }

    bb189: {
        StorageLive(_363);
        StorageLive(_364);
        StorageLive(_365);
        StorageLive(_366);
        StorageLive(_367);
        StorageLive(_368);
        StorageLive(_369);
        StorageLive(_370);
        StorageLive(_371);
        _371 = &mut (*_15);
        _370 = <RefMut<'_, state::lending_market::LendingMarket> as DerefMut>::deref_mut(move _371) -> [return: bb190, unwind: bb304];
    }

    bb190: {
        StorageDead(_371);
        _369 = &mut ((*_370).23: u64);
        _368 = &mut (*_369);
        _367 = for_field::<u64>(move _368) -> [return: bb191, unwind: bb304];
    }

    bb191: {
        StorageDead(_368);
        _366 = ConfigItemUpdater::<'_, u64, u64, for<'a> fn(&'a mut u64, u64) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u64>}, for<'t, 'a> fn(&'t u64, &'a u64) -> std::result::Result<std::option::Option<&'t u64>, anchor_lang::error::Error> {get_field_directly::<u64>}, for<'a> fn(&'a u64) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<u64>}, for<'a, 'b, 'c> fn(&'a u64, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u64>}>::named::<&str>(move _367, const "&mut market.min_value_skip_liquidation_bf_checks") -> [return: bb192, unwind: bb304];
    }

    bb192: {
        StorageDead(_367);
        StorageLive(_372);
        StorageLive(_373);
        StorageLive(_374);
        _374 = &_3;
        _373 = &(*_374);
        _372 = move _373 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_373);
        _365 = ConfigItemUpdater::<'_, u64, u64, for<'a> fn(&'a mut u64, u64) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u64>}, for<'t, 'a> fn(&'t u64, &'a u64) -> std::result::Result<std::option::Option<&'t u64>, anchor_lang::error::Error> {get_field_directly::<u64>}, for<'a> fn(&'a u64) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<u64>}, for<'a, 'b, 'c> fn(&'a u64, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u64>}>::set(move _366, move _372) -> [return: bb193, unwind: bb304];
    }

    bb193: {
        StorageDead(_372);
        StorageDead(_366);
        _364 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _365) -> [return: bb194, unwind: bb304];
    }

    bb194: {
        StorageDead(_365);
        _375 = discriminant(_364);
        switchInt(move _375) -> [0: bb195, 1: bb196, otherwise: bb5];
    }

    bb195: {
        StorageLive(_379);
        _379 = ((_364 as Continue).0: ());
        _363 = _379;
        StorageDead(_379);
        _633 = discriminant(_364);
        StorageDead(_374);
        StorageDead(_370);
        StorageDead(_369);
        StorageDead(_364);
        StorageDead(_363);
        _76 = const ();
        goto -> bb291;
    }

    bb196: {
        StorageLive(_376);
        _376 = move ((_364 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_378);
        _378 = move _376;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _378) -> [return: bb197, unwind: bb314];
    }

    bb197: {
        StorageDead(_378);
        StorageDead(_376);
        _659 = discriminant(_364);
        StorageDead(_374);
        StorageDead(_370);
        StorageDead(_369);
        StorageDead(_364);
        StorageDead(_363);
        goto -> bb293;
    }

    bb198: {
        StorageLive(_380);
        StorageLive(_381);
        StorageLive(_382);
        StorageLive(_383);
        StorageLive(_384);
        StorageLive(_385);
        StorageLive(_386);
        StorageLive(_387);
        StorageLive(_388);
        StorageLive(_389);
        StorageLive(_390);
        _591 = const _;
        _390 = &(*_591);
        _389 = &(*_390);
        _388 = move _389 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_389);
        StorageLive(_392);
        StorageLive(_393);
        StorageLive(_394);
        StorageLive(_395);
        StorageLive(_396);
        StorageLive(_397);
        StorageLive(_398);
        StorageLive(_399);
        StorageLive(_400);
        _400 = &(*_15);
        _399 = <RefMut<'_, state::lending_market::LendingMarket> as Deref>::deref(move _400) -> [return: bb199, unwind: bb304];
    }

    bb199: {
        StorageDead(_400);
        _398 = &((*_399).14: [u8; 8]);
        _397 = &(*_398);
        _396 = core::fmt::rt::Argument::<'_>::new_debug::<[u8; 8]>(move _397) -> [return: bb200, unwind: bb304];
    }

    bb200: {
        StorageDead(_397);
        _395 = [move _396];
        StorageDead(_396);
        _394 = &_395;
        _393 = &(*_394);
        _392 = move _393 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_393);
        _387 = Arguments::<'_>::new_v1(move _388, move _392) -> [return: bb201, unwind: bb304];
    }

    bb201: {
        StorageDead(_392);
        StorageDead(_388);
        _386 = format(move _387) -> [return: bb202, unwind: bb304];
    }

    bb202: {
        StorageDead(_387);
        StorageDead(_399);
        StorageDead(_398);
        StorageDead(_395);
        StorageDead(_394);
        StorageDead(_390);
        _385 = move _386;
        StorageDead(_386);
        _384 = &_385;
        _383 = &(*_384);
        _382 = <std::string::String as Deref>::deref(move _383) -> [return: bb203, unwind: bb301];
    }

    bb203: {
        _381 = &(*_382);
        StorageDead(_383);
        _380 = solana_program::log::sol_log(move _381) -> [return: bb204, unwind: bb301];
    }

    bb204: {
        StorageDead(_381);
        drop(_385) -> [return: bb205, unwind: bb304];
    }

    bb205: {
        StorageDead(_385);
        StorageDead(_384);
        StorageDead(_382);
        StorageDead(_380);
        StorageLive(_401);
        StorageLive(_402);
        StorageLive(_403);
        StorageLive(_404);
        StorageLive(_405);
        StorageLive(_406);
        StorageLive(_407);
        StorageLive(_408);
        StorageLive(_409);
        StorageLive(_410);
        StorageLive(_411);
        _590 = const _;
        _411 = &(*_590);
        _410 = &(*_411);
        _409 = move _410 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_410);
        StorageLive(_413);
        StorageLive(_414);
        StorageLive(_415);
        StorageLive(_416);
        StorageLive(_417);
        StorageLive(_418);
        StorageLive(_419);
        StorageLive(_420);
        StorageLive(_421);
        _421 = &(*_15);
        _420 = <RefMut<'_, state::lending_market::LendingMarket> as Deref>::deref(move _421) -> [return: bb206, unwind: bb304];
    }

    bb206: {
        StorageDead(_421);
        _419 = &((*_420).17: [u8; 8]);
        _418 = &(*_419);
        _417 = core::fmt::rt::Argument::<'_>::new_debug::<[u8; 8]>(move _418) -> [return: bb207, unwind: bb304];
    }

    bb207: {
        StorageDead(_418);
        _416 = [move _417];
        StorageDead(_417);
        _415 = &_416;
        _414 = &(*_415);
        _413 = move _414 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_414);
        _408 = Arguments::<'_>::new_v1(move _409, move _413) -> [return: bb208, unwind: bb304];
    }

    bb208: {
        StorageDead(_413);
        StorageDead(_409);
        _407 = format(move _408) -> [return: bb209, unwind: bb304];
    }

    bb209: {
        StorageDead(_408);
        StorageDead(_420);
        StorageDead(_419);
        StorageDead(_416);
        StorageDead(_415);
        StorageDead(_411);
        _406 = move _407;
        StorageDead(_407);
        _405 = &_406;
        _404 = &(*_405);
        _403 = <std::string::String as Deref>::deref(move _404) -> [return: bb210, unwind: bb300];
    }

    bb210: {
        _402 = &(*_403);
        StorageDead(_404);
        _401 = solana_program::log::sol_log(move _402) -> [return: bb211, unwind: bb300];
    }

    bb211: {
        StorageDead(_402);
        drop(_406) -> [return: bb212, unwind: bb304];
    }

    bb212: {
        StorageDead(_406);
        StorageDead(_405);
        StorageDead(_403);
        StorageDead(_401);
        StorageLive(_422);
        StorageLive(_423);
        _423 = &mut (*_15);
        _422 = <RefMut<'_, state::lending_market::LendingMarket> as DerefMut>::deref_mut(move _423) -> [return: bb213, unwind: bb304];
    }

    bb213: {
        StorageDead(_423);
        ((*_422).14: [u8; 8]) = [const 0_u8; 8];
        StorageDead(_422);
        StorageLive(_424);
        StorageLive(_425);
        _425 = &mut (*_15);
        _424 = <RefMut<'_, state::lending_market::LendingMarket> as DerefMut>::deref_mut(move _425) -> [return: bb214, unwind: bb304];
    }

    bb214: {
        StorageDead(_425);
        ((*_424).17: [u8; 8]) = [const 0_u8; 8];
        StorageDead(_424);
        StorageLive(_426);
        StorageLive(_427);
        StorageLive(_428);
        StorageLive(_429);
        StorageLive(_430);
        StorageLive(_431);
        StorageLive(_432);
        StorageLive(_433);
        StorageLive(_434);
        StorageLive(_435);
        StorageLive(_436);
        _589 = const _;
        _436 = &(*_589);
        _435 = &(*_436);
        _434 = move _435 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_435);
        StorageLive(_438);
        StorageLive(_439);
        StorageLive(_440);
        StorageLive(_441);
        StorageLive(_442);
        StorageLive(_443);
        StorageLive(_444);
        StorageLive(_445);
        StorageLive(_446);
        _446 = &(*_15);
        _445 = <RefMut<'_, state::lending_market::LendingMarket> as Deref>::deref(move _446) -> [return: bb215, unwind: bb304];
    }

    bb215: {
        StorageDead(_446);
        _444 = &((*_445).14: [u8; 8]);
        _443 = &(*_444);
        _442 = core::fmt::rt::Argument::<'_>::new_debug::<[u8; 8]>(move _443) -> [return: bb216, unwind: bb304];
    }

    bb216: {
        StorageDead(_443);
        _441 = [move _442];
        StorageDead(_442);
        _440 = &_441;
        _439 = &(*_440);
        _438 = move _439 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_439);
        _433 = Arguments::<'_>::new_v1(move _434, move _438) -> [return: bb217, unwind: bb304];
    }

    bb217: {
        StorageDead(_438);
        StorageDead(_434);
        _432 = format(move _433) -> [return: bb218, unwind: bb304];
    }

    bb218: {
        StorageDead(_433);
        StorageDead(_445);
        StorageDead(_444);
        StorageDead(_441);
        StorageDead(_440);
        StorageDead(_436);
        _431 = move _432;
        StorageDead(_432);
        _430 = &_431;
        _429 = &(*_430);
        _428 = <std::string::String as Deref>::deref(move _429) -> [return: bb219, unwind: bb299];
    }

    bb219: {
        _427 = &(*_428);
        StorageDead(_429);
        _426 = solana_program::log::sol_log(move _427) -> [return: bb220, unwind: bb299];
    }

    bb220: {
        StorageDead(_427);
        drop(_431) -> [return: bb221, unwind: bb304];
    }

    bb221: {
        StorageDead(_431);
        StorageDead(_430);
        StorageDead(_428);
        StorageDead(_426);
        StorageLive(_447);
        StorageLive(_448);
        StorageLive(_449);
        StorageLive(_450);
        StorageLive(_451);
        StorageLive(_452);
        StorageLive(_453);
        StorageLive(_454);
        StorageLive(_455);
        StorageLive(_456);
        StorageLive(_457);
        _588 = const _;
        _457 = &(*_588);
        _456 = &(*_457);
        _455 = move _456 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_456);
        StorageLive(_459);
        StorageLive(_460);
        StorageLive(_461);
        StorageLive(_462);
        StorageLive(_463);
        StorageLive(_464);
        StorageLive(_465);
        StorageLive(_466);
        StorageLive(_467);
        _467 = &(*_15);
        _466 = <RefMut<'_, state::lending_market::LendingMarket> as Deref>::deref(move _467) -> [return: bb222, unwind: bb304];
    }

    bb222: {
        StorageDead(_467);
        _465 = &((*_466).17: [u8; 8]);
        _464 = &(*_465);
        _463 = core::fmt::rt::Argument::<'_>::new_debug::<[u8; 8]>(move _464) -> [return: bb223, unwind: bb304];
    }

    bb223: {
        StorageDead(_464);
        _462 = [move _463];
        StorageDead(_463);
        _461 = &_462;
        _460 = &(*_461);
        _459 = move _460 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_460);
        _454 = Arguments::<'_>::new_v1(move _455, move _459) -> [return: bb224, unwind: bb304];
    }

    bb224: {
        StorageDead(_459);
        StorageDead(_455);
        _453 = format(move _454) -> [return: bb225, unwind: bb304];
    }

    bb225: {
        StorageDead(_454);
        StorageDead(_466);
        StorageDead(_465);
        StorageDead(_462);
        StorageDead(_461);
        StorageDead(_457);
        _452 = move _453;
        StorageDead(_453);
        _451 = &_452;
        _450 = &(*_451);
        _449 = <std::string::String as Deref>::deref(move _450) -> [return: bb226, unwind: bb298];
    }

    bb226: {
        _448 = &(*_449);
        StorageDead(_450);
        _447 = solana_program::log::sol_log(move _448) -> [return: bb227, unwind: bb298];
    }

    bb227: {
        StorageDead(_448);
        drop(_452) -> [return: bb228, unwind: bb304];
    }

    bb228: {
        StorageDead(_452);
        StorageDead(_451);
        StorageDead(_449);
        StorageDead(_447);
        _76 = const ();
        goto -> bb291;
    }

    bb229: {
        StorageLive(_469);
        StorageLive(_470);
        StorageLive(_471);
        StorageLive(_472);
        StorageLive(_473);
        _587 = const _;
        _473 = &(*_587);
        _472 = &(*_473);
        _471 = move _472 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_472);
        _470 = Arguments::<'_>::new_const(move _471) -> [return: bb230, unwind: bb304];
    }

    bb230: {
        StorageDead(_471);
        _469 = panic_fmt(move _470) -> bb304;
    }

    bb231: {
        StorageLive(_475);
        StorageLive(_476);
        StorageLive(_477);
        StorageLive(_478);
        StorageLive(_479);
        StorageLive(_480);
        StorageLive(_481);
        StorageLive(_482);
        StorageLive(_483);
        StorageLive(_484);
        _484 = &mut (*_15);
        _483 = <RefMut<'_, state::lending_market::LendingMarket> as DerefMut>::deref_mut(move _484) -> [return: bb232, unwind: bb304];
    }

    bb232: {
        StorageDead(_484);
        _482 = &mut ((*_483).22: [u8; 32]);
        _481 = &mut (*_482);
        _480 = for_field::<[u8; 32]>(move _481) -> [return: bb233, unwind: bb304];
    }

    bb233: {
        StorageDead(_481);
        _479 = ConfigItemUpdater::<'_, [u8; 32], [u8; 32], for<'a> fn(&'a mut [u8; 32], [u8; 32]) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<[u8; 32]>}, for<'t, 'a> fn(&'t [u8; 32], &'a [u8; 32]) -> std::result::Result<std::option::Option<&'t [u8; 32]>, anchor_lang::error::Error> {get_field_directly::<[u8; 32]>}, for<'a> fn(&'a [u8; 32]) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<[u8; 32]>}, for<'a, 'b, 'c> fn(&'a [u8; 32], &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<[u8; 32]>}>::named::<&str>(move _480, const "&mut market.name") -> [return: bb234, unwind: bb304];
    }

    bb234: {
        StorageDead(_480);
        _478 = ConfigItemUpdater::<'_, [u8; 32], [u8; 32], for<'a> fn(&'a mut [u8; 32], [u8; 32]) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<[u8; 32]>}, for<'t, 'a> fn(&'t [u8; 32], &'a [u8; 32]) -> std::result::Result<std::option::Option<&'t [u8; 32]>, anchor_lang::error::Error> {get_field_directly::<[u8; 32]>}, for<'a> fn(&'a [u8; 32]) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<[u8; 32]>}, for<'a, 'b, 'c> fn(&'a [u8; 32], &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<[u8; 32]>}>::rendering::<for<'a, 'b, 'c> fn(&'a [u8; 32], &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {as_utf8_null_padded_string::<32>}>(move _479, as_utf8_null_padded_string::<32>) -> [return: bb235, unwind: bb304];
    }

    bb235: {
        StorageDead(_479);
        StorageLive(_485);
        StorageLive(_486);
        StorageLive(_487);
        _487 = &_3;
        _486 = &(*_487);
        _485 = move _486 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_486);
        _477 = ConfigItemUpdater::<'_, [u8; 32], [u8; 32], for<'a> fn(&'a mut [u8; 32], [u8; 32]) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<[u8; 32]>}, for<'t, 'a> fn(&'t [u8; 32], &'a [u8; 32]) -> std::result::Result<std::option::Option<&'t [u8; 32]>, anchor_lang::error::Error> {get_field_directly::<[u8; 32]>}, for<'a> fn(&'a [u8; 32]) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<[u8; 32]>}, for<'a, 'b, 'c> fn(&'a [u8; 32], &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {as_utf8_null_padded_string::<32>}>::set(move _478, move _485) -> [return: bb236, unwind: bb304];
    }

    bb236: {
        StorageDead(_485);
        StorageDead(_478);
        _476 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _477) -> [return: bb237, unwind: bb304];
    }

    bb237: {
        StorageDead(_477);
        _488 = discriminant(_476);
        switchInt(move _488) -> [0: bb238, 1: bb239, otherwise: bb5];
    }

    bb238: {
        StorageLive(_492);
        _492 = ((_476 as Continue).0: ());
        _475 = _492;
        StorageDead(_492);
        _635 = discriminant(_476);
        StorageDead(_487);
        StorageDead(_483);
        StorageDead(_482);
        StorageDead(_476);
        StorageDead(_475);
        _76 = const ();
        goto -> bb291;
    }

    bb239: {
        StorageLive(_489);
        _489 = move ((_476 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_491);
        _491 = move _489;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _491) -> [return: bb240, unwind: bb313];
    }

    bb240: {
        StorageDead(_491);
        StorageDead(_489);
        _657 = discriminant(_476);
        StorageDead(_487);
        StorageDead(_483);
        StorageDead(_482);
        StorageDead(_476);
        StorageDead(_475);
        goto -> bb293;
    }

    bb241: {
        StorageLive(_493);
        StorageLive(_494);
        StorageLive(_495);
        StorageLive(_496);
        StorageLive(_497);
        StorageLive(_498);
        StorageLive(_499);
        StorageLive(_500);
        StorageLive(_501);
        StorageLive(_502);
        _502 = &mut (*_15);
        _501 = <RefMut<'_, state::lending_market::LendingMarket> as DerefMut>::deref_mut(move _502) -> [return: bb242, unwind: bb304];
    }

    bb242: {
        StorageDead(_502);
        _500 = &mut ((*_501).24: u64);
        _499 = &mut (*_500);
        _498 = for_field::<u64>(move _499) -> [return: bb243, unwind: bb304];
    }

    bb243: {
        StorageDead(_499);
        _497 = ConfigItemUpdater::<'_, u64, u64, for<'a> fn(&'a mut u64, u64) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u64>}, for<'t, 'a> fn(&'t u64, &'a u64) -> std::result::Result<std::option::Option<&'t u64>, anchor_lang::error::Error> {get_field_directly::<u64>}, for<'a> fn(&'a u64) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<u64>}, for<'a, 'b, 'c> fn(&'a u64, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u64>}>::named::<&str>(move _498, const "&mut market.individual_autodeleverage_margin_call_period_secs") -> [return: bb244, unwind: bb304];
    }

    bb244: {
        StorageDead(_498);
        _496 = ConfigItemUpdater::<'_, u64, u64, for<'a> fn(&'a mut u64, u64) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u64>}, for<'t, 'a> fn(&'t u64, &'a u64) -> std::result::Result<std::option::Option<&'t u64>, anchor_lang::error::Error> {get_field_directly::<u64>}, for<'a> fn(&'a u64) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<u64>}, for<'a, 'b, 'c> fn(&'a u64, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u64>}>::validating::<for<'a> fn(&'a u64) -> std::result::Result<(), anchor_lang::error::Error> {check_not_zero::<u64>}>(move _497, check_not_zero::<u64>) -> [return: bb245, unwind: bb304];
    }

    bb245: {
        StorageDead(_497);
        StorageLive(_503);
        StorageLive(_504);
        StorageLive(_505);
        _505 = &_3;
        _504 = &(*_505);
        _503 = move _504 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_504);
        _495 = ConfigItemUpdater::<'_, u64, u64, for<'a> fn(&'a mut u64, u64) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u64>}, for<'t, 'a> fn(&'t u64, &'a u64) -> std::result::Result<std::option::Option<&'t u64>, anchor_lang::error::Error> {get_field_directly::<u64>}, for<'a> fn(&'a u64) -> std::result::Result<(), anchor_lang::error::Error> {check_not_zero::<u64>}, for<'a, 'b, 'c> fn(&'a u64, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u64>}>::set(move _496, move _503) -> [return: bb246, unwind: bb304];
    }

    bb246: {
        StorageDead(_503);
        StorageDead(_496);
        _494 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _495) -> [return: bb247, unwind: bb304];
    }

    bb247: {
        StorageDead(_495);
        _506 = discriminant(_494);
        switchInt(move _506) -> [0: bb248, 1: bb249, otherwise: bb5];
    }

    bb248: {
        StorageLive(_510);
        _510 = ((_494 as Continue).0: ());
        _493 = _510;
        StorageDead(_510);
        _637 = discriminant(_494);
        StorageDead(_505);
        StorageDead(_501);
        StorageDead(_500);
        StorageDead(_494);
        StorageDead(_493);
        _76 = const ();
        goto -> bb291;
    }

    bb249: {
        StorageLive(_507);
        _507 = move ((_494 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_509);
        _509 = move _507;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _509) -> [return: bb250, unwind: bb312];
    }

    bb250: {
        StorageDead(_509);
        StorageDead(_507);
        _655 = discriminant(_494);
        StorageDead(_505);
        StorageDead(_501);
        StorageDead(_500);
        StorageDead(_494);
        StorageDead(_493);
        goto -> bb293;
    }

    bb251: {
        StorageLive(_511);
        StorageLive(_512);
        StorageLive(_513);
        StorageLive(_514);
        StorageLive(_515);
        StorageLive(_516);
        StorageLive(_517);
        StorageLive(_518);
        StorageLive(_519);
        StorageLive(_520);
        _520 = &mut (*_15);
        _519 = <RefMut<'_, state::lending_market::LendingMarket> as DerefMut>::deref_mut(move _520) -> [return: bb252, unwind: bb304];
    }

    bb252: {
        StorageDead(_520);
        _518 = &mut ((*_519).25: u64);
        _517 = &mut (*_518);
        _516 = for_field::<u64>(move _517) -> [return: bb253, unwind: bb304];
    }

    bb253: {
        StorageDead(_517);
        _515 = ConfigItemUpdater::<'_, u64, u64, for<'a> fn(&'a mut u64, u64) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u64>}, for<'t, 'a> fn(&'t u64, &'a u64) -> std::result::Result<std::option::Option<&'t u64>, anchor_lang::error::Error> {get_field_directly::<u64>}, for<'a> fn(&'a u64) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<u64>}, for<'a, 'b, 'c> fn(&'a u64, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u64>}>::named::<&str>(move _516, const "&mut market.min_initial_deposit_amount") -> [return: bb254, unwind: bb304];
    }

    bb254: {
        _596 = const true;
        StorageDead(_516);
        StorageLive(_521);
        _521 = check_gte::<u64, u64>(const _) -> [return: bb255, unwind: bb311];
    }

    bb255: {
        _596 = const false;
        _514 = ConfigItemUpdater::<'_, u64, u64, for<'a> fn(&'a mut u64, u64) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u64>}, for<'t, 'a> fn(&'t u64, &'a u64) -> std::result::Result<std::option::Option<&'t u64>, anchor_lang::error::Error> {get_field_directly::<u64>}, for<'a> fn(&'a u64) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<u64>}, for<'a, 'b, 'c> fn(&'a u64, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u64>}>::validating::<{closure@programs\klend\src\lending_market\config_items.rs:264:9: 264:21}>(move _515, move _521) -> [return: bb256, unwind: bb311];
    }

    bb256: {
        StorageDead(_521);
        _596 = const false;
        StorageDead(_515);
        StorageLive(_522);
        StorageLive(_523);
        StorageLive(_524);
        _524 = &_3;
        _523 = &(*_524);
        _522 = move _523 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_523);
        _513 = ConfigItemUpdater::<'_, u64, u64, for<'a> fn(&'a mut u64, u64) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u64>}, for<'t, 'a> fn(&'t u64, &'a u64) -> std::result::Result<std::option::Option<&'t u64>, anchor_lang::error::Error> {get_field_directly::<u64>}, {closure@programs\klend\src\lending_market\config_items.rs:264:9: 264:21}, for<'a, 'b, 'c> fn(&'a u64, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u64>}>::set(move _514, move _522) -> [return: bb257, unwind: bb304];
    }

    bb257: {
        StorageDead(_522);
        StorageDead(_514);
        _512 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _513) -> [return: bb258, unwind: bb304];
    }

    bb258: {
        StorageDead(_513);
        _525 = discriminant(_512);
        switchInt(move _525) -> [0: bb259, 1: bb260, otherwise: bb5];
    }

    bb259: {
        StorageLive(_529);
        _529 = ((_512 as Continue).0: ());
        _511 = _529;
        StorageDead(_529);
        _639 = discriminant(_512);
        StorageDead(_524);
        StorageDead(_519);
        StorageDead(_518);
        StorageDead(_512);
        StorageDead(_511);
        _76 = const ();
        goto -> bb291;
    }

    bb260: {
        StorageLive(_526);
        _526 = move ((_512 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_528);
        _528 = move _526;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _528) -> [return: bb261, unwind: bb309];
    }

    bb261: {
        StorageDead(_528);
        StorageDead(_526);
        _653 = discriminant(_512);
        StorageDead(_524);
        StorageDead(_519);
        StorageDead(_518);
        StorageDead(_512);
        StorageDead(_511);
        goto -> bb293;
    }

    bb262: {
        StorageLive(_530);
        StorageLive(_531);
        StorageLive(_532);
        StorageLive(_533);
        StorageLive(_534);
        StorageLive(_535);
        StorageLive(_536);
        StorageLive(_537);
        StorageLive(_538);
        StorageLive(_539);
        _539 = &mut (*_15);
        _538 = <RefMut<'_, state::lending_market::LendingMarket> as DerefMut>::deref_mut(move _539) -> [return: bb263, unwind: bb304];
    }

    bb263: {
        StorageDead(_539);
        _537 = &mut ((*_538).26: u8);
        _536 = &mut (*_537);
        _535 = for_field::<u8>(move _536) -> [return: bb264, unwind: bb304];
    }

    bb264: {
        StorageDead(_536);
        _534 = ConfigItemUpdater::<'_, u8, u8, for<'a> fn(&'a mut u8, u8) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u8>}, for<'t, 'a> fn(&'t u8, &'a u8) -> std::result::Result<std::option::Option<&'t u8>, anchor_lang::error::Error> {get_field_directly::<u8>}, for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<u8>}, for<'a, 'b, 'c> fn(&'a u8, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u8>}>::named::<&str>(move _535, const "&mut market.obligation_order_execution_enabled") -> [return: bb265, unwind: bb304];
    }

    bb265: {
        StorageDead(_535);
        _533 = ConfigItemUpdater::<'_, u8, u8, for<'a> fn(&'a mut u8, u8) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u8>}, for<'t, 'a> fn(&'t u8, &'a u8) -> std::result::Result<std::option::Option<&'t u8>, anchor_lang::error::Error> {get_field_directly::<u8>}, for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<u8>}, for<'a, 'b, 'c> fn(&'a u8, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u8>}>::validating::<for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {check_bool::<u8>}>(move _534, check_bool::<u8>) -> [return: bb266, unwind: bb304];
    }

    bb266: {
        StorageDead(_534);
        StorageLive(_540);
        StorageLive(_541);
        StorageLive(_542);
        _542 = &_3;
        _541 = &(*_542);
        _540 = move _541 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_541);
        _532 = ConfigItemUpdater::<'_, u8, u8, for<'a> fn(&'a mut u8, u8) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u8>}, for<'t, 'a> fn(&'t u8, &'a u8) -> std::result::Result<std::option::Option<&'t u8>, anchor_lang::error::Error> {get_field_directly::<u8>}, for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {check_bool::<u8>}, for<'a, 'b, 'c> fn(&'a u8, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u8>}>::set(move _533, move _540) -> [return: bb267, unwind: bb304];
    }

    bb267: {
        StorageDead(_540);
        StorageDead(_533);
        _531 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _532) -> [return: bb268, unwind: bb304];
    }

    bb268: {
        StorageDead(_532);
        _543 = discriminant(_531);
        switchInt(move _543) -> [0: bb269, 1: bb270, otherwise: bb5];
    }

    bb269: {
        StorageLive(_547);
        _547 = ((_531 as Continue).0: ());
        _530 = _547;
        StorageDead(_547);
        _641 = discriminant(_531);
        StorageDead(_542);
        StorageDead(_538);
        StorageDead(_537);
        StorageDead(_531);
        StorageDead(_530);
        _76 = const ();
        goto -> bb291;
    }

    bb270: {
        StorageLive(_544);
        _544 = move ((_531 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_546);
        _546 = move _544;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _546) -> [return: bb271, unwind: bb308];
    }

    bb271: {
        StorageDead(_546);
        StorageDead(_544);
        _651 = discriminant(_531);
        StorageDead(_542);
        StorageDead(_538);
        StorageDead(_537);
        StorageDead(_531);
        StorageDead(_530);
        goto -> bb293;
    }

    bb272: {
        StorageLive(_548);
        StorageLive(_549);
        StorageLive(_550);
        StorageLive(_551);
        StorageLive(_552);
        StorageLive(_553);
        StorageLive(_554);
        StorageLive(_555);
        StorageLive(_556);
        StorageLive(_557);
        _557 = &mut (*_15);
        _556 = <RefMut<'_, state::lending_market::LendingMarket> as DerefMut>::deref_mut(move _557) -> [return: bb273, unwind: bb304];
    }

    bb273: {
        StorageDead(_557);
        _555 = &mut ((*_556).27: u8);
        _554 = &mut (*_555);
        _553 = for_field::<u8>(move _554) -> [return: bb274, unwind: bb304];
    }

    bb274: {
        StorageDead(_554);
        _552 = ConfigItemUpdater::<'_, u8, u8, for<'a> fn(&'a mut u8, u8) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u8>}, for<'t, 'a> fn(&'t u8, &'a u8) -> std::result::Result<std::option::Option<&'t u8>, anchor_lang::error::Error> {get_field_directly::<u8>}, for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<u8>}, for<'a, 'b, 'c> fn(&'a u8, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u8>}>::named::<&str>(move _553, const "&mut market.immutable") -> [return: bb275, unwind: bb304];
    }

    bb275: {
        StorageDead(_553);
        _551 = ConfigItemUpdater::<'_, u8, u8, for<'a> fn(&'a mut u8, u8) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u8>}, for<'t, 'a> fn(&'t u8, &'a u8) -> std::result::Result<std::option::Option<&'t u8>, anchor_lang::error::Error> {get_field_directly::<u8>}, for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<u8>}, for<'a, 'b, 'c> fn(&'a u8, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u8>}>::validating::<for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {check_bool::<u8>}>(move _552, check_bool::<u8>) -> [return: bb276, unwind: bb304];
    }

    bb276: {
        StorageDead(_552);
        StorageLive(_558);
        StorageLive(_559);
        StorageLive(_560);
        _560 = &_3;
        _559 = &(*_560);
        _558 = move _559 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_559);
        _550 = ConfigItemUpdater::<'_, u8, u8, for<'a> fn(&'a mut u8, u8) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u8>}, for<'t, 'a> fn(&'t u8, &'a u8) -> std::result::Result<std::option::Option<&'t u8>, anchor_lang::error::Error> {get_field_directly::<u8>}, for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {check_bool::<u8>}, for<'a, 'b, 'c> fn(&'a u8, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u8>}>::set(move _551, move _558) -> [return: bb277, unwind: bb304];
    }

    bb277: {
        StorageDead(_558);
        StorageDead(_551);
        _549 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _550) -> [return: bb278, unwind: bb304];
    }

    bb278: {
        StorageDead(_550);
        _561 = discriminant(_549);
        switchInt(move _561) -> [0: bb279, 1: bb280, otherwise: bb5];
    }

    bb279: {
        StorageLive(_565);
        _565 = ((_549 as Continue).0: ());
        _548 = _565;
        StorageDead(_565);
        _643 = discriminant(_549);
        StorageDead(_560);
        StorageDead(_556);
        StorageDead(_555);
        StorageDead(_549);
        StorageDead(_548);
        _76 = const ();
        goto -> bb291;
    }

    bb280: {
        StorageLive(_562);
        _562 = move ((_549 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_564);
        _564 = move _562;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _564) -> [return: bb281, unwind: bb307];
    }

    bb281: {
        StorageDead(_564);
        StorageDead(_562);
        _649 = discriminant(_549);
        StorageDead(_560);
        StorageDead(_556);
        StorageDead(_555);
        StorageDead(_549);
        StorageDead(_548);
        goto -> bb293;
    }

    bb282: {
        StorageDead(_575);
        _573 = &mut ((*_574).28: u8);
        _572 = &mut (*_573);
        _571 = for_field::<u8>(move _572) -> [return: bb283, unwind: bb304];
    }

    bb283: {
        StorageDead(_572);
        _570 = ConfigItemUpdater::<'_, u8, u8, for<'a> fn(&'a mut u8, u8) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u8>}, for<'t, 'a> fn(&'t u8, &'a u8) -> std::result::Result<std::option::Option<&'t u8>, anchor_lang::error::Error> {get_field_directly::<u8>}, for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<u8>}, for<'a, 'b, 'c> fn(&'a u8, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u8>}>::named::<&str>(move _571, const "&mut market.obligation_order_creation_enabled") -> [return: bb284, unwind: bb304];
    }

    bb284: {
        StorageDead(_571);
        _569 = ConfigItemUpdater::<'_, u8, u8, for<'a> fn(&'a mut u8, u8) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u8>}, for<'t, 'a> fn(&'t u8, &'a u8) -> std::result::Result<std::option::Option<&'t u8>, anchor_lang::error::Error> {get_field_directly::<u8>}, for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<u8>}, for<'a, 'b, 'c> fn(&'a u8, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u8>}>::validating::<for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {check_bool::<u8>}>(move _570, check_bool::<u8>) -> [return: bb285, unwind: bb304];
    }

    bb285: {
        StorageDead(_570);
        StorageLive(_576);
        StorageLive(_577);
        StorageLive(_578);
        _578 = &_3;
        _577 = &(*_578);
        _576 = move _577 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_577);
        _568 = ConfigItemUpdater::<'_, u8, u8, for<'a> fn(&'a mut u8, u8) -> std::result::Result<(), anchor_lang::error::Error> {set_field_directly::<u8>}, for<'t, 'a> fn(&'t u8, &'a u8) -> std::result::Result<std::option::Option<&'t u8>, anchor_lang::error::Error> {get_field_directly::<u8>}, for<'a> fn(&'a u8) -> std::result::Result<(), anchor_lang::error::Error> {check_bool::<u8>}, for<'a, 'b, 'c> fn(&'a u8, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<u8>}>::set(move _569, move _576) -> [return: bb286, unwind: bb304];
    }

    bb286: {
        StorageDead(_576);
        StorageDead(_569);
        _567 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _568) -> [return: bb287, unwind: bb304];
    }

    bb287: {
        StorageDead(_568);
        _579 = discriminant(_567);
        switchInt(move _579) -> [0: bb288, 1: bb289, otherwise: bb5];
    }

    bb288: {
        StorageLive(_583);
        _583 = ((_567 as Continue).0: ());
        _566 = _583;
        StorageDead(_583);
        _645 = discriminant(_567);
        StorageDead(_578);
        StorageDead(_574);
        StorageDead(_573);
        StorageDead(_567);
        StorageDead(_566);
        _76 = const ();
        goto -> bb291;
    }

    bb289: {
        StorageLive(_580);
        _580 = move ((_567 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_582);
        _582 = move _580;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _582) -> [return: bb290, unwind: bb306];
    }

    bb290: {
        StorageDead(_582);
        StorageDead(_580);
        _647 = discriminant(_567);
        StorageDead(_578);
        StorageDead(_574);
        StorageDead(_573);
        StorageDead(_567);
        StorageDead(_566);
        goto -> bb293;
    }

    bb291: {
        StorageDead(_76);
        StorageLive(_584);
        _584 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _584);
        StorageDead(_584);
        drop(_16) -> [return: bb292, unwind: bb305];
    }

    bb292: {
        StorageDead(_16);
        StorageDead(_15);
        StorageDead(_4);
        goto -> bb297;
    }

    bb293: {
        StorageDead(_76);
        goto -> bb294;
    }

    bb294: {
        drop(_16) -> [return: bb295, unwind: bb305];
    }

    bb295: {
        StorageDead(_16);
        StorageDead(_15);
        goto -> bb296;
    }

    bb296: {
        StorageDead(_4);
        goto -> bb297;
    }

    bb297: {
        return;
    }

    bb298 (cleanup): {
        drop(_452) -> [return: bb304, unwind terminate(cleanup)];
    }

    bb299 (cleanup): {
        drop(_431) -> [return: bb304, unwind terminate(cleanup)];
    }

    bb300 (cleanup): {
        drop(_406) -> [return: bb304, unwind terminate(cleanup)];
    }

    bb301 (cleanup): {
        drop(_385) -> [return: bb304, unwind terminate(cleanup)];
    }

    bb302 (cleanup): {
        drop(_64) -> [return: bb304, unwind terminate(cleanup)];
    }

    bb303 (cleanup): {
        drop(_30) -> [return: bb304, unwind terminate(cleanup)];
    }

    bb304 (cleanup): {
        drop(_16) -> [return: bb305, unwind terminate(cleanup)];
    }

    bb305 (cleanup): {
        resume;
    }

    bb306 (cleanup): {
        _695 = discriminant(_567);
        goto -> bb304;
    }

    bb307 (cleanup): {
        _696 = discriminant(_549);
        goto -> bb304;
    }

    bb308 (cleanup): {
        _697 = discriminant(_531);
        goto -> bb304;
    }

    bb309 (cleanup): {
        _698 = discriminant(_512);
        goto -> bb304;
    }

    bb310 (cleanup): {
        drop(_515) -> [return: bb304, unwind terminate(cleanup)];
    }

    bb311 (cleanup): {
        switchInt(_596) -> [0: bb304, otherwise: bb310];
    }

    bb312 (cleanup): {
        _699 = discriminant(_494);
        goto -> bb304;
    }

    bb313 (cleanup): {
        _700 = discriminant(_476);
        goto -> bb304;
    }

    bb314 (cleanup): {
        _701 = discriminant(_364);
        goto -> bb304;
    }

    bb315 (cleanup): {
        _702 = discriminant(_347);
        goto -> bb304;
    }

    bb316 (cleanup): {
        _703 = discriminant(_329);
        goto -> bb304;
    }

    bb317 (cleanup): {
        _704 = discriminant(_311);
        goto -> bb304;
    }

    bb318 (cleanup): {
        _705 = discriminant(_293);
        goto -> bb304;
    }

    bb319 (cleanup): {
        _706 = discriminant(_275);
        goto -> bb304;
    }

    bb320 (cleanup): {
        _707 = discriminant(_257);
        goto -> bb304;
    }

    bb321 (cleanup): {
        _708 = discriminant(_231);
        goto -> bb304;
    }

    bb322 (cleanup): {
        _709 = discriminant(_211);
        goto -> bb304;
    }

    bb323 (cleanup): {
        drop(_214) -> [return: bb304, unwind terminate(cleanup)];
    }

    bb324 (cleanup): {
        switchInt(_597) -> [0: bb304, otherwise: bb323];
    }

    bb325 (cleanup): {
        _710 = discriminant(_194);
        goto -> bb304;
    }

    bb326 (cleanup): {
        _711 = discriminant(_176);
        goto -> bb304;
    }

    bb327 (cleanup): {
        _712 = discriminant(_152);
        goto -> bb304;
    }

    bb328 (cleanup): {
        _713 = discriminant(_134);
        goto -> bb304;
    }

    bb329 (cleanup): {
        _714 = discriminant(_114);
        goto -> bb304;
    }

    bb330 (cleanup): {
        drop(_117) -> [return: bb304, unwind terminate(cleanup)];
    }

    bb331 (cleanup): {
        switchInt(_598) -> [0: bb304, otherwise: bb330];
    }

    bb332 (cleanup): {
        _715 = discriminant(_96);
        goto -> bb304;
    }

    bb333 (cleanup): {
        _716 = discriminant(_79);
        goto -> bb304;
    }

    bb334 (cleanup): {
        _717 = discriminant(_17);
        goto -> bb305;
    }

    bb335 (cleanup): {
        _718 = discriminant(_5);
        goto -> bb305;
    }
}
