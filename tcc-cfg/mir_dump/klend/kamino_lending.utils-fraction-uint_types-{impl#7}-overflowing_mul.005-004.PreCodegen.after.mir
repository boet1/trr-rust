// MIR for `uint_types::<impl at C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.5\src\uint.rs:573:3: 573:13>::overflowing_mul` after PreCodegen

fn uint_types::<impl at C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.5\src\uint.rs:573:3: 573:13>::overflowing_mul(_1: uint_types::U256, _2: uint_types::U256) -> (uint_types::U256, bool) {
    debug self => _1;
    debug other => _2;
    let mut _0: (utils::fraction::uint_types::U256, bool);
    let _3: [u64; 8];
    let _7: ();
    let _8: ();
    let mut _9: bool;
    let _12: usize;
    let mut _13: usize;
    let mut _14: bool;
    let _15: ();
    let mut _16: bool;
    let mut _17: bool;
    let mut _18: &{closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.5\src\uint.rs:257:67: 257:73};
    let _19: {closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.5\src\uint.rs:257:67: 257:73};
    let mut _20: (u64, u64);
    let mut _21: u64;
    let _22: usize;
    let mut _23: usize;
    let mut _24: bool;
    let mut _25: u64;
    let _27: usize;
    let mut _28: usize;
    let mut _29: bool;
    let mut _32: (u64, u64);
    let mut _33: u128;
    let mut _34: u128;
    let mut _35: u64;
    let mut _36: u128;
    let mut _37: u64;
    let mut _38: (u128, bool);
    let _41: usize;
    let mut _42: (usize, bool);
    let mut _43: usize;
    let mut _44: bool;
    let mut _47: (u64, bool);
    let mut _48: u64;
    let mut _49: u64;
    let mut _50: u64;
    let mut _51: u64;
    let _53: usize;
    let mut _54: usize;
    let mut _55: (usize, bool);
    let mut _56: (usize, bool);
    let mut _57: usize;
    let mut _58: bool;
    let mut _60: u64;
    let mut _61: u64;
    let mut _62: bool;
    let mut _63: (u64, bool);
    let mut _66: (u64, bool);
    let mut _67: u64;
    let mut _68: u64;
    let mut _71: (u64, bool);
    let mut _72: u64;
    let mut _73: u64;
    let mut _74: u64;
    let mut _75: bool;
    let mut _76: bool;
    let mut _77: bool;
    let _78: ();
    let mut _79: bool;
    let mut _80: bool;
    let mut _81: &{closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.5\src\uint.rs:257:67: 257:73};
    let _82: {closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.5\src\uint.rs:257:67: 257:73};
    let mut _83: (u64, u64);
    let mut _84: u64;
    let _85: usize;
    let mut _86: usize;
    let mut _87: bool;
    let mut _88: u64;
    let _90: usize;
    let mut _91: usize;
    let mut _92: bool;
    let mut _95: (u64, u64);
    let mut _96: u128;
    let mut _97: u128;
    let mut _98: u64;
    let mut _99: u128;
    let mut _100: u64;
    let mut _101: (u128, bool);
    let _104: usize;
    let mut _105: (usize, bool);
    let mut _106: usize;
    let mut _107: bool;
    let mut _110: (u64, bool);
    let mut _111: u64;
    let mut _112: u64;
    let mut _113: u64;
    let mut _114: u64;
    let _116: usize;
    let mut _117: usize;
    let mut _118: (usize, bool);
    let mut _119: (usize, bool);
    let mut _120: usize;
    let mut _121: bool;
    let mut _123: u64;
    let mut _124: u64;
    let mut _125: bool;
    let mut _126: (u64, bool);
    let mut _129: (u64, bool);
    let mut _130: u64;
    let mut _131: u64;
    let mut _134: (u64, bool);
    let mut _135: u64;
    let mut _136: u64;
    let mut _137: u64;
    let mut _138: bool;
    let mut _139: bool;
    let mut _140: bool;
    let _141: ();
    let mut _142: bool;
    let mut _143: bool;
    let mut _144: &{closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.5\src\uint.rs:257:67: 257:73};
    let _145: {closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.5\src\uint.rs:257:67: 257:73};
    let mut _146: (u64, u64);
    let mut _147: u64;
    let _148: usize;
    let mut _149: usize;
    let mut _150: bool;
    let mut _151: u64;
    let _153: usize;
    let mut _154: usize;
    let mut _155: bool;
    let mut _158: (u64, u64);
    let mut _159: u128;
    let mut _160: u128;
    let mut _161: u64;
    let mut _162: u128;
    let mut _163: u64;
    let mut _164: (u128, bool);
    let _167: usize;
    let mut _168: (usize, bool);
    let mut _169: usize;
    let mut _170: bool;
    let mut _173: (u64, bool);
    let mut _174: u64;
    let mut _175: u64;
    let mut _176: u64;
    let mut _177: u64;
    let _179: usize;
    let mut _180: usize;
    let mut _181: (usize, bool);
    let mut _182: (usize, bool);
    let mut _183: usize;
    let mut _184: bool;
    let mut _186: u64;
    let mut _187: u64;
    let mut _188: bool;
    let mut _189: (u64, bool);
    let mut _192: (u64, bool);
    let mut _193: u64;
    let mut _194: u64;
    let mut _197: (u64, bool);
    let mut _198: u64;
    let mut _199: u64;
    let mut _200: u64;
    let mut _201: bool;
    let mut _202: bool;
    let mut _203: bool;
    let _204: ();
    let mut _205: bool;
    let mut _206: bool;
    let mut _207: &{closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.5\src\uint.rs:257:67: 257:73};
    let _208: {closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.5\src\uint.rs:257:67: 257:73};
    let mut _209: (u64, u64);
    let mut _210: u64;
    let _211: usize;
    let mut _212: usize;
    let mut _213: bool;
    let mut _214: u64;
    let _216: usize;
    let mut _217: usize;
    let mut _218: bool;
    let mut _221: (u64, u64);
    let mut _222: u128;
    let mut _223: u128;
    let mut _224: u64;
    let mut _225: u128;
    let mut _226: u64;
    let mut _227: (u128, bool);
    let _230: usize;
    let mut _231: (usize, bool);
    let mut _232: usize;
    let mut _233: bool;
    let mut _236: (u64, bool);
    let mut _237: u64;
    let mut _238: u64;
    let mut _239: u64;
    let mut _240: u64;
    let _242: usize;
    let mut _243: usize;
    let mut _244: (usize, bool);
    let mut _245: (usize, bool);
    let mut _246: usize;
    let mut _247: bool;
    let mut _249: u64;
    let mut _250: u64;
    let mut _251: bool;
    let mut _252: (u64, bool);
    let mut _255: (u64, bool);
    let mut _256: u64;
    let mut _257: u64;
    let mut _260: (u64, bool);
    let mut _261: u64;
    let mut _262: u64;
    let mut _263: u64;
    let mut _264: bool;
    let mut _265: bool;
    let mut _266: bool;
    let _267: ();
    let mut _268: bool;
    let _271: usize;
    let mut _272: usize;
    let mut _273: bool;
    let _274: ();
    let mut _275: bool;
    let mut _276: bool;
    let mut _277: &{closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.5\src\uint.rs:257:67: 257:73};
    let _278: {closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.5\src\uint.rs:257:67: 257:73};
    let mut _279: (u64, u64);
    let mut _280: u64;
    let _281: usize;
    let mut _282: usize;
    let mut _283: bool;
    let mut _284: u64;
    let _286: usize;
    let mut _287: usize;
    let mut _288: bool;
    let mut _291: (u64, u64);
    let mut _292: u128;
    let mut _293: u128;
    let mut _294: u64;
    let mut _295: u128;
    let mut _296: u64;
    let mut _297: (u128, bool);
    let _300: usize;
    let mut _301: (usize, bool);
    let mut _302: usize;
    let mut _303: bool;
    let mut _306: (u64, bool);
    let mut _307: u64;
    let mut _308: u64;
    let mut _309: u64;
    let mut _310: u64;
    let _312: usize;
    let mut _313: usize;
    let mut _314: (usize, bool);
    let mut _315: (usize, bool);
    let mut _316: usize;
    let mut _317: bool;
    let mut _319: u64;
    let mut _320: u64;
    let mut _321: bool;
    let mut _322: (u64, bool);
    let mut _325: (u64, bool);
    let mut _326: u64;
    let mut _327: u64;
    let mut _330: (u64, bool);
    let mut _331: u64;
    let mut _332: u64;
    let mut _333: u64;
    let mut _334: bool;
    let mut _335: bool;
    let mut _336: bool;
    let _337: ();
    let mut _338: bool;
    let mut _339: bool;
    let mut _340: &{closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.5\src\uint.rs:257:67: 257:73};
    let _341: {closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.5\src\uint.rs:257:67: 257:73};
    let mut _342: (u64, u64);
    let mut _343: u64;
    let _344: usize;
    let mut _345: usize;
    let mut _346: bool;
    let mut _347: u64;
    let _349: usize;
    let mut _350: usize;
    let mut _351: bool;
    let mut _354: (u64, u64);
    let mut _355: u128;
    let mut _356: u128;
    let mut _357: u64;
    let mut _358: u128;
    let mut _359: u64;
    let mut _360: (u128, bool);
    let _363: usize;
    let mut _364: (usize, bool);
    let mut _365: usize;
    let mut _366: bool;
    let mut _369: (u64, bool);
    let mut _370: u64;
    let mut _371: u64;
    let mut _372: u64;
    let mut _373: u64;
    let _375: usize;
    let mut _376: usize;
    let mut _377: (usize, bool);
    let mut _378: (usize, bool);
    let mut _379: usize;
    let mut _380: bool;
    let mut _382: u64;
    let mut _383: u64;
    let mut _384: bool;
    let mut _385: (u64, bool);
    let mut _388: (u64, bool);
    let mut _389: u64;
    let mut _390: u64;
    let mut _393: (u64, bool);
    let mut _394: u64;
    let mut _395: u64;
    let mut _396: u64;
    let mut _397: bool;
    let mut _398: bool;
    let mut _399: bool;
    let _400: ();
    let mut _401: bool;
    let mut _402: bool;
    let mut _403: &{closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.5\src\uint.rs:257:67: 257:73};
    let _404: {closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.5\src\uint.rs:257:67: 257:73};
    let mut _405: (u64, u64);
    let mut _406: u64;
    let _407: usize;
    let mut _408: usize;
    let mut _409: bool;
    let mut _410: u64;
    let _412: usize;
    let mut _413: usize;
    let mut _414: bool;
    let mut _417: (u64, u64);
    let mut _418: u128;
    let mut _419: u128;
    let mut _420: u64;
    let mut _421: u128;
    let mut _422: u64;
    let mut _423: (u128, bool);
    let _426: usize;
    let mut _427: (usize, bool);
    let mut _428: usize;
    let mut _429: bool;
    let mut _432: (u64, bool);
    let mut _433: u64;
    let mut _434: u64;
    let mut _435: u64;
    let mut _436: u64;
    let _438: usize;
    let mut _439: usize;
    let mut _440: (usize, bool);
    let mut _441: (usize, bool);
    let mut _442: usize;
    let mut _443: bool;
    let mut _445: u64;
    let mut _446: u64;
    let mut _447: bool;
    let mut _448: (u64, bool);
    let mut _451: (u64, bool);
    let mut _452: u64;
    let mut _453: u64;
    let mut _456: (u64, bool);
    let mut _457: u64;
    let mut _458: u64;
    let mut _459: u64;
    let mut _460: bool;
    let mut _461: bool;
    let mut _462: bool;
    let _463: ();
    let mut _464: bool;
    let mut _465: bool;
    let mut _466: &{closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.5\src\uint.rs:257:67: 257:73};
    let _467: {closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.5\src\uint.rs:257:67: 257:73};
    let mut _468: (u64, u64);
    let mut _469: u64;
    let _470: usize;
    let mut _471: usize;
    let mut _472: bool;
    let mut _473: u64;
    let _475: usize;
    let mut _476: usize;
    let mut _477: bool;
    let mut _480: (u64, u64);
    let mut _481: u128;
    let mut _482: u128;
    let mut _483: u64;
    let mut _484: u128;
    let mut _485: u64;
    let mut _486: (u128, bool);
    let _489: usize;
    let mut _490: (usize, bool);
    let mut _491: usize;
    let mut _492: bool;
    let mut _495: (u64, bool);
    let mut _496: u64;
    let mut _497: u64;
    let mut _498: u64;
    let mut _499: u64;
    let _501: usize;
    let mut _502: usize;
    let mut _503: (usize, bool);
    let mut _504: (usize, bool);
    let mut _505: usize;
    let mut _506: bool;
    let mut _508: u64;
    let mut _509: u64;
    let mut _510: bool;
    let mut _511: (u64, bool);
    let mut _514: (u64, bool);
    let mut _515: u64;
    let mut _516: u64;
    let mut _519: (u64, bool);
    let mut _520: u64;
    let mut _521: u64;
    let mut _522: u64;
    let mut _523: bool;
    let mut _524: bool;
    let mut _525: bool;
    let _526: ();
    let mut _527: bool;
    let _530: usize;
    let mut _531: usize;
    let mut _532: bool;
    let _533: ();
    let mut _534: bool;
    let mut _535: bool;
    let mut _536: &{closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.5\src\uint.rs:257:67: 257:73};
    let _537: {closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.5\src\uint.rs:257:67: 257:73};
    let mut _538: (u64, u64);
    let mut _539: u64;
    let _540: usize;
    let mut _541: usize;
    let mut _542: bool;
    let mut _543: u64;
    let _545: usize;
    let mut _546: usize;
    let mut _547: bool;
    let mut _550: (u64, u64);
    let mut _551: u128;
    let mut _552: u128;
    let mut _553: u64;
    let mut _554: u128;
    let mut _555: u64;
    let mut _556: (u128, bool);
    let _559: usize;
    let mut _560: (usize, bool);
    let mut _561: usize;
    let mut _562: bool;
    let mut _565: (u64, bool);
    let mut _566: u64;
    let mut _567: u64;
    let mut _568: u64;
    let mut _569: u64;
    let _571: usize;
    let mut _572: usize;
    let mut _573: (usize, bool);
    let mut _574: (usize, bool);
    let mut _575: usize;
    let mut _576: bool;
    let mut _578: u64;
    let mut _579: u64;
    let mut _580: bool;
    let mut _581: (u64, bool);
    let mut _584: (u64, bool);
    let mut _585: u64;
    let mut _586: u64;
    let mut _589: (u64, bool);
    let mut _590: u64;
    let mut _591: u64;
    let mut _592: u64;
    let mut _593: bool;
    let mut _594: bool;
    let mut _595: bool;
    let _596: ();
    let mut _597: bool;
    let mut _598: bool;
    let mut _599: &{closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.5\src\uint.rs:257:67: 257:73};
    let _600: {closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.5\src\uint.rs:257:67: 257:73};
    let mut _601: (u64, u64);
    let mut _602: u64;
    let _603: usize;
    let mut _604: usize;
    let mut _605: bool;
    let mut _606: u64;
    let _608: usize;
    let mut _609: usize;
    let mut _610: bool;
    let mut _613: (u64, u64);
    let mut _614: u128;
    let mut _615: u128;
    let mut _616: u64;
    let mut _617: u128;
    let mut _618: u64;
    let mut _619: (u128, bool);
    let _622: usize;
    let mut _623: (usize, bool);
    let mut _624: usize;
    let mut _625: bool;
    let mut _628: (u64, bool);
    let mut _629: u64;
    let mut _630: u64;
    let mut _631: u64;
    let mut _632: u64;
    let _634: usize;
    let mut _635: usize;
    let mut _636: (usize, bool);
    let mut _637: (usize, bool);
    let mut _638: usize;
    let mut _639: bool;
    let mut _641: u64;
    let mut _642: u64;
    let mut _643: bool;
    let mut _644: (u64, bool);
    let mut _647: (u64, bool);
    let mut _648: u64;
    let mut _649: u64;
    let mut _652: (u64, bool);
    let mut _653: u64;
    let mut _654: u64;
    let mut _655: u64;
    let mut _656: bool;
    let mut _657: bool;
    let mut _658: bool;
    let _659: ();
    let mut _660: bool;
    let mut _661: bool;
    let mut _662: &{closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.5\src\uint.rs:257:67: 257:73};
    let _663: {closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.5\src\uint.rs:257:67: 257:73};
    let mut _664: (u64, u64);
    let mut _665: u64;
    let _666: usize;
    let mut _667: usize;
    let mut _668: bool;
    let mut _669: u64;
    let _671: usize;
    let mut _672: usize;
    let mut _673: bool;
    let mut _676: (u64, u64);
    let mut _677: u128;
    let mut _678: u128;
    let mut _679: u64;
    let mut _680: u128;
    let mut _681: u64;
    let mut _682: (u128, bool);
    let _685: usize;
    let mut _686: (usize, bool);
    let mut _687: usize;
    let mut _688: bool;
    let mut _691: (u64, bool);
    let mut _692: u64;
    let mut _693: u64;
    let mut _694: u64;
    let mut _695: u64;
    let _697: usize;
    let mut _698: usize;
    let mut _699: (usize, bool);
    let mut _700: (usize, bool);
    let mut _701: usize;
    let mut _702: bool;
    let mut _704: u64;
    let mut _705: u64;
    let mut _706: bool;
    let mut _707: (u64, bool);
    let mut _710: (u64, bool);
    let mut _711: u64;
    let mut _712: u64;
    let mut _715: (u64, bool);
    let mut _716: u64;
    let mut _717: u64;
    let mut _718: u64;
    let mut _719: bool;
    let mut _720: bool;
    let mut _721: bool;
    let _722: ();
    let mut _723: bool;
    let mut _724: bool;
    let mut _725: &{closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.5\src\uint.rs:257:67: 257:73};
    let _726: {closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.5\src\uint.rs:257:67: 257:73};
    let mut _727: (u64, u64);
    let mut _728: u64;
    let _729: usize;
    let mut _730: usize;
    let mut _731: bool;
    let mut _732: u64;
    let _734: usize;
    let mut _735: usize;
    let mut _736: bool;
    let mut _739: (u64, u64);
    let mut _740: u128;
    let mut _741: u128;
    let mut _742: u64;
    let mut _743: u128;
    let mut _744: u64;
    let mut _745: (u128, bool);
    let _748: usize;
    let mut _749: (usize, bool);
    let mut _750: usize;
    let mut _751: bool;
    let mut _754: (u64, bool);
    let mut _755: u64;
    let mut _756: u64;
    let mut _757: u64;
    let mut _758: u64;
    let _760: usize;
    let mut _761: usize;
    let mut _762: (usize, bool);
    let mut _763: (usize, bool);
    let mut _764: usize;
    let mut _765: bool;
    let mut _767: u64;
    let mut _768: u64;
    let mut _769: bool;
    let mut _770: (u64, bool);
    let mut _773: (u64, bool);
    let mut _774: u64;
    let mut _775: u64;
    let mut _778: (u64, bool);
    let mut _779: u64;
    let mut _780: u64;
    let mut _781: u64;
    let mut _782: bool;
    let mut _783: bool;
    let mut _784: bool;
    let _785: ();
    let mut _786: bool;
    let _789: usize;
    let mut _790: usize;
    let mut _791: bool;
    let _792: ();
    let mut _793: bool;
    let mut _794: bool;
    let mut _795: &{closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.5\src\uint.rs:257:67: 257:73};
    let _796: {closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.5\src\uint.rs:257:67: 257:73};
    let mut _797: (u64, u64);
    let mut _798: u64;
    let _799: usize;
    let mut _800: usize;
    let mut _801: bool;
    let mut _802: u64;
    let _804: usize;
    let mut _805: usize;
    let mut _806: bool;
    let mut _809: (u64, u64);
    let mut _810: u128;
    let mut _811: u128;
    let mut _812: u64;
    let mut _813: u128;
    let mut _814: u64;
    let mut _815: (u128, bool);
    let _818: usize;
    let mut _819: (usize, bool);
    let mut _820: usize;
    let mut _821: bool;
    let mut _824: (u64, bool);
    let mut _825: u64;
    let mut _826: u64;
    let mut _827: u64;
    let mut _828: u64;
    let _830: usize;
    let mut _831: usize;
    let mut _832: (usize, bool);
    let mut _833: (usize, bool);
    let mut _834: usize;
    let mut _835: bool;
    let mut _837: u64;
    let mut _838: u64;
    let mut _839: bool;
    let mut _840: (u64, bool);
    let mut _843: (u64, bool);
    let mut _844: u64;
    let mut _845: u64;
    let mut _848: (u64, bool);
    let mut _849: u64;
    let mut _850: u64;
    let mut _851: u64;
    let mut _852: bool;
    let mut _853: bool;
    let mut _854: bool;
    let _855: ();
    let mut _856: bool;
    let mut _857: bool;
    let mut _858: &{closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.5\src\uint.rs:257:67: 257:73};
    let _859: {closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.5\src\uint.rs:257:67: 257:73};
    let mut _860: (u64, u64);
    let mut _861: u64;
    let _862: usize;
    let mut _863: usize;
    let mut _864: bool;
    let mut _865: u64;
    let _867: usize;
    let mut _868: usize;
    let mut _869: bool;
    let mut _872: (u64, u64);
    let mut _873: u128;
    let mut _874: u128;
    let mut _875: u64;
    let mut _876: u128;
    let mut _877: u64;
    let mut _878: (u128, bool);
    let _881: usize;
    let mut _882: (usize, bool);
    let mut _883: usize;
    let mut _884: bool;
    let mut _887: (u64, bool);
    let mut _888: u64;
    let mut _889: u64;
    let mut _890: u64;
    let mut _891: u64;
    let _893: usize;
    let mut _894: usize;
    let mut _895: (usize, bool);
    let mut _896: (usize, bool);
    let mut _897: usize;
    let mut _898: bool;
    let mut _900: u64;
    let mut _901: u64;
    let mut _902: bool;
    let mut _903: (u64, bool);
    let mut _906: (u64, bool);
    let mut _907: u64;
    let mut _908: u64;
    let mut _911: (u64, bool);
    let mut _912: u64;
    let mut _913: u64;
    let mut _914: u64;
    let mut _915: bool;
    let mut _916: bool;
    let mut _917: bool;
    let _918: ();
    let mut _919: bool;
    let mut _920: bool;
    let mut _921: &{closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.5\src\uint.rs:257:67: 257:73};
    let _922: {closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.5\src\uint.rs:257:67: 257:73};
    let mut _923: (u64, u64);
    let mut _924: u64;
    let _925: usize;
    let mut _926: usize;
    let mut _927: bool;
    let mut _928: u64;
    let _930: usize;
    let mut _931: usize;
    let mut _932: bool;
    let mut _935: (u64, u64);
    let mut _936: u128;
    let mut _937: u128;
    let mut _938: u64;
    let mut _939: u128;
    let mut _940: u64;
    let mut _941: (u128, bool);
    let _944: usize;
    let mut _945: (usize, bool);
    let mut _946: usize;
    let mut _947: bool;
    let mut _950: (u64, bool);
    let mut _951: u64;
    let mut _952: u64;
    let mut _953: u64;
    let mut _954: u64;
    let _956: usize;
    let mut _957: usize;
    let mut _958: (usize, bool);
    let mut _959: (usize, bool);
    let mut _960: usize;
    let mut _961: bool;
    let mut _963: u64;
    let mut _964: u64;
    let mut _965: bool;
    let mut _966: (u64, bool);
    let mut _969: (u64, bool);
    let mut _970: u64;
    let mut _971: u64;
    let mut _974: (u64, bool);
    let mut _975: u64;
    let mut _976: u64;
    let mut _977: u64;
    let mut _978: bool;
    let mut _979: bool;
    let mut _980: bool;
    let _981: ();
    let mut _982: bool;
    let mut _983: bool;
    let mut _984: &{closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.5\src\uint.rs:257:67: 257:73};
    let _985: {closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.5\src\uint.rs:257:67: 257:73};
    let mut _986: (u64, u64);
    let mut _987: u64;
    let _988: usize;
    let mut _989: usize;
    let mut _990: bool;
    let mut _991: u64;
    let _993: usize;
    let mut _994: usize;
    let mut _995: bool;
    let mut _998: (u64, u64);
    let mut _999: u128;
    let mut _1000: u128;
    let mut _1001: u64;
    let mut _1002: u128;
    let mut _1003: u64;
    let mut _1004: (u128, bool);
    let _1007: usize;
    let mut _1008: (usize, bool);
    let mut _1009: usize;
    let mut _1010: bool;
    let mut _1013: (u64, bool);
    let mut _1014: u64;
    let mut _1015: u64;
    let mut _1016: u64;
    let mut _1017: u64;
    let _1019: usize;
    let mut _1020: usize;
    let mut _1021: (usize, bool);
    let mut _1022: (usize, bool);
    let mut _1023: usize;
    let mut _1024: bool;
    let mut _1026: u64;
    let mut _1027: u64;
    let mut _1028: bool;
    let mut _1029: (u64, bool);
    let mut _1032: (u64, bool);
    let mut _1033: u64;
    let mut _1034: u64;
    let mut _1037: (u64, bool);
    let mut _1038: u64;
    let mut _1039: u64;
    let mut _1040: u64;
    let mut _1041: bool;
    let mut _1042: bool;
    let mut _1043: bool;
    let mut _1045: [u64; 8];
    let mut _1046: utils::fraction::uint_types::U256;
    let mut _1047: [u64; 4];
    let _1048: usize;
    let mut _1049: usize;
    let mut _1050: bool;
    let mut _1051: bool;
    let mut _1052: &[u64; 4];
    let _1053: &[u64; 4];
    let _1054: usize;
    let mut _1055: usize;
    let mut _1056: bool;
    scope 1 {
        debug ret => _3;
        let _1044: [[u64; 4]; 2];
        scope 163 {
            debug ret => _1044;
        }
        scope 164 {
        }
    }
    scope 2 {
        let _4: &[u64; 4];
        scope 3 {
            debug me => _4;
            let _5: &[u64; 4];
            scope 4 {
                debug you => _5;
                let mut _6: [u64; 8];
                scope 5 {
                    debug ret => _6;
                    scope 6 {
                        let mut _10: u64;
                        let mut _269: u64;
                        let mut _528: u64;
                        let mut _787: u64;
                        scope 7 {
                            debug carry => _10;
                            let _11: u64;
                            scope 8 {
                                debug b => _11;
                                scope 9 {
                                    let _26: u64;
                                    let _89: u64;
                                    let _152: u64;
                                    let _215: u64;
                                    let mut _1069: &{closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.5\src\uint.rs:257:67: 257:73};
                                    let mut _1070: &{closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.5\src\uint.rs:257:67: 257:73};
                                    let mut _1071: &{closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.5\src\uint.rs:257:67: 257:73};
                                    let mut _1072: &{closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.5\src\uint.rs:257:67: 257:73};
                                    scope 10 {
                                        debug a => _26;
                                        let _30: u64;
                                        let _31: u64;
                                        scope 11 {
                                            debug hi => _30;
                                            debug low => _31;
                                            let _39: bool;
                                            let _40: &mut u64;
                                            scope 12 {
                                                debug overflow => _39;
                                                let _52: &mut u64;
                                                scope 15 {
                                                    debug existing_hi => _52;
                                                    let _59: u64;
                                                    scope 16 {
                                                        debug hi => _59;
                                                        let _64: u64;
                                                        let _65: bool;
                                                        scope 17 {
                                                            debug hi => _64;
                                                            debug o0 => _65;
                                                            let _69: u64;
                                                            let _70: bool;
                                                            scope 18 {
                                                                debug hi => _69;
                                                                debug o1 => _70;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            scope 13 {
                                                debug existing_low => _40;
                                                let _45: u64;
                                                let _46: bool;
                                                scope 14 {
                                                    debug low => _45;
                                                    debug o => _46;
                                                }
                                            }
                                        }
                                    }
                                    scope 19 {
                                        debug a => _89;
                                        let _93: u64;
                                        let _94: u64;
                                        scope 20 {
                                            debug hi => _93;
                                            debug low => _94;
                                            let _102: bool;
                                            let _103: &mut u64;
                                            scope 21 {
                                                debug overflow => _102;
                                                let _115: &mut u64;
                                                scope 24 {
                                                    debug existing_hi => _115;
                                                    let _122: u64;
                                                    scope 25 {
                                                        debug hi => _122;
                                                        let _127: u64;
                                                        let _128: bool;
                                                        scope 26 {
                                                            debug hi => _127;
                                                            debug o0 => _128;
                                                            let _132: u64;
                                                            let _133: bool;
                                                            scope 27 {
                                                                debug hi => _132;
                                                                debug o1 => _133;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            scope 22 {
                                                debug existing_low => _103;
                                                let _108: u64;
                                                let _109: bool;
                                                scope 23 {
                                                    debug low => _108;
                                                    debug o => _109;
                                                }
                                            }
                                        }
                                    }
                                    scope 28 {
                                        debug a => _152;
                                        let _156: u64;
                                        let _157: u64;
                                        scope 29 {
                                            debug hi => _156;
                                            debug low => _157;
                                            let _165: bool;
                                            let _166: &mut u64;
                                            scope 30 {
                                                debug overflow => _165;
                                                let _178: &mut u64;
                                                scope 33 {
                                                    debug existing_hi => _178;
                                                    let _185: u64;
                                                    scope 34 {
                                                        debug hi => _185;
                                                        let _190: u64;
                                                        let _191: bool;
                                                        scope 35 {
                                                            debug hi => _190;
                                                            debug o0 => _191;
                                                            let _195: u64;
                                                            let _196: bool;
                                                            scope 36 {
                                                                debug hi => _195;
                                                                debug o1 => _196;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            scope 31 {
                                                debug existing_low => _166;
                                                let _171: u64;
                                                let _172: bool;
                                                scope 32 {
                                                    debug low => _171;
                                                    debug o => _172;
                                                }
                                            }
                                        }
                                    }
                                    scope 37 {
                                        debug a => _215;
                                        let _219: u64;
                                        let _220: u64;
                                        scope 38 {
                                            debug hi => _219;
                                            debug low => _220;
                                            let _228: bool;
                                            let _229: &mut u64;
                                            scope 39 {
                                                debug overflow => _228;
                                                let _241: &mut u64;
                                                scope 42 {
                                                    debug existing_hi => _241;
                                                    let _248: u64;
                                                    scope 43 {
                                                        debug hi => _248;
                                                        let _253: u64;
                                                        let _254: bool;
                                                        scope 44 {
                                                            debug hi => _253;
                                                            debug o0 => _254;
                                                            let _258: u64;
                                                            let _259: bool;
                                                            scope 45 {
                                                                debug hi => _258;
                                                                debug o1 => _259;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            scope 40 {
                                                debug existing_low => _229;
                                                let _234: u64;
                                                let _235: bool;
                                                scope 41 {
                                                    debug low => _234;
                                                    debug o => _235;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        scope 46 {
                            debug carry => _269;
                            let _270: u64;
                            scope 47 {
                                debug b => _270;
                                scope 48 {
                                    let _285: u64;
                                    let _348: u64;
                                    let _411: u64;
                                    let _474: u64;
                                    let mut _1065: &{closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.5\src\uint.rs:257:67: 257:73};
                                    let mut _1066: &{closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.5\src\uint.rs:257:67: 257:73};
                                    let mut _1067: &{closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.5\src\uint.rs:257:67: 257:73};
                                    let mut _1068: &{closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.5\src\uint.rs:257:67: 257:73};
                                    scope 49 {
                                        debug a => _285;
                                        let _289: u64;
                                        let _290: u64;
                                        scope 50 {
                                            debug hi => _289;
                                            debug low => _290;
                                            let _298: bool;
                                            let _299: &mut u64;
                                            scope 51 {
                                                debug overflow => _298;
                                                let _311: &mut u64;
                                                scope 54 {
                                                    debug existing_hi => _311;
                                                    let _318: u64;
                                                    scope 55 {
                                                        debug hi => _318;
                                                        let _323: u64;
                                                        let _324: bool;
                                                        scope 56 {
                                                            debug hi => _323;
                                                            debug o0 => _324;
                                                            let _328: u64;
                                                            let _329: bool;
                                                            scope 57 {
                                                                debug hi => _328;
                                                                debug o1 => _329;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            scope 52 {
                                                debug existing_low => _299;
                                                let _304: u64;
                                                let _305: bool;
                                                scope 53 {
                                                    debug low => _304;
                                                    debug o => _305;
                                                }
                                            }
                                        }
                                    }
                                    scope 58 {
                                        debug a => _348;
                                        let _352: u64;
                                        let _353: u64;
                                        scope 59 {
                                            debug hi => _352;
                                            debug low => _353;
                                            let _361: bool;
                                            let _362: &mut u64;
                                            scope 60 {
                                                debug overflow => _361;
                                                let _374: &mut u64;
                                                scope 63 {
                                                    debug existing_hi => _374;
                                                    let _381: u64;
                                                    scope 64 {
                                                        debug hi => _381;
                                                        let _386: u64;
                                                        let _387: bool;
                                                        scope 65 {
                                                            debug hi => _386;
                                                            debug o0 => _387;
                                                            let _391: u64;
                                                            let _392: bool;
                                                            scope 66 {
                                                                debug hi => _391;
                                                                debug o1 => _392;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            scope 61 {
                                                debug existing_low => _362;
                                                let _367: u64;
                                                let _368: bool;
                                                scope 62 {
                                                    debug low => _367;
                                                    debug o => _368;
                                                }
                                            }
                                        }
                                    }
                                    scope 67 {
                                        debug a => _411;
                                        let _415: u64;
                                        let _416: u64;
                                        scope 68 {
                                            debug hi => _415;
                                            debug low => _416;
                                            let _424: bool;
                                            let _425: &mut u64;
                                            scope 69 {
                                                debug overflow => _424;
                                                let _437: &mut u64;
                                                scope 72 {
                                                    debug existing_hi => _437;
                                                    let _444: u64;
                                                    scope 73 {
                                                        debug hi => _444;
                                                        let _449: u64;
                                                        let _450: bool;
                                                        scope 74 {
                                                            debug hi => _449;
                                                            debug o0 => _450;
                                                            let _454: u64;
                                                            let _455: bool;
                                                            scope 75 {
                                                                debug hi => _454;
                                                                debug o1 => _455;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            scope 70 {
                                                debug existing_low => _425;
                                                let _430: u64;
                                                let _431: bool;
                                                scope 71 {
                                                    debug low => _430;
                                                    debug o => _431;
                                                }
                                            }
                                        }
                                    }
                                    scope 76 {
                                        debug a => _474;
                                        let _478: u64;
                                        let _479: u64;
                                        scope 77 {
                                            debug hi => _478;
                                            debug low => _479;
                                            let _487: bool;
                                            let _488: &mut u64;
                                            scope 78 {
                                                debug overflow => _487;
                                                let _500: &mut u64;
                                                scope 81 {
                                                    debug existing_hi => _500;
                                                    let _507: u64;
                                                    scope 82 {
                                                        debug hi => _507;
                                                        let _512: u64;
                                                        let _513: bool;
                                                        scope 83 {
                                                            debug hi => _512;
                                                            debug o0 => _513;
                                                            let _517: u64;
                                                            let _518: bool;
                                                            scope 84 {
                                                                debug hi => _517;
                                                                debug o1 => _518;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            scope 79 {
                                                debug existing_low => _488;
                                                let _493: u64;
                                                let _494: bool;
                                                scope 80 {
                                                    debug low => _493;
                                                    debug o => _494;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        scope 85 {
                            debug carry => _528;
                            let _529: u64;
                            scope 86 {
                                debug b => _529;
                                scope 87 {
                                    let _544: u64;
                                    let _607: u64;
                                    let _670: u64;
                                    let _733: u64;
                                    let mut _1061: &{closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.5\src\uint.rs:257:67: 257:73};
                                    let mut _1062: &{closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.5\src\uint.rs:257:67: 257:73};
                                    let mut _1063: &{closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.5\src\uint.rs:257:67: 257:73};
                                    let mut _1064: &{closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.5\src\uint.rs:257:67: 257:73};
                                    scope 88 {
                                        debug a => _544;
                                        let _548: u64;
                                        let _549: u64;
                                        scope 89 {
                                            debug hi => _548;
                                            debug low => _549;
                                            let _557: bool;
                                            let _558: &mut u64;
                                            scope 90 {
                                                debug overflow => _557;
                                                let _570: &mut u64;
                                                scope 93 {
                                                    debug existing_hi => _570;
                                                    let _577: u64;
                                                    scope 94 {
                                                        debug hi => _577;
                                                        let _582: u64;
                                                        let _583: bool;
                                                        scope 95 {
                                                            debug hi => _582;
                                                            debug o0 => _583;
                                                            let _587: u64;
                                                            let _588: bool;
                                                            scope 96 {
                                                                debug hi => _587;
                                                                debug o1 => _588;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            scope 91 {
                                                debug existing_low => _558;
                                                let _563: u64;
                                                let _564: bool;
                                                scope 92 {
                                                    debug low => _563;
                                                    debug o => _564;
                                                }
                                            }
                                        }
                                    }
                                    scope 97 {
                                        debug a => _607;
                                        let _611: u64;
                                        let _612: u64;
                                        scope 98 {
                                            debug hi => _611;
                                            debug low => _612;
                                            let _620: bool;
                                            let _621: &mut u64;
                                            scope 99 {
                                                debug overflow => _620;
                                                let _633: &mut u64;
                                                scope 102 {
                                                    debug existing_hi => _633;
                                                    let _640: u64;
                                                    scope 103 {
                                                        debug hi => _640;
                                                        let _645: u64;
                                                        let _646: bool;
                                                        scope 104 {
                                                            debug hi => _645;
                                                            debug o0 => _646;
                                                            let _650: u64;
                                                            let _651: bool;
                                                            scope 105 {
                                                                debug hi => _650;
                                                                debug o1 => _651;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            scope 100 {
                                                debug existing_low => _621;
                                                let _626: u64;
                                                let _627: bool;
                                                scope 101 {
                                                    debug low => _626;
                                                    debug o => _627;
                                                }
                                            }
                                        }
                                    }
                                    scope 106 {
                                        debug a => _670;
                                        let _674: u64;
                                        let _675: u64;
                                        scope 107 {
                                            debug hi => _674;
                                            debug low => _675;
                                            let _683: bool;
                                            let _684: &mut u64;
                                            scope 108 {
                                                debug overflow => _683;
                                                let _696: &mut u64;
                                                scope 111 {
                                                    debug existing_hi => _696;
                                                    let _703: u64;
                                                    scope 112 {
                                                        debug hi => _703;
                                                        let _708: u64;
                                                        let _709: bool;
                                                        scope 113 {
                                                            debug hi => _708;
                                                            debug o0 => _709;
                                                            let _713: u64;
                                                            let _714: bool;
                                                            scope 114 {
                                                                debug hi => _713;
                                                                debug o1 => _714;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            scope 109 {
                                                debug existing_low => _684;
                                                let _689: u64;
                                                let _690: bool;
                                                scope 110 {
                                                    debug low => _689;
                                                    debug o => _690;
                                                }
                                            }
                                        }
                                    }
                                    scope 115 {
                                        debug a => _733;
                                        let _737: u64;
                                        let _738: u64;
                                        scope 116 {
                                            debug hi => _737;
                                            debug low => _738;
                                            let _746: bool;
                                            let _747: &mut u64;
                                            scope 117 {
                                                debug overflow => _746;
                                                let _759: &mut u64;
                                                scope 120 {
                                                    debug existing_hi => _759;
                                                    let _766: u64;
                                                    scope 121 {
                                                        debug hi => _766;
                                                        let _771: u64;
                                                        let _772: bool;
                                                        scope 122 {
                                                            debug hi => _771;
                                                            debug o0 => _772;
                                                            let _776: u64;
                                                            let _777: bool;
                                                            scope 123 {
                                                                debug hi => _776;
                                                                debug o1 => _777;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            scope 118 {
                                                debug existing_low => _747;
                                                let _752: u64;
                                                let _753: bool;
                                                scope 119 {
                                                    debug low => _752;
                                                    debug o => _753;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        scope 124 {
                            debug carry => _787;
                            let _788: u64;
                            scope 125 {
                                debug b => _788;
                                scope 126 {
                                    let _803: u64;
                                    let _866: u64;
                                    let _929: u64;
                                    let _992: u64;
                                    let mut _1057: &{closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.5\src\uint.rs:257:67: 257:73};
                                    let mut _1058: &{closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.5\src\uint.rs:257:67: 257:73};
                                    let mut _1059: &{closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.5\src\uint.rs:257:67: 257:73};
                                    let mut _1060: &{closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.5\src\uint.rs:257:67: 257:73};
                                    scope 127 {
                                        debug a => _803;
                                        let _807: u64;
                                        let _808: u64;
                                        scope 128 {
                                            debug hi => _807;
                                            debug low => _808;
                                            let _816: bool;
                                            let _817: &mut u64;
                                            scope 129 {
                                                debug overflow => _816;
                                                let _829: &mut u64;
                                                scope 132 {
                                                    debug existing_hi => _829;
                                                    let _836: u64;
                                                    scope 133 {
                                                        debug hi => _836;
                                                        let _841: u64;
                                                        let _842: bool;
                                                        scope 134 {
                                                            debug hi => _841;
                                                            debug o0 => _842;
                                                            let _846: u64;
                                                            let _847: bool;
                                                            scope 135 {
                                                                debug hi => _846;
                                                                debug o1 => _847;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            scope 130 {
                                                debug existing_low => _817;
                                                let _822: u64;
                                                let _823: bool;
                                                scope 131 {
                                                    debug low => _822;
                                                    debug o => _823;
                                                }
                                            }
                                        }
                                    }
                                    scope 136 {
                                        debug a => _866;
                                        let _870: u64;
                                        let _871: u64;
                                        scope 137 {
                                            debug hi => _870;
                                            debug low => _871;
                                            let _879: bool;
                                            let _880: &mut u64;
                                            scope 138 {
                                                debug overflow => _879;
                                                let _892: &mut u64;
                                                scope 141 {
                                                    debug existing_hi => _892;
                                                    let _899: u64;
                                                    scope 142 {
                                                        debug hi => _899;
                                                        let _904: u64;
                                                        let _905: bool;
                                                        scope 143 {
                                                            debug hi => _904;
                                                            debug o0 => _905;
                                                            let _909: u64;
                                                            let _910: bool;
                                                            scope 144 {
                                                                debug hi => _909;
                                                                debug o1 => _910;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            scope 139 {
                                                debug existing_low => _880;
                                                let _885: u64;
                                                let _886: bool;
                                                scope 140 {
                                                    debug low => _885;
                                                    debug o => _886;
                                                }
                                            }
                                        }
                                    }
                                    scope 145 {
                                        debug a => _929;
                                        let _933: u64;
                                        let _934: u64;
                                        scope 146 {
                                            debug hi => _933;
                                            debug low => _934;
                                            let _942: bool;
                                            let _943: &mut u64;
                                            scope 147 {
                                                debug overflow => _942;
                                                let _955: &mut u64;
                                                scope 150 {
                                                    debug existing_hi => _955;
                                                    let _962: u64;
                                                    scope 151 {
                                                        debug hi => _962;
                                                        let _967: u64;
                                                        let _968: bool;
                                                        scope 152 {
                                                            debug hi => _967;
                                                            debug o0 => _968;
                                                            let _972: u64;
                                                            let _973: bool;
                                                            scope 153 {
                                                                debug hi => _972;
                                                                debug o1 => _973;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            scope 148 {
                                                debug existing_low => _943;
                                                let _948: u64;
                                                let _949: bool;
                                                scope 149 {
                                                    debug low => _948;
                                                    debug o => _949;
                                                }
                                            }
                                        }
                                    }
                                    scope 154 {
                                        debug a => _992;
                                        let _996: u64;
                                        let _997: u64;
                                        scope 155 {
                                            debug hi => _996;
                                            debug low => _997;
                                            let _1005: bool;
                                            let _1006: &mut u64;
                                            scope 156 {
                                                debug overflow => _1005;
                                                let _1018: &mut u64;
                                                scope 159 {
                                                    debug existing_hi => _1018;
                                                    let _1025: u64;
                                                    scope 160 {
                                                        debug hi => _1025;
                                                        let _1030: u64;
                                                        let _1031: bool;
                                                        scope 161 {
                                                            debug hi => _1030;
                                                            debug o0 => _1031;
                                                            let _1035: u64;
                                                            let _1036: bool;
                                                            scope 162 {
                                                                debug hi => _1035;
                                                                debug o1 => _1036;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            scope 157 {
                                                debug existing_low => _1006;
                                                let _1011: u64;
                                                let _1012: bool;
                                                scope 158 {
                                                    debug low => _1011;
                                                    debug o => _1012;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        _4 = &(_1.0: [u64; 4]);
        StorageLive(_5);
        _5 = &(_2.0: [u64; 4]);
        StorageLive(_6);
        _6 = [const 0_u64; 8];
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = Ge(const _, const 0_usize);
        switchInt(move _9) -> [0: bb83, otherwise: bb1];
    }

    bb1: {
        StorageLive(_10);
        _10 = const 0_u64;
        StorageLive(_11);
        StorageLive(_12);
        _12 = const _;
        _13 = Len((*_5));
        _14 = Lt(_12, _13);
        assert(move _14, "index out of bounds: the length is {} but the index is {}", move _13, _12) -> [success: bb2, unwind continue];
    }

    bb2: {
        _11 = (*_5)[_12];
        StorageDead(_12);
        StorageLive(_15);
        StorageLive(_16);
        _16 = Ge(const _, const 0_usize);
        switchInt(move _16) -> [0: bb21, otherwise: bb3];
    }

    bb3: {
        StorageLive(_17);
        StorageLive(_18);
        _1072 = const _;
        _18 = &(*_1072);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        _22 = const _;
        _23 = Len((*_4));
        _24 = Lt(_22, _23);
        assert(move _24, "index out of bounds: the length is {} but the index is {}", move _23, _22) -> [success: bb4, unwind continue];
    }

    bb4: {
        _21 = (*_4)[_22];
        StorageLive(_25);
        _25 = _10;
        _20 = (move _21, move _25);
        _17 = <{closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.5\src\uint.rs:257:67: 257:73} as Fn<(u64, u64)>>::call(move _18, move _20) -> [return: bb5, unwind continue];
    }

    bb5: {
        switchInt(move _17) -> [0: bb19, otherwise: bb6];
    }

    bb6: {
        StorageDead(_25);
        StorageDead(_22);
        StorageDead(_21);
        StorageDead(_20);
        StorageDead(_18);
        StorageLive(_26);
        StorageLive(_27);
        _27 = const _;
        _28 = Len((*_4));
        _29 = Lt(_27, _28);
        assert(move _29, "index out of bounds: the length is {} but the index is {}", move _28, _27) -> [success: bb7, unwind continue];
    }

    bb7: {
        _26 = (*_4)[_27];
        StorageDead(_27);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        _35 = _26;
        _34 = move _35 as u128 (IntToInt);
        StorageDead(_35);
        StorageLive(_36);
        StorageLive(_37);
        _37 = _11;
        _36 = move _37 as u128 (IntToInt);
        StorageDead(_37);
        _38 = CheckedMul(_34, _36);
        assert(!move (_38.1: bool), "attempt to compute `{} * {}`, which would overflow", move _34, move _36) -> [success: bb8, unwind continue];
    }

    bb8: {
        _33 = move (_38.0: u128);
        StorageDead(_36);
        StorageDead(_34);
        _32 = uint_types::U256::split_u128(move _33) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_33);
        StorageLive(_30);
        _30 = (_32.0: u64);
        StorageLive(_31);
        _31 = (_32.1: u64);
        StorageDead(_32);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        _42 = CheckedAdd(const _, const _);
        assert(!move (_42.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const _) -> [success: bb10, unwind continue];
    }

    bb10: {
        _41 = move (_42.0: usize);
        _43 = Len(_6);
        _44 = Lt(_41, _43);
        assert(move _44, "index out of bounds: the length is {} but the index is {}", move _43, _41) -> [success: bb11, unwind continue];
    }

    bb11: {
        _40 = &mut _6[_41];
        StorageLive(_47);
        StorageLive(_48);
        _48 = _31;
        StorageLive(_49);
        _49 = (*_40);
        _47 = core::num::<impl u64>::overflowing_add(move _48, move _49) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_49);
        StorageDead(_48);
        StorageLive(_45);
        _45 = (_47.0: u64);
        StorageLive(_46);
        _46 = (_47.1: bool);
        StorageDead(_47);
        StorageLive(_50);
        _50 = _45;
        (*_40) = move _50;
        StorageDead(_50);
        _39 = _46;
        StorageDead(_46);
        StorageDead(_45);
        StorageDead(_41);
        StorageDead(_40);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        _55 = CheckedAdd(const _, const _);
        assert(!move (_55.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const _) -> [success: bb13, unwind continue];
    }

    bb13: {
        _54 = move (_55.0: usize);
        _56 = CheckedAdd(_54, const 1_usize);
        assert(!move (_56.1: bool), "attempt to compute `{} + {}`, which would overflow", move _54, const 1_usize) -> [success: bb14, unwind continue];
    }

    bb14: {
        _53 = move (_56.0: usize);
        StorageDead(_54);
        _57 = Len(_6);
        _58 = Lt(_53, _57);
        assert(move _58, "index out of bounds: the length is {} but the index is {}", move _57, _53) -> [success: bb15, unwind continue];
    }

    bb15: {
        _52 = &mut _6[_53];
        StorageLive(_59);
        StorageLive(_60);
        _60 = _30;
        StorageLive(_61);
        StorageLive(_62);
        _62 = _39;
        _61 = move _62 as u64 (IntToInt);
        StorageDead(_62);
        _63 = CheckedAdd(_60, _61);
        assert(!move (_63.1: bool), "attempt to compute `{} + {}`, which would overflow", move _60, move _61) -> [success: bb16, unwind continue];
    }

    bb16: {
        _59 = move (_63.0: u64);
        StorageDead(_61);
        StorageDead(_60);
        StorageLive(_66);
        StorageLive(_67);
        _67 = _59;
        StorageLive(_68);
        _68 = _10;
        _66 = core::num::<impl u64>::overflowing_add(move _67, move _68) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_68);
        StorageDead(_67);
        StorageLive(_64);
        _64 = (_66.0: u64);
        StorageLive(_65);
        _65 = (_66.1: bool);
        StorageDead(_66);
        StorageLive(_71);
        StorageLive(_72);
        _72 = _64;
        StorageLive(_73);
        _73 = (*_52);
        _71 = core::num::<impl u64>::overflowing_add(move _72, move _73) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_73);
        StorageDead(_72);
        StorageLive(_69);
        _69 = (_71.0: u64);
        StorageLive(_70);
        _70 = (_71.1: bool);
        StorageDead(_71);
        StorageLive(_74);
        _74 = _69;
        (*_52) = move _74;
        StorageDead(_74);
        StorageLive(_75);
        StorageLive(_76);
        _76 = _65;
        StorageLive(_77);
        _77 = _70;
        _75 = BitOr(move _76, move _77);
        StorageDead(_77);
        StorageDead(_76);
        _51 = move _75 as u64 (IntToInt);
        StorageDead(_75);
        StorageDead(_70);
        StorageDead(_69);
        StorageDead(_65);
        StorageDead(_64);
        StorageDead(_59);
        StorageDead(_53);
        StorageDead(_52);
        _10 = move _51;
        _15 = const ();
        StorageDead(_51);
        StorageDead(_39);
        StorageDead(_31);
        StorageDead(_30);
        StorageDead(_26);
        goto -> bb20;
    }

    bb19: {
        StorageDead(_25);
        StorageDead(_22);
        StorageDead(_21);
        StorageDead(_20);
        StorageDead(_18);
        _15 = const ();
        goto -> bb20;
    }

    bb20: {
        StorageDead(_17);
        goto -> bb22;
    }

    bb21: {
        _15 = const ();
        goto -> bb22;
    }

    bb22: {
        StorageDead(_16);
        StorageDead(_15);
        StorageLive(_78);
        StorageLive(_79);
        _79 = Ge(const _, const 0_usize);
        switchInt(move _79) -> [0: bb41, otherwise: bb23];
    }

    bb23: {
        StorageLive(_80);
        StorageLive(_81);
        _1071 = const _;
        _81 = &(*_1071);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        _85 = const _;
        _86 = Len((*_4));
        _87 = Lt(_85, _86);
        assert(move _87, "index out of bounds: the length is {} but the index is {}", move _86, _85) -> [success: bb24, unwind continue];
    }

    bb24: {
        _84 = (*_4)[_85];
        StorageLive(_88);
        _88 = _10;
        _83 = (move _84, move _88);
        _80 = <{closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.5\src\uint.rs:257:67: 257:73} as Fn<(u64, u64)>>::call(move _81, move _83) -> [return: bb25, unwind continue];
    }

    bb25: {
        switchInt(move _80) -> [0: bb39, otherwise: bb26];
    }

    bb26: {
        StorageDead(_88);
        StorageDead(_85);
        StorageDead(_84);
        StorageDead(_83);
        StorageDead(_81);
        StorageLive(_89);
        StorageLive(_90);
        _90 = const _;
        _91 = Len((*_4));
        _92 = Lt(_90, _91);
        assert(move _92, "index out of bounds: the length is {} but the index is {}", move _91, _90) -> [success: bb27, unwind continue];
    }

    bb27: {
        _89 = (*_4)[_90];
        StorageDead(_90);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        _98 = _89;
        _97 = move _98 as u128 (IntToInt);
        StorageDead(_98);
        StorageLive(_99);
        StorageLive(_100);
        _100 = _11;
        _99 = move _100 as u128 (IntToInt);
        StorageDead(_100);
        _101 = CheckedMul(_97, _99);
        assert(!move (_101.1: bool), "attempt to compute `{} * {}`, which would overflow", move _97, move _99) -> [success: bb28, unwind continue];
    }

    bb28: {
        _96 = move (_101.0: u128);
        StorageDead(_99);
        StorageDead(_97);
        _95 = uint_types::U256::split_u128(move _96) -> [return: bb29, unwind continue];
    }

    bb29: {
        StorageDead(_96);
        StorageLive(_93);
        _93 = (_95.0: u64);
        StorageLive(_94);
        _94 = (_95.1: u64);
        StorageDead(_95);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        _105 = CheckedAdd(const _, const _);
        assert(!move (_105.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const _) -> [success: bb30, unwind continue];
    }

    bb30: {
        _104 = move (_105.0: usize);
        _106 = Len(_6);
        _107 = Lt(_104, _106);
        assert(move _107, "index out of bounds: the length is {} but the index is {}", move _106, _104) -> [success: bb31, unwind continue];
    }

    bb31: {
        _103 = &mut _6[_104];
        StorageLive(_110);
        StorageLive(_111);
        _111 = _94;
        StorageLive(_112);
        _112 = (*_103);
        _110 = core::num::<impl u64>::overflowing_add(move _111, move _112) -> [return: bb32, unwind continue];
    }

    bb32: {
        StorageDead(_112);
        StorageDead(_111);
        StorageLive(_108);
        _108 = (_110.0: u64);
        StorageLive(_109);
        _109 = (_110.1: bool);
        StorageDead(_110);
        StorageLive(_113);
        _113 = _108;
        (*_103) = move _113;
        StorageDead(_113);
        _102 = _109;
        StorageDead(_109);
        StorageDead(_108);
        StorageDead(_104);
        StorageDead(_103);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        _118 = CheckedAdd(const _, const _);
        assert(!move (_118.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const _) -> [success: bb33, unwind continue];
    }

    bb33: {
        _117 = move (_118.0: usize);
        _119 = CheckedAdd(_117, const 1_usize);
        assert(!move (_119.1: bool), "attempt to compute `{} + {}`, which would overflow", move _117, const 1_usize) -> [success: bb34, unwind continue];
    }

    bb34: {
        _116 = move (_119.0: usize);
        StorageDead(_117);
        _120 = Len(_6);
        _121 = Lt(_116, _120);
        assert(move _121, "index out of bounds: the length is {} but the index is {}", move _120, _116) -> [success: bb35, unwind continue];
    }

    bb35: {
        _115 = &mut _6[_116];
        StorageLive(_122);
        StorageLive(_123);
        _123 = _93;
        StorageLive(_124);
        StorageLive(_125);
        _125 = _102;
        _124 = move _125 as u64 (IntToInt);
        StorageDead(_125);
        _126 = CheckedAdd(_123, _124);
        assert(!move (_126.1: bool), "attempt to compute `{} + {}`, which would overflow", move _123, move _124) -> [success: bb36, unwind continue];
    }

    bb36: {
        _122 = move (_126.0: u64);
        StorageDead(_124);
        StorageDead(_123);
        StorageLive(_129);
        StorageLive(_130);
        _130 = _122;
        StorageLive(_131);
        _131 = _10;
        _129 = core::num::<impl u64>::overflowing_add(move _130, move _131) -> [return: bb37, unwind continue];
    }

    bb37: {
        StorageDead(_131);
        StorageDead(_130);
        StorageLive(_127);
        _127 = (_129.0: u64);
        StorageLive(_128);
        _128 = (_129.1: bool);
        StorageDead(_129);
        StorageLive(_134);
        StorageLive(_135);
        _135 = _127;
        StorageLive(_136);
        _136 = (*_115);
        _134 = core::num::<impl u64>::overflowing_add(move _135, move _136) -> [return: bb38, unwind continue];
    }

    bb38: {
        StorageDead(_136);
        StorageDead(_135);
        StorageLive(_132);
        _132 = (_134.0: u64);
        StorageLive(_133);
        _133 = (_134.1: bool);
        StorageDead(_134);
        StorageLive(_137);
        _137 = _132;
        (*_115) = move _137;
        StorageDead(_137);
        StorageLive(_138);
        StorageLive(_139);
        _139 = _128;
        StorageLive(_140);
        _140 = _133;
        _138 = BitOr(move _139, move _140);
        StorageDead(_140);
        StorageDead(_139);
        _114 = move _138 as u64 (IntToInt);
        StorageDead(_138);
        StorageDead(_133);
        StorageDead(_132);
        StorageDead(_128);
        StorageDead(_127);
        StorageDead(_122);
        StorageDead(_116);
        StorageDead(_115);
        _10 = move _114;
        _78 = const ();
        StorageDead(_114);
        StorageDead(_102);
        StorageDead(_94);
        StorageDead(_93);
        StorageDead(_89);
        goto -> bb40;
    }

    bb39: {
        StorageDead(_88);
        StorageDead(_85);
        StorageDead(_84);
        StorageDead(_83);
        StorageDead(_81);
        _78 = const ();
        goto -> bb40;
    }

    bb40: {
        StorageDead(_80);
        goto -> bb42;
    }

    bb41: {
        _78 = const ();
        goto -> bb42;
    }

    bb42: {
        StorageDead(_79);
        StorageDead(_78);
        StorageLive(_141);
        StorageLive(_142);
        _142 = Ge(const _, const 0_usize);
        switchInt(move _142) -> [0: bb61, otherwise: bb43];
    }

    bb43: {
        StorageLive(_143);
        StorageLive(_144);
        _1070 = const _;
        _144 = &(*_1070);
        StorageLive(_146);
        StorageLive(_147);
        StorageLive(_148);
        _148 = const _;
        _149 = Len((*_4));
        _150 = Lt(_148, _149);
        assert(move _150, "index out of bounds: the length is {} but the index is {}", move _149, _148) -> [success: bb44, unwind continue];
    }

    bb44: {
        _147 = (*_4)[_148];
        StorageLive(_151);
        _151 = _10;
        _146 = (move _147, move _151);
        _143 = <{closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.5\src\uint.rs:257:67: 257:73} as Fn<(u64, u64)>>::call(move _144, move _146) -> [return: bb45, unwind continue];
    }

    bb45: {
        switchInt(move _143) -> [0: bb59, otherwise: bb46];
    }

    bb46: {
        StorageDead(_151);
        StorageDead(_148);
        StorageDead(_147);
        StorageDead(_146);
        StorageDead(_144);
        StorageLive(_152);
        StorageLive(_153);
        _153 = const _;
        _154 = Len((*_4));
        _155 = Lt(_153, _154);
        assert(move _155, "index out of bounds: the length is {} but the index is {}", move _154, _153) -> [success: bb47, unwind continue];
    }

    bb47: {
        _152 = (*_4)[_153];
        StorageDead(_153);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        StorageLive(_161);
        _161 = _152;
        _160 = move _161 as u128 (IntToInt);
        StorageDead(_161);
        StorageLive(_162);
        StorageLive(_163);
        _163 = _11;
        _162 = move _163 as u128 (IntToInt);
        StorageDead(_163);
        _164 = CheckedMul(_160, _162);
        assert(!move (_164.1: bool), "attempt to compute `{} * {}`, which would overflow", move _160, move _162) -> [success: bb48, unwind continue];
    }

    bb48: {
        _159 = move (_164.0: u128);
        StorageDead(_162);
        StorageDead(_160);
        _158 = uint_types::U256::split_u128(move _159) -> [return: bb49, unwind continue];
    }

    bb49: {
        StorageDead(_159);
        StorageLive(_156);
        _156 = (_158.0: u64);
        StorageLive(_157);
        _157 = (_158.1: u64);
        StorageDead(_158);
        StorageLive(_165);
        StorageLive(_166);
        StorageLive(_167);
        _168 = CheckedAdd(const _, const _);
        assert(!move (_168.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const _) -> [success: bb50, unwind continue];
    }

    bb50: {
        _167 = move (_168.0: usize);
        _169 = Len(_6);
        _170 = Lt(_167, _169);
        assert(move _170, "index out of bounds: the length is {} but the index is {}", move _169, _167) -> [success: bb51, unwind continue];
    }

    bb51: {
        _166 = &mut _6[_167];
        StorageLive(_173);
        StorageLive(_174);
        _174 = _157;
        StorageLive(_175);
        _175 = (*_166);
        _173 = core::num::<impl u64>::overflowing_add(move _174, move _175) -> [return: bb52, unwind continue];
    }

    bb52: {
        StorageDead(_175);
        StorageDead(_174);
        StorageLive(_171);
        _171 = (_173.0: u64);
        StorageLive(_172);
        _172 = (_173.1: bool);
        StorageDead(_173);
        StorageLive(_176);
        _176 = _171;
        (*_166) = move _176;
        StorageDead(_176);
        _165 = _172;
        StorageDead(_172);
        StorageDead(_171);
        StorageDead(_167);
        StorageDead(_166);
        StorageLive(_177);
        StorageLive(_178);
        StorageLive(_179);
        StorageLive(_180);
        _181 = CheckedAdd(const _, const _);
        assert(!move (_181.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const _) -> [success: bb53, unwind continue];
    }

    bb53: {
        _180 = move (_181.0: usize);
        _182 = CheckedAdd(_180, const 1_usize);
        assert(!move (_182.1: bool), "attempt to compute `{} + {}`, which would overflow", move _180, const 1_usize) -> [success: bb54, unwind continue];
    }

    bb54: {
        _179 = move (_182.0: usize);
        StorageDead(_180);
        _183 = Len(_6);
        _184 = Lt(_179, _183);
        assert(move _184, "index out of bounds: the length is {} but the index is {}", move _183, _179) -> [success: bb55, unwind continue];
    }

    bb55: {
        _178 = &mut _6[_179];
        StorageLive(_185);
        StorageLive(_186);
        _186 = _156;
        StorageLive(_187);
        StorageLive(_188);
        _188 = _165;
        _187 = move _188 as u64 (IntToInt);
        StorageDead(_188);
        _189 = CheckedAdd(_186, _187);
        assert(!move (_189.1: bool), "attempt to compute `{} + {}`, which would overflow", move _186, move _187) -> [success: bb56, unwind continue];
    }

    bb56: {
        _185 = move (_189.0: u64);
        StorageDead(_187);
        StorageDead(_186);
        StorageLive(_192);
        StorageLive(_193);
        _193 = _185;
        StorageLive(_194);
        _194 = _10;
        _192 = core::num::<impl u64>::overflowing_add(move _193, move _194) -> [return: bb57, unwind continue];
    }

    bb57: {
        StorageDead(_194);
        StorageDead(_193);
        StorageLive(_190);
        _190 = (_192.0: u64);
        StorageLive(_191);
        _191 = (_192.1: bool);
        StorageDead(_192);
        StorageLive(_197);
        StorageLive(_198);
        _198 = _190;
        StorageLive(_199);
        _199 = (*_178);
        _197 = core::num::<impl u64>::overflowing_add(move _198, move _199) -> [return: bb58, unwind continue];
    }

    bb58: {
        StorageDead(_199);
        StorageDead(_198);
        StorageLive(_195);
        _195 = (_197.0: u64);
        StorageLive(_196);
        _196 = (_197.1: bool);
        StorageDead(_197);
        StorageLive(_200);
        _200 = _195;
        (*_178) = move _200;
        StorageDead(_200);
        StorageLive(_201);
        StorageLive(_202);
        _202 = _191;
        StorageLive(_203);
        _203 = _196;
        _201 = BitOr(move _202, move _203);
        StorageDead(_203);
        StorageDead(_202);
        _177 = move _201 as u64 (IntToInt);
        StorageDead(_201);
        StorageDead(_196);
        StorageDead(_195);
        StorageDead(_191);
        StorageDead(_190);
        StorageDead(_185);
        StorageDead(_179);
        StorageDead(_178);
        _10 = move _177;
        _141 = const ();
        StorageDead(_177);
        StorageDead(_165);
        StorageDead(_157);
        StorageDead(_156);
        StorageDead(_152);
        goto -> bb60;
    }

    bb59: {
        StorageDead(_151);
        StorageDead(_148);
        StorageDead(_147);
        StorageDead(_146);
        StorageDead(_144);
        _141 = const ();
        goto -> bb60;
    }

    bb60: {
        StorageDead(_143);
        goto -> bb62;
    }

    bb61: {
        _141 = const ();
        goto -> bb62;
    }

    bb62: {
        StorageDead(_142);
        StorageDead(_141);
        StorageLive(_204);
        StorageLive(_205);
        _205 = Ge(const _, const 0_usize);
        switchInt(move _205) -> [0: bb81, otherwise: bb63];
    }

    bb63: {
        StorageLive(_206);
        StorageLive(_207);
        _1069 = const _;
        _207 = &(*_1069);
        StorageLive(_209);
        StorageLive(_210);
        StorageLive(_211);
        _211 = const _;
        _212 = Len((*_4));
        _213 = Lt(_211, _212);
        assert(move _213, "index out of bounds: the length is {} but the index is {}", move _212, _211) -> [success: bb64, unwind continue];
    }

    bb64: {
        _210 = (*_4)[_211];
        StorageLive(_214);
        _214 = _10;
        _209 = (move _210, move _214);
        _206 = <{closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.5\src\uint.rs:257:67: 257:73} as Fn<(u64, u64)>>::call(move _207, move _209) -> [return: bb65, unwind continue];
    }

    bb65: {
        switchInt(move _206) -> [0: bb79, otherwise: bb66];
    }

    bb66: {
        StorageDead(_214);
        StorageDead(_211);
        StorageDead(_210);
        StorageDead(_209);
        StorageDead(_207);
        StorageLive(_215);
        StorageLive(_216);
        _216 = const _;
        _217 = Len((*_4));
        _218 = Lt(_216, _217);
        assert(move _218, "index out of bounds: the length is {} but the index is {}", move _217, _216) -> [success: bb67, unwind continue];
    }

    bb67: {
        _215 = (*_4)[_216];
        StorageDead(_216);
        StorageLive(_221);
        StorageLive(_222);
        StorageLive(_223);
        StorageLive(_224);
        _224 = _215;
        _223 = move _224 as u128 (IntToInt);
        StorageDead(_224);
        StorageLive(_225);
        StorageLive(_226);
        _226 = _11;
        _225 = move _226 as u128 (IntToInt);
        StorageDead(_226);
        _227 = CheckedMul(_223, _225);
        assert(!move (_227.1: bool), "attempt to compute `{} * {}`, which would overflow", move _223, move _225) -> [success: bb68, unwind continue];
    }

    bb68: {
        _222 = move (_227.0: u128);
        StorageDead(_225);
        StorageDead(_223);
        _221 = uint_types::U256::split_u128(move _222) -> [return: bb69, unwind continue];
    }

    bb69: {
        StorageDead(_222);
        StorageLive(_219);
        _219 = (_221.0: u64);
        StorageLive(_220);
        _220 = (_221.1: u64);
        StorageDead(_221);
        StorageLive(_228);
        StorageLive(_229);
        StorageLive(_230);
        _231 = CheckedAdd(const _, const _);
        assert(!move (_231.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const _) -> [success: bb70, unwind continue];
    }

    bb70: {
        _230 = move (_231.0: usize);
        _232 = Len(_6);
        _233 = Lt(_230, _232);
        assert(move _233, "index out of bounds: the length is {} but the index is {}", move _232, _230) -> [success: bb71, unwind continue];
    }

    bb71: {
        _229 = &mut _6[_230];
        StorageLive(_236);
        StorageLive(_237);
        _237 = _220;
        StorageLive(_238);
        _238 = (*_229);
        _236 = core::num::<impl u64>::overflowing_add(move _237, move _238) -> [return: bb72, unwind continue];
    }

    bb72: {
        StorageDead(_238);
        StorageDead(_237);
        StorageLive(_234);
        _234 = (_236.0: u64);
        StorageLive(_235);
        _235 = (_236.1: bool);
        StorageDead(_236);
        StorageLive(_239);
        _239 = _234;
        (*_229) = move _239;
        StorageDead(_239);
        _228 = _235;
        StorageDead(_235);
        StorageDead(_234);
        StorageDead(_230);
        StorageDead(_229);
        StorageLive(_240);
        StorageLive(_241);
        StorageLive(_242);
        StorageLive(_243);
        _244 = CheckedAdd(const _, const _);
        assert(!move (_244.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const _) -> [success: bb73, unwind continue];
    }

    bb73: {
        _243 = move (_244.0: usize);
        _245 = CheckedAdd(_243, const 1_usize);
        assert(!move (_245.1: bool), "attempt to compute `{} + {}`, which would overflow", move _243, const 1_usize) -> [success: bb74, unwind continue];
    }

    bb74: {
        _242 = move (_245.0: usize);
        StorageDead(_243);
        _246 = Len(_6);
        _247 = Lt(_242, _246);
        assert(move _247, "index out of bounds: the length is {} but the index is {}", move _246, _242) -> [success: bb75, unwind continue];
    }

    bb75: {
        _241 = &mut _6[_242];
        StorageLive(_248);
        StorageLive(_249);
        _249 = _219;
        StorageLive(_250);
        StorageLive(_251);
        _251 = _228;
        _250 = move _251 as u64 (IntToInt);
        StorageDead(_251);
        _252 = CheckedAdd(_249, _250);
        assert(!move (_252.1: bool), "attempt to compute `{} + {}`, which would overflow", move _249, move _250) -> [success: bb76, unwind continue];
    }

    bb76: {
        _248 = move (_252.0: u64);
        StorageDead(_250);
        StorageDead(_249);
        StorageLive(_255);
        StorageLive(_256);
        _256 = _248;
        StorageLive(_257);
        _257 = _10;
        _255 = core::num::<impl u64>::overflowing_add(move _256, move _257) -> [return: bb77, unwind continue];
    }

    bb77: {
        StorageDead(_257);
        StorageDead(_256);
        StorageLive(_253);
        _253 = (_255.0: u64);
        StorageLive(_254);
        _254 = (_255.1: bool);
        StorageDead(_255);
        StorageLive(_260);
        StorageLive(_261);
        _261 = _253;
        StorageLive(_262);
        _262 = (*_241);
        _260 = core::num::<impl u64>::overflowing_add(move _261, move _262) -> [return: bb78, unwind continue];
    }

    bb78: {
        StorageDead(_262);
        StorageDead(_261);
        StorageLive(_258);
        _258 = (_260.0: u64);
        StorageLive(_259);
        _259 = (_260.1: bool);
        StorageDead(_260);
        StorageLive(_263);
        _263 = _258;
        (*_241) = move _263;
        StorageDead(_263);
        StorageLive(_264);
        StorageLive(_265);
        _265 = _254;
        StorageLive(_266);
        _266 = _259;
        _264 = BitOr(move _265, move _266);
        StorageDead(_266);
        StorageDead(_265);
        _240 = move _264 as u64 (IntToInt);
        StorageDead(_264);
        StorageDead(_259);
        StorageDead(_258);
        StorageDead(_254);
        StorageDead(_253);
        StorageDead(_248);
        StorageDead(_242);
        StorageDead(_241);
        _10 = move _240;
        _204 = const ();
        StorageDead(_240);
        StorageDead(_228);
        StorageDead(_220);
        StorageDead(_219);
        StorageDead(_215);
        goto -> bb80;
    }

    bb79: {
        StorageDead(_214);
        StorageDead(_211);
        StorageDead(_210);
        StorageDead(_209);
        StorageDead(_207);
        _204 = const ();
        goto -> bb80;
    }

    bb80: {
        StorageDead(_206);
        goto -> bb82;
    }

    bb81: {
        _204 = const ();
        goto -> bb82;
    }

    bb82: {
        StorageDead(_205);
        StorageDead(_204);
        _8 = const ();
        StorageDead(_11);
        StorageDead(_10);
        goto -> bb84;
    }

    bb83: {
        _8 = const ();
        goto -> bb84;
    }

    bb84: {
        StorageDead(_9);
        StorageDead(_8);
        StorageLive(_267);
        StorageLive(_268);
        _268 = Ge(const _, const 0_usize);
        switchInt(move _268) -> [0: bb167, otherwise: bb85];
    }

    bb85: {
        StorageLive(_269);
        _269 = const 0_u64;
        StorageLive(_270);
        StorageLive(_271);
        _271 = const _;
        _272 = Len((*_5));
        _273 = Lt(_271, _272);
        assert(move _273, "index out of bounds: the length is {} but the index is {}", move _272, _271) -> [success: bb86, unwind continue];
    }

    bb86: {
        _270 = (*_5)[_271];
        StorageDead(_271);
        StorageLive(_274);
        StorageLive(_275);
        _275 = Ge(const _, const 0_usize);
        switchInt(move _275) -> [0: bb105, otherwise: bb87];
    }

    bb87: {
        StorageLive(_276);
        StorageLive(_277);
        _1068 = const _;
        _277 = &(*_1068);
        StorageLive(_279);
        StorageLive(_280);
        StorageLive(_281);
        _281 = const _;
        _282 = Len((*_4));
        _283 = Lt(_281, _282);
        assert(move _283, "index out of bounds: the length is {} but the index is {}", move _282, _281) -> [success: bb88, unwind continue];
    }

    bb88: {
        _280 = (*_4)[_281];
        StorageLive(_284);
        _284 = _269;
        _279 = (move _280, move _284);
        _276 = <{closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.5\src\uint.rs:257:67: 257:73} as Fn<(u64, u64)>>::call(move _277, move _279) -> [return: bb89, unwind continue];
    }

    bb89: {
        switchInt(move _276) -> [0: bb103, otherwise: bb90];
    }

    bb90: {
        StorageDead(_284);
        StorageDead(_281);
        StorageDead(_280);
        StorageDead(_279);
        StorageDead(_277);
        StorageLive(_285);
        StorageLive(_286);
        _286 = const _;
        _287 = Len((*_4));
        _288 = Lt(_286, _287);
        assert(move _288, "index out of bounds: the length is {} but the index is {}", move _287, _286) -> [success: bb91, unwind continue];
    }

    bb91: {
        _285 = (*_4)[_286];
        StorageDead(_286);
        StorageLive(_291);
        StorageLive(_292);
        StorageLive(_293);
        StorageLive(_294);
        _294 = _285;
        _293 = move _294 as u128 (IntToInt);
        StorageDead(_294);
        StorageLive(_295);
        StorageLive(_296);
        _296 = _270;
        _295 = move _296 as u128 (IntToInt);
        StorageDead(_296);
        _297 = CheckedMul(_293, _295);
        assert(!move (_297.1: bool), "attempt to compute `{} * {}`, which would overflow", move _293, move _295) -> [success: bb92, unwind continue];
    }

    bb92: {
        _292 = move (_297.0: u128);
        StorageDead(_295);
        StorageDead(_293);
        _291 = uint_types::U256::split_u128(move _292) -> [return: bb93, unwind continue];
    }

    bb93: {
        StorageDead(_292);
        StorageLive(_289);
        _289 = (_291.0: u64);
        StorageLive(_290);
        _290 = (_291.1: u64);
        StorageDead(_291);
        StorageLive(_298);
        StorageLive(_299);
        StorageLive(_300);
        _301 = CheckedAdd(const _, const _);
        assert(!move (_301.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const _) -> [success: bb94, unwind continue];
    }

    bb94: {
        _300 = move (_301.0: usize);
        _302 = Len(_6);
        _303 = Lt(_300, _302);
        assert(move _303, "index out of bounds: the length is {} but the index is {}", move _302, _300) -> [success: bb95, unwind continue];
    }

    bb95: {
        _299 = &mut _6[_300];
        StorageLive(_306);
        StorageLive(_307);
        _307 = _290;
        StorageLive(_308);
        _308 = (*_299);
        _306 = core::num::<impl u64>::overflowing_add(move _307, move _308) -> [return: bb96, unwind continue];
    }

    bb96: {
        StorageDead(_308);
        StorageDead(_307);
        StorageLive(_304);
        _304 = (_306.0: u64);
        StorageLive(_305);
        _305 = (_306.1: bool);
        StorageDead(_306);
        StorageLive(_309);
        _309 = _304;
        (*_299) = move _309;
        StorageDead(_309);
        _298 = _305;
        StorageDead(_305);
        StorageDead(_304);
        StorageDead(_300);
        StorageDead(_299);
        StorageLive(_310);
        StorageLive(_311);
        StorageLive(_312);
        StorageLive(_313);
        _314 = CheckedAdd(const _, const _);
        assert(!move (_314.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const _) -> [success: bb97, unwind continue];
    }

    bb97: {
        _313 = move (_314.0: usize);
        _315 = CheckedAdd(_313, const 1_usize);
        assert(!move (_315.1: bool), "attempt to compute `{} + {}`, which would overflow", move _313, const 1_usize) -> [success: bb98, unwind continue];
    }

    bb98: {
        _312 = move (_315.0: usize);
        StorageDead(_313);
        _316 = Len(_6);
        _317 = Lt(_312, _316);
        assert(move _317, "index out of bounds: the length is {} but the index is {}", move _316, _312) -> [success: bb99, unwind continue];
    }

    bb99: {
        _311 = &mut _6[_312];
        StorageLive(_318);
        StorageLive(_319);
        _319 = _289;
        StorageLive(_320);
        StorageLive(_321);
        _321 = _298;
        _320 = move _321 as u64 (IntToInt);
        StorageDead(_321);
        _322 = CheckedAdd(_319, _320);
        assert(!move (_322.1: bool), "attempt to compute `{} + {}`, which would overflow", move _319, move _320) -> [success: bb100, unwind continue];
    }

    bb100: {
        _318 = move (_322.0: u64);
        StorageDead(_320);
        StorageDead(_319);
        StorageLive(_325);
        StorageLive(_326);
        _326 = _318;
        StorageLive(_327);
        _327 = _269;
        _325 = core::num::<impl u64>::overflowing_add(move _326, move _327) -> [return: bb101, unwind continue];
    }

    bb101: {
        StorageDead(_327);
        StorageDead(_326);
        StorageLive(_323);
        _323 = (_325.0: u64);
        StorageLive(_324);
        _324 = (_325.1: bool);
        StorageDead(_325);
        StorageLive(_330);
        StorageLive(_331);
        _331 = _323;
        StorageLive(_332);
        _332 = (*_311);
        _330 = core::num::<impl u64>::overflowing_add(move _331, move _332) -> [return: bb102, unwind continue];
    }

    bb102: {
        StorageDead(_332);
        StorageDead(_331);
        StorageLive(_328);
        _328 = (_330.0: u64);
        StorageLive(_329);
        _329 = (_330.1: bool);
        StorageDead(_330);
        StorageLive(_333);
        _333 = _328;
        (*_311) = move _333;
        StorageDead(_333);
        StorageLive(_334);
        StorageLive(_335);
        _335 = _324;
        StorageLive(_336);
        _336 = _329;
        _334 = BitOr(move _335, move _336);
        StorageDead(_336);
        StorageDead(_335);
        _310 = move _334 as u64 (IntToInt);
        StorageDead(_334);
        StorageDead(_329);
        StorageDead(_328);
        StorageDead(_324);
        StorageDead(_323);
        StorageDead(_318);
        StorageDead(_312);
        StorageDead(_311);
        _269 = move _310;
        _274 = const ();
        StorageDead(_310);
        StorageDead(_298);
        StorageDead(_290);
        StorageDead(_289);
        StorageDead(_285);
        goto -> bb104;
    }

    bb103: {
        StorageDead(_284);
        StorageDead(_281);
        StorageDead(_280);
        StorageDead(_279);
        StorageDead(_277);
        _274 = const ();
        goto -> bb104;
    }

    bb104: {
        StorageDead(_276);
        goto -> bb106;
    }

    bb105: {
        _274 = const ();
        goto -> bb106;
    }

    bb106: {
        StorageDead(_275);
        StorageDead(_274);
        StorageLive(_337);
        StorageLive(_338);
        _338 = Ge(const _, const 0_usize);
        switchInt(move _338) -> [0: bb125, otherwise: bb107];
    }

    bb107: {
        StorageLive(_339);
        StorageLive(_340);
        _1067 = const _;
        _340 = &(*_1067);
        StorageLive(_342);
        StorageLive(_343);
        StorageLive(_344);
        _344 = const _;
        _345 = Len((*_4));
        _346 = Lt(_344, _345);
        assert(move _346, "index out of bounds: the length is {} but the index is {}", move _345, _344) -> [success: bb108, unwind continue];
    }

    bb108: {
        _343 = (*_4)[_344];
        StorageLive(_347);
        _347 = _269;
        _342 = (move _343, move _347);
        _339 = <{closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.5\src\uint.rs:257:67: 257:73} as Fn<(u64, u64)>>::call(move _340, move _342) -> [return: bb109, unwind continue];
    }

    bb109: {
        switchInt(move _339) -> [0: bb123, otherwise: bb110];
    }

    bb110: {
        StorageDead(_347);
        StorageDead(_344);
        StorageDead(_343);
        StorageDead(_342);
        StorageDead(_340);
        StorageLive(_348);
        StorageLive(_349);
        _349 = const _;
        _350 = Len((*_4));
        _351 = Lt(_349, _350);
        assert(move _351, "index out of bounds: the length is {} but the index is {}", move _350, _349) -> [success: bb111, unwind continue];
    }

    bb111: {
        _348 = (*_4)[_349];
        StorageDead(_349);
        StorageLive(_354);
        StorageLive(_355);
        StorageLive(_356);
        StorageLive(_357);
        _357 = _348;
        _356 = move _357 as u128 (IntToInt);
        StorageDead(_357);
        StorageLive(_358);
        StorageLive(_359);
        _359 = _270;
        _358 = move _359 as u128 (IntToInt);
        StorageDead(_359);
        _360 = CheckedMul(_356, _358);
        assert(!move (_360.1: bool), "attempt to compute `{} * {}`, which would overflow", move _356, move _358) -> [success: bb112, unwind continue];
    }

    bb112: {
        _355 = move (_360.0: u128);
        StorageDead(_358);
        StorageDead(_356);
        _354 = uint_types::U256::split_u128(move _355) -> [return: bb113, unwind continue];
    }

    bb113: {
        StorageDead(_355);
        StorageLive(_352);
        _352 = (_354.0: u64);
        StorageLive(_353);
        _353 = (_354.1: u64);
        StorageDead(_354);
        StorageLive(_361);
        StorageLive(_362);
        StorageLive(_363);
        _364 = CheckedAdd(const _, const _);
        assert(!move (_364.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const _) -> [success: bb114, unwind continue];
    }

    bb114: {
        _363 = move (_364.0: usize);
        _365 = Len(_6);
        _366 = Lt(_363, _365);
        assert(move _366, "index out of bounds: the length is {} but the index is {}", move _365, _363) -> [success: bb115, unwind continue];
    }

    bb115: {
        _362 = &mut _6[_363];
        StorageLive(_369);
        StorageLive(_370);
        _370 = _353;
        StorageLive(_371);
        _371 = (*_362);
        _369 = core::num::<impl u64>::overflowing_add(move _370, move _371) -> [return: bb116, unwind continue];
    }

    bb116: {
        StorageDead(_371);
        StorageDead(_370);
        StorageLive(_367);
        _367 = (_369.0: u64);
        StorageLive(_368);
        _368 = (_369.1: bool);
        StorageDead(_369);
        StorageLive(_372);
        _372 = _367;
        (*_362) = move _372;
        StorageDead(_372);
        _361 = _368;
        StorageDead(_368);
        StorageDead(_367);
        StorageDead(_363);
        StorageDead(_362);
        StorageLive(_373);
        StorageLive(_374);
        StorageLive(_375);
        StorageLive(_376);
        _377 = CheckedAdd(const _, const _);
        assert(!move (_377.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const _) -> [success: bb117, unwind continue];
    }

    bb117: {
        _376 = move (_377.0: usize);
        _378 = CheckedAdd(_376, const 1_usize);
        assert(!move (_378.1: bool), "attempt to compute `{} + {}`, which would overflow", move _376, const 1_usize) -> [success: bb118, unwind continue];
    }

    bb118: {
        _375 = move (_378.0: usize);
        StorageDead(_376);
        _379 = Len(_6);
        _380 = Lt(_375, _379);
        assert(move _380, "index out of bounds: the length is {} but the index is {}", move _379, _375) -> [success: bb119, unwind continue];
    }

    bb119: {
        _374 = &mut _6[_375];
        StorageLive(_381);
        StorageLive(_382);
        _382 = _352;
        StorageLive(_383);
        StorageLive(_384);
        _384 = _361;
        _383 = move _384 as u64 (IntToInt);
        StorageDead(_384);
        _385 = CheckedAdd(_382, _383);
        assert(!move (_385.1: bool), "attempt to compute `{} + {}`, which would overflow", move _382, move _383) -> [success: bb120, unwind continue];
    }

    bb120: {
        _381 = move (_385.0: u64);
        StorageDead(_383);
        StorageDead(_382);
        StorageLive(_388);
        StorageLive(_389);
        _389 = _381;
        StorageLive(_390);
        _390 = _269;
        _388 = core::num::<impl u64>::overflowing_add(move _389, move _390) -> [return: bb121, unwind continue];
    }

    bb121: {
        StorageDead(_390);
        StorageDead(_389);
        StorageLive(_386);
        _386 = (_388.0: u64);
        StorageLive(_387);
        _387 = (_388.1: bool);
        StorageDead(_388);
        StorageLive(_393);
        StorageLive(_394);
        _394 = _386;
        StorageLive(_395);
        _395 = (*_374);
        _393 = core::num::<impl u64>::overflowing_add(move _394, move _395) -> [return: bb122, unwind continue];
    }

    bb122: {
        StorageDead(_395);
        StorageDead(_394);
        StorageLive(_391);
        _391 = (_393.0: u64);
        StorageLive(_392);
        _392 = (_393.1: bool);
        StorageDead(_393);
        StorageLive(_396);
        _396 = _391;
        (*_374) = move _396;
        StorageDead(_396);
        StorageLive(_397);
        StorageLive(_398);
        _398 = _387;
        StorageLive(_399);
        _399 = _392;
        _397 = BitOr(move _398, move _399);
        StorageDead(_399);
        StorageDead(_398);
        _373 = move _397 as u64 (IntToInt);
        StorageDead(_397);
        StorageDead(_392);
        StorageDead(_391);
        StorageDead(_387);
        StorageDead(_386);
        StorageDead(_381);
        StorageDead(_375);
        StorageDead(_374);
        _269 = move _373;
        _337 = const ();
        StorageDead(_373);
        StorageDead(_361);
        StorageDead(_353);
        StorageDead(_352);
        StorageDead(_348);
        goto -> bb124;
    }

    bb123: {
        StorageDead(_347);
        StorageDead(_344);
        StorageDead(_343);
        StorageDead(_342);
        StorageDead(_340);
        _337 = const ();
        goto -> bb124;
    }

    bb124: {
        StorageDead(_339);
        goto -> bb126;
    }

    bb125: {
        _337 = const ();
        goto -> bb126;
    }

    bb126: {
        StorageDead(_338);
        StorageDead(_337);
        StorageLive(_400);
        StorageLive(_401);
        _401 = Ge(const _, const 0_usize);
        switchInt(move _401) -> [0: bb145, otherwise: bb127];
    }

    bb127: {
        StorageLive(_402);
        StorageLive(_403);
        _1066 = const _;
        _403 = &(*_1066);
        StorageLive(_405);
        StorageLive(_406);
        StorageLive(_407);
        _407 = const _;
        _408 = Len((*_4));
        _409 = Lt(_407, _408);
        assert(move _409, "index out of bounds: the length is {} but the index is {}", move _408, _407) -> [success: bb128, unwind continue];
    }

    bb128: {
        _406 = (*_4)[_407];
        StorageLive(_410);
        _410 = _269;
        _405 = (move _406, move _410);
        _402 = <{closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.5\src\uint.rs:257:67: 257:73} as Fn<(u64, u64)>>::call(move _403, move _405) -> [return: bb129, unwind continue];
    }

    bb129: {
        switchInt(move _402) -> [0: bb143, otherwise: bb130];
    }

    bb130: {
        StorageDead(_410);
        StorageDead(_407);
        StorageDead(_406);
        StorageDead(_405);
        StorageDead(_403);
        StorageLive(_411);
        StorageLive(_412);
        _412 = const _;
        _413 = Len((*_4));
        _414 = Lt(_412, _413);
        assert(move _414, "index out of bounds: the length is {} but the index is {}", move _413, _412) -> [success: bb131, unwind continue];
    }

    bb131: {
        _411 = (*_4)[_412];
        StorageDead(_412);
        StorageLive(_417);
        StorageLive(_418);
        StorageLive(_419);
        StorageLive(_420);
        _420 = _411;
        _419 = move _420 as u128 (IntToInt);
        StorageDead(_420);
        StorageLive(_421);
        StorageLive(_422);
        _422 = _270;
        _421 = move _422 as u128 (IntToInt);
        StorageDead(_422);
        _423 = CheckedMul(_419, _421);
        assert(!move (_423.1: bool), "attempt to compute `{} * {}`, which would overflow", move _419, move _421) -> [success: bb132, unwind continue];
    }

    bb132: {
        _418 = move (_423.0: u128);
        StorageDead(_421);
        StorageDead(_419);
        _417 = uint_types::U256::split_u128(move _418) -> [return: bb133, unwind continue];
    }

    bb133: {
        StorageDead(_418);
        StorageLive(_415);
        _415 = (_417.0: u64);
        StorageLive(_416);
        _416 = (_417.1: u64);
        StorageDead(_417);
        StorageLive(_424);
        StorageLive(_425);
        StorageLive(_426);
        _427 = CheckedAdd(const _, const _);
        assert(!move (_427.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const _) -> [success: bb134, unwind continue];
    }

    bb134: {
        _426 = move (_427.0: usize);
        _428 = Len(_6);
        _429 = Lt(_426, _428);
        assert(move _429, "index out of bounds: the length is {} but the index is {}", move _428, _426) -> [success: bb135, unwind continue];
    }

    bb135: {
        _425 = &mut _6[_426];
        StorageLive(_432);
        StorageLive(_433);
        _433 = _416;
        StorageLive(_434);
        _434 = (*_425);
        _432 = core::num::<impl u64>::overflowing_add(move _433, move _434) -> [return: bb136, unwind continue];
    }

    bb136: {
        StorageDead(_434);
        StorageDead(_433);
        StorageLive(_430);
        _430 = (_432.0: u64);
        StorageLive(_431);
        _431 = (_432.1: bool);
        StorageDead(_432);
        StorageLive(_435);
        _435 = _430;
        (*_425) = move _435;
        StorageDead(_435);
        _424 = _431;
        StorageDead(_431);
        StorageDead(_430);
        StorageDead(_426);
        StorageDead(_425);
        StorageLive(_436);
        StorageLive(_437);
        StorageLive(_438);
        StorageLive(_439);
        _440 = CheckedAdd(const _, const _);
        assert(!move (_440.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const _) -> [success: bb137, unwind continue];
    }

    bb137: {
        _439 = move (_440.0: usize);
        _441 = CheckedAdd(_439, const 1_usize);
        assert(!move (_441.1: bool), "attempt to compute `{} + {}`, which would overflow", move _439, const 1_usize) -> [success: bb138, unwind continue];
    }

    bb138: {
        _438 = move (_441.0: usize);
        StorageDead(_439);
        _442 = Len(_6);
        _443 = Lt(_438, _442);
        assert(move _443, "index out of bounds: the length is {} but the index is {}", move _442, _438) -> [success: bb139, unwind continue];
    }

    bb139: {
        _437 = &mut _6[_438];
        StorageLive(_444);
        StorageLive(_445);
        _445 = _415;
        StorageLive(_446);
        StorageLive(_447);
        _447 = _424;
        _446 = move _447 as u64 (IntToInt);
        StorageDead(_447);
        _448 = CheckedAdd(_445, _446);
        assert(!move (_448.1: bool), "attempt to compute `{} + {}`, which would overflow", move _445, move _446) -> [success: bb140, unwind continue];
    }

    bb140: {
        _444 = move (_448.0: u64);
        StorageDead(_446);
        StorageDead(_445);
        StorageLive(_451);
        StorageLive(_452);
        _452 = _444;
        StorageLive(_453);
        _453 = _269;
        _451 = core::num::<impl u64>::overflowing_add(move _452, move _453) -> [return: bb141, unwind continue];
    }

    bb141: {
        StorageDead(_453);
        StorageDead(_452);
        StorageLive(_449);
        _449 = (_451.0: u64);
        StorageLive(_450);
        _450 = (_451.1: bool);
        StorageDead(_451);
        StorageLive(_456);
        StorageLive(_457);
        _457 = _449;
        StorageLive(_458);
        _458 = (*_437);
        _456 = core::num::<impl u64>::overflowing_add(move _457, move _458) -> [return: bb142, unwind continue];
    }

    bb142: {
        StorageDead(_458);
        StorageDead(_457);
        StorageLive(_454);
        _454 = (_456.0: u64);
        StorageLive(_455);
        _455 = (_456.1: bool);
        StorageDead(_456);
        StorageLive(_459);
        _459 = _454;
        (*_437) = move _459;
        StorageDead(_459);
        StorageLive(_460);
        StorageLive(_461);
        _461 = _450;
        StorageLive(_462);
        _462 = _455;
        _460 = BitOr(move _461, move _462);
        StorageDead(_462);
        StorageDead(_461);
        _436 = move _460 as u64 (IntToInt);
        StorageDead(_460);
        StorageDead(_455);
        StorageDead(_454);
        StorageDead(_450);
        StorageDead(_449);
        StorageDead(_444);
        StorageDead(_438);
        StorageDead(_437);
        _269 = move _436;
        _400 = const ();
        StorageDead(_436);
        StorageDead(_424);
        StorageDead(_416);
        StorageDead(_415);
        StorageDead(_411);
        goto -> bb144;
    }

    bb143: {
        StorageDead(_410);
        StorageDead(_407);
        StorageDead(_406);
        StorageDead(_405);
        StorageDead(_403);
        _400 = const ();
        goto -> bb144;
    }

    bb144: {
        StorageDead(_402);
        goto -> bb146;
    }

    bb145: {
        _400 = const ();
        goto -> bb146;
    }

    bb146: {
        StorageDead(_401);
        StorageDead(_400);
        StorageLive(_463);
        StorageLive(_464);
        _464 = Ge(const _, const 0_usize);
        switchInt(move _464) -> [0: bb165, otherwise: bb147];
    }

    bb147: {
        StorageLive(_465);
        StorageLive(_466);
        _1065 = const _;
        _466 = &(*_1065);
        StorageLive(_468);
        StorageLive(_469);
        StorageLive(_470);
        _470 = const _;
        _471 = Len((*_4));
        _472 = Lt(_470, _471);
        assert(move _472, "index out of bounds: the length is {} but the index is {}", move _471, _470) -> [success: bb148, unwind continue];
    }

    bb148: {
        _469 = (*_4)[_470];
        StorageLive(_473);
        _473 = _269;
        _468 = (move _469, move _473);
        _465 = <{closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.5\src\uint.rs:257:67: 257:73} as Fn<(u64, u64)>>::call(move _466, move _468) -> [return: bb149, unwind continue];
    }

    bb149: {
        switchInt(move _465) -> [0: bb163, otherwise: bb150];
    }

    bb150: {
        StorageDead(_473);
        StorageDead(_470);
        StorageDead(_469);
        StorageDead(_468);
        StorageDead(_466);
        StorageLive(_474);
        StorageLive(_475);
        _475 = const _;
        _476 = Len((*_4));
        _477 = Lt(_475, _476);
        assert(move _477, "index out of bounds: the length is {} but the index is {}", move _476, _475) -> [success: bb151, unwind continue];
    }

    bb151: {
        _474 = (*_4)[_475];
        StorageDead(_475);
        StorageLive(_480);
        StorageLive(_481);
        StorageLive(_482);
        StorageLive(_483);
        _483 = _474;
        _482 = move _483 as u128 (IntToInt);
        StorageDead(_483);
        StorageLive(_484);
        StorageLive(_485);
        _485 = _270;
        _484 = move _485 as u128 (IntToInt);
        StorageDead(_485);
        _486 = CheckedMul(_482, _484);
        assert(!move (_486.1: bool), "attempt to compute `{} * {}`, which would overflow", move _482, move _484) -> [success: bb152, unwind continue];
    }

    bb152: {
        _481 = move (_486.0: u128);
        StorageDead(_484);
        StorageDead(_482);
        _480 = uint_types::U256::split_u128(move _481) -> [return: bb153, unwind continue];
    }

    bb153: {
        StorageDead(_481);
        StorageLive(_478);
        _478 = (_480.0: u64);
        StorageLive(_479);
        _479 = (_480.1: u64);
        StorageDead(_480);
        StorageLive(_487);
        StorageLive(_488);
        StorageLive(_489);
        _490 = CheckedAdd(const _, const _);
        assert(!move (_490.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const _) -> [success: bb154, unwind continue];
    }

    bb154: {
        _489 = move (_490.0: usize);
        _491 = Len(_6);
        _492 = Lt(_489, _491);
        assert(move _492, "index out of bounds: the length is {} but the index is {}", move _491, _489) -> [success: bb155, unwind continue];
    }

    bb155: {
        _488 = &mut _6[_489];
        StorageLive(_495);
        StorageLive(_496);
        _496 = _479;
        StorageLive(_497);
        _497 = (*_488);
        _495 = core::num::<impl u64>::overflowing_add(move _496, move _497) -> [return: bb156, unwind continue];
    }

    bb156: {
        StorageDead(_497);
        StorageDead(_496);
        StorageLive(_493);
        _493 = (_495.0: u64);
        StorageLive(_494);
        _494 = (_495.1: bool);
        StorageDead(_495);
        StorageLive(_498);
        _498 = _493;
        (*_488) = move _498;
        StorageDead(_498);
        _487 = _494;
        StorageDead(_494);
        StorageDead(_493);
        StorageDead(_489);
        StorageDead(_488);
        StorageLive(_499);
        StorageLive(_500);
        StorageLive(_501);
        StorageLive(_502);
        _503 = CheckedAdd(const _, const _);
        assert(!move (_503.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const _) -> [success: bb157, unwind continue];
    }

    bb157: {
        _502 = move (_503.0: usize);
        _504 = CheckedAdd(_502, const 1_usize);
        assert(!move (_504.1: bool), "attempt to compute `{} + {}`, which would overflow", move _502, const 1_usize) -> [success: bb158, unwind continue];
    }

    bb158: {
        _501 = move (_504.0: usize);
        StorageDead(_502);
        _505 = Len(_6);
        _506 = Lt(_501, _505);
        assert(move _506, "index out of bounds: the length is {} but the index is {}", move _505, _501) -> [success: bb159, unwind continue];
    }

    bb159: {
        _500 = &mut _6[_501];
        StorageLive(_507);
        StorageLive(_508);
        _508 = _478;
        StorageLive(_509);
        StorageLive(_510);
        _510 = _487;
        _509 = move _510 as u64 (IntToInt);
        StorageDead(_510);
        _511 = CheckedAdd(_508, _509);
        assert(!move (_511.1: bool), "attempt to compute `{} + {}`, which would overflow", move _508, move _509) -> [success: bb160, unwind continue];
    }

    bb160: {
        _507 = move (_511.0: u64);
        StorageDead(_509);
        StorageDead(_508);
        StorageLive(_514);
        StorageLive(_515);
        _515 = _507;
        StorageLive(_516);
        _516 = _269;
        _514 = core::num::<impl u64>::overflowing_add(move _515, move _516) -> [return: bb161, unwind continue];
    }

    bb161: {
        StorageDead(_516);
        StorageDead(_515);
        StorageLive(_512);
        _512 = (_514.0: u64);
        StorageLive(_513);
        _513 = (_514.1: bool);
        StorageDead(_514);
        StorageLive(_519);
        StorageLive(_520);
        _520 = _512;
        StorageLive(_521);
        _521 = (*_500);
        _519 = core::num::<impl u64>::overflowing_add(move _520, move _521) -> [return: bb162, unwind continue];
    }

    bb162: {
        StorageDead(_521);
        StorageDead(_520);
        StorageLive(_517);
        _517 = (_519.0: u64);
        StorageLive(_518);
        _518 = (_519.1: bool);
        StorageDead(_519);
        StorageLive(_522);
        _522 = _517;
        (*_500) = move _522;
        StorageDead(_522);
        StorageLive(_523);
        StorageLive(_524);
        _524 = _513;
        StorageLive(_525);
        _525 = _518;
        _523 = BitOr(move _524, move _525);
        StorageDead(_525);
        StorageDead(_524);
        _499 = move _523 as u64 (IntToInt);
        StorageDead(_523);
        StorageDead(_518);
        StorageDead(_517);
        StorageDead(_513);
        StorageDead(_512);
        StorageDead(_507);
        StorageDead(_501);
        StorageDead(_500);
        _269 = move _499;
        _463 = const ();
        StorageDead(_499);
        StorageDead(_487);
        StorageDead(_479);
        StorageDead(_478);
        StorageDead(_474);
        goto -> bb164;
    }

    bb163: {
        StorageDead(_473);
        StorageDead(_470);
        StorageDead(_469);
        StorageDead(_468);
        StorageDead(_466);
        _463 = const ();
        goto -> bb164;
    }

    bb164: {
        StorageDead(_465);
        goto -> bb166;
    }

    bb165: {
        _463 = const ();
        goto -> bb166;
    }

    bb166: {
        StorageDead(_464);
        StorageDead(_463);
        _267 = const ();
        StorageDead(_270);
        StorageDead(_269);
        goto -> bb168;
    }

    bb167: {
        _267 = const ();
        goto -> bb168;
    }

    bb168: {
        StorageDead(_268);
        StorageDead(_267);
        StorageLive(_526);
        StorageLive(_527);
        _527 = Ge(const _, const 0_usize);
        switchInt(move _527) -> [0: bb251, otherwise: bb169];
    }

    bb169: {
        StorageLive(_528);
        _528 = const 0_u64;
        StorageLive(_529);
        StorageLive(_530);
        _530 = const _;
        _531 = Len((*_5));
        _532 = Lt(_530, _531);
        assert(move _532, "index out of bounds: the length is {} but the index is {}", move _531, _530) -> [success: bb170, unwind continue];
    }

    bb170: {
        _529 = (*_5)[_530];
        StorageDead(_530);
        StorageLive(_533);
        StorageLive(_534);
        _534 = Ge(const _, const 0_usize);
        switchInt(move _534) -> [0: bb189, otherwise: bb171];
    }

    bb171: {
        StorageLive(_535);
        StorageLive(_536);
        _1064 = const _;
        _536 = &(*_1064);
        StorageLive(_538);
        StorageLive(_539);
        StorageLive(_540);
        _540 = const _;
        _541 = Len((*_4));
        _542 = Lt(_540, _541);
        assert(move _542, "index out of bounds: the length is {} but the index is {}", move _541, _540) -> [success: bb172, unwind continue];
    }

    bb172: {
        _539 = (*_4)[_540];
        StorageLive(_543);
        _543 = _528;
        _538 = (move _539, move _543);
        _535 = <{closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.5\src\uint.rs:257:67: 257:73} as Fn<(u64, u64)>>::call(move _536, move _538) -> [return: bb173, unwind continue];
    }

    bb173: {
        switchInt(move _535) -> [0: bb187, otherwise: bb174];
    }

    bb174: {
        StorageDead(_543);
        StorageDead(_540);
        StorageDead(_539);
        StorageDead(_538);
        StorageDead(_536);
        StorageLive(_544);
        StorageLive(_545);
        _545 = const _;
        _546 = Len((*_4));
        _547 = Lt(_545, _546);
        assert(move _547, "index out of bounds: the length is {} but the index is {}", move _546, _545) -> [success: bb175, unwind continue];
    }

    bb175: {
        _544 = (*_4)[_545];
        StorageDead(_545);
        StorageLive(_550);
        StorageLive(_551);
        StorageLive(_552);
        StorageLive(_553);
        _553 = _544;
        _552 = move _553 as u128 (IntToInt);
        StorageDead(_553);
        StorageLive(_554);
        StorageLive(_555);
        _555 = _529;
        _554 = move _555 as u128 (IntToInt);
        StorageDead(_555);
        _556 = CheckedMul(_552, _554);
        assert(!move (_556.1: bool), "attempt to compute `{} * {}`, which would overflow", move _552, move _554) -> [success: bb176, unwind continue];
    }

    bb176: {
        _551 = move (_556.0: u128);
        StorageDead(_554);
        StorageDead(_552);
        _550 = uint_types::U256::split_u128(move _551) -> [return: bb177, unwind continue];
    }

    bb177: {
        StorageDead(_551);
        StorageLive(_548);
        _548 = (_550.0: u64);
        StorageLive(_549);
        _549 = (_550.1: u64);
        StorageDead(_550);
        StorageLive(_557);
        StorageLive(_558);
        StorageLive(_559);
        _560 = CheckedAdd(const _, const _);
        assert(!move (_560.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const _) -> [success: bb178, unwind continue];
    }

    bb178: {
        _559 = move (_560.0: usize);
        _561 = Len(_6);
        _562 = Lt(_559, _561);
        assert(move _562, "index out of bounds: the length is {} but the index is {}", move _561, _559) -> [success: bb179, unwind continue];
    }

    bb179: {
        _558 = &mut _6[_559];
        StorageLive(_565);
        StorageLive(_566);
        _566 = _549;
        StorageLive(_567);
        _567 = (*_558);
        _565 = core::num::<impl u64>::overflowing_add(move _566, move _567) -> [return: bb180, unwind continue];
    }

    bb180: {
        StorageDead(_567);
        StorageDead(_566);
        StorageLive(_563);
        _563 = (_565.0: u64);
        StorageLive(_564);
        _564 = (_565.1: bool);
        StorageDead(_565);
        StorageLive(_568);
        _568 = _563;
        (*_558) = move _568;
        StorageDead(_568);
        _557 = _564;
        StorageDead(_564);
        StorageDead(_563);
        StorageDead(_559);
        StorageDead(_558);
        StorageLive(_569);
        StorageLive(_570);
        StorageLive(_571);
        StorageLive(_572);
        _573 = CheckedAdd(const _, const _);
        assert(!move (_573.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const _) -> [success: bb181, unwind continue];
    }

    bb181: {
        _572 = move (_573.0: usize);
        _574 = CheckedAdd(_572, const 1_usize);
        assert(!move (_574.1: bool), "attempt to compute `{} + {}`, which would overflow", move _572, const 1_usize) -> [success: bb182, unwind continue];
    }

    bb182: {
        _571 = move (_574.0: usize);
        StorageDead(_572);
        _575 = Len(_6);
        _576 = Lt(_571, _575);
        assert(move _576, "index out of bounds: the length is {} but the index is {}", move _575, _571) -> [success: bb183, unwind continue];
    }

    bb183: {
        _570 = &mut _6[_571];
        StorageLive(_577);
        StorageLive(_578);
        _578 = _548;
        StorageLive(_579);
        StorageLive(_580);
        _580 = _557;
        _579 = move _580 as u64 (IntToInt);
        StorageDead(_580);
        _581 = CheckedAdd(_578, _579);
        assert(!move (_581.1: bool), "attempt to compute `{} + {}`, which would overflow", move _578, move _579) -> [success: bb184, unwind continue];
    }

    bb184: {
        _577 = move (_581.0: u64);
        StorageDead(_579);
        StorageDead(_578);
        StorageLive(_584);
        StorageLive(_585);
        _585 = _577;
        StorageLive(_586);
        _586 = _528;
        _584 = core::num::<impl u64>::overflowing_add(move _585, move _586) -> [return: bb185, unwind continue];
    }

    bb185: {
        StorageDead(_586);
        StorageDead(_585);
        StorageLive(_582);
        _582 = (_584.0: u64);
        StorageLive(_583);
        _583 = (_584.1: bool);
        StorageDead(_584);
        StorageLive(_589);
        StorageLive(_590);
        _590 = _582;
        StorageLive(_591);
        _591 = (*_570);
        _589 = core::num::<impl u64>::overflowing_add(move _590, move _591) -> [return: bb186, unwind continue];
    }

    bb186: {
        StorageDead(_591);
        StorageDead(_590);
        StorageLive(_587);
        _587 = (_589.0: u64);
        StorageLive(_588);
        _588 = (_589.1: bool);
        StorageDead(_589);
        StorageLive(_592);
        _592 = _587;
        (*_570) = move _592;
        StorageDead(_592);
        StorageLive(_593);
        StorageLive(_594);
        _594 = _583;
        StorageLive(_595);
        _595 = _588;
        _593 = BitOr(move _594, move _595);
        StorageDead(_595);
        StorageDead(_594);
        _569 = move _593 as u64 (IntToInt);
        StorageDead(_593);
        StorageDead(_588);
        StorageDead(_587);
        StorageDead(_583);
        StorageDead(_582);
        StorageDead(_577);
        StorageDead(_571);
        StorageDead(_570);
        _528 = move _569;
        _533 = const ();
        StorageDead(_569);
        StorageDead(_557);
        StorageDead(_549);
        StorageDead(_548);
        StorageDead(_544);
        goto -> bb188;
    }

    bb187: {
        StorageDead(_543);
        StorageDead(_540);
        StorageDead(_539);
        StorageDead(_538);
        StorageDead(_536);
        _533 = const ();
        goto -> bb188;
    }

    bb188: {
        StorageDead(_535);
        goto -> bb190;
    }

    bb189: {
        _533 = const ();
        goto -> bb190;
    }

    bb190: {
        StorageDead(_534);
        StorageDead(_533);
        StorageLive(_596);
        StorageLive(_597);
        _597 = Ge(const _, const 0_usize);
        switchInt(move _597) -> [0: bb209, otherwise: bb191];
    }

    bb191: {
        StorageLive(_598);
        StorageLive(_599);
        _1063 = const _;
        _599 = &(*_1063);
        StorageLive(_601);
        StorageLive(_602);
        StorageLive(_603);
        _603 = const _;
        _604 = Len((*_4));
        _605 = Lt(_603, _604);
        assert(move _605, "index out of bounds: the length is {} but the index is {}", move _604, _603) -> [success: bb192, unwind continue];
    }

    bb192: {
        _602 = (*_4)[_603];
        StorageLive(_606);
        _606 = _528;
        _601 = (move _602, move _606);
        _598 = <{closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.5\src\uint.rs:257:67: 257:73} as Fn<(u64, u64)>>::call(move _599, move _601) -> [return: bb193, unwind continue];
    }

    bb193: {
        switchInt(move _598) -> [0: bb207, otherwise: bb194];
    }

    bb194: {
        StorageDead(_606);
        StorageDead(_603);
        StorageDead(_602);
        StorageDead(_601);
        StorageDead(_599);
        StorageLive(_607);
        StorageLive(_608);
        _608 = const _;
        _609 = Len((*_4));
        _610 = Lt(_608, _609);
        assert(move _610, "index out of bounds: the length is {} but the index is {}", move _609, _608) -> [success: bb195, unwind continue];
    }

    bb195: {
        _607 = (*_4)[_608];
        StorageDead(_608);
        StorageLive(_613);
        StorageLive(_614);
        StorageLive(_615);
        StorageLive(_616);
        _616 = _607;
        _615 = move _616 as u128 (IntToInt);
        StorageDead(_616);
        StorageLive(_617);
        StorageLive(_618);
        _618 = _529;
        _617 = move _618 as u128 (IntToInt);
        StorageDead(_618);
        _619 = CheckedMul(_615, _617);
        assert(!move (_619.1: bool), "attempt to compute `{} * {}`, which would overflow", move _615, move _617) -> [success: bb196, unwind continue];
    }

    bb196: {
        _614 = move (_619.0: u128);
        StorageDead(_617);
        StorageDead(_615);
        _613 = uint_types::U256::split_u128(move _614) -> [return: bb197, unwind continue];
    }

    bb197: {
        StorageDead(_614);
        StorageLive(_611);
        _611 = (_613.0: u64);
        StorageLive(_612);
        _612 = (_613.1: u64);
        StorageDead(_613);
        StorageLive(_620);
        StorageLive(_621);
        StorageLive(_622);
        _623 = CheckedAdd(const _, const _);
        assert(!move (_623.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const _) -> [success: bb198, unwind continue];
    }

    bb198: {
        _622 = move (_623.0: usize);
        _624 = Len(_6);
        _625 = Lt(_622, _624);
        assert(move _625, "index out of bounds: the length is {} but the index is {}", move _624, _622) -> [success: bb199, unwind continue];
    }

    bb199: {
        _621 = &mut _6[_622];
        StorageLive(_628);
        StorageLive(_629);
        _629 = _612;
        StorageLive(_630);
        _630 = (*_621);
        _628 = core::num::<impl u64>::overflowing_add(move _629, move _630) -> [return: bb200, unwind continue];
    }

    bb200: {
        StorageDead(_630);
        StorageDead(_629);
        StorageLive(_626);
        _626 = (_628.0: u64);
        StorageLive(_627);
        _627 = (_628.1: bool);
        StorageDead(_628);
        StorageLive(_631);
        _631 = _626;
        (*_621) = move _631;
        StorageDead(_631);
        _620 = _627;
        StorageDead(_627);
        StorageDead(_626);
        StorageDead(_622);
        StorageDead(_621);
        StorageLive(_632);
        StorageLive(_633);
        StorageLive(_634);
        StorageLive(_635);
        _636 = CheckedAdd(const _, const _);
        assert(!move (_636.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const _) -> [success: bb201, unwind continue];
    }

    bb201: {
        _635 = move (_636.0: usize);
        _637 = CheckedAdd(_635, const 1_usize);
        assert(!move (_637.1: bool), "attempt to compute `{} + {}`, which would overflow", move _635, const 1_usize) -> [success: bb202, unwind continue];
    }

    bb202: {
        _634 = move (_637.0: usize);
        StorageDead(_635);
        _638 = Len(_6);
        _639 = Lt(_634, _638);
        assert(move _639, "index out of bounds: the length is {} but the index is {}", move _638, _634) -> [success: bb203, unwind continue];
    }

    bb203: {
        _633 = &mut _6[_634];
        StorageLive(_640);
        StorageLive(_641);
        _641 = _611;
        StorageLive(_642);
        StorageLive(_643);
        _643 = _620;
        _642 = move _643 as u64 (IntToInt);
        StorageDead(_643);
        _644 = CheckedAdd(_641, _642);
        assert(!move (_644.1: bool), "attempt to compute `{} + {}`, which would overflow", move _641, move _642) -> [success: bb204, unwind continue];
    }

    bb204: {
        _640 = move (_644.0: u64);
        StorageDead(_642);
        StorageDead(_641);
        StorageLive(_647);
        StorageLive(_648);
        _648 = _640;
        StorageLive(_649);
        _649 = _528;
        _647 = core::num::<impl u64>::overflowing_add(move _648, move _649) -> [return: bb205, unwind continue];
    }

    bb205: {
        StorageDead(_649);
        StorageDead(_648);
        StorageLive(_645);
        _645 = (_647.0: u64);
        StorageLive(_646);
        _646 = (_647.1: bool);
        StorageDead(_647);
        StorageLive(_652);
        StorageLive(_653);
        _653 = _645;
        StorageLive(_654);
        _654 = (*_633);
        _652 = core::num::<impl u64>::overflowing_add(move _653, move _654) -> [return: bb206, unwind continue];
    }

    bb206: {
        StorageDead(_654);
        StorageDead(_653);
        StorageLive(_650);
        _650 = (_652.0: u64);
        StorageLive(_651);
        _651 = (_652.1: bool);
        StorageDead(_652);
        StorageLive(_655);
        _655 = _650;
        (*_633) = move _655;
        StorageDead(_655);
        StorageLive(_656);
        StorageLive(_657);
        _657 = _646;
        StorageLive(_658);
        _658 = _651;
        _656 = BitOr(move _657, move _658);
        StorageDead(_658);
        StorageDead(_657);
        _632 = move _656 as u64 (IntToInt);
        StorageDead(_656);
        StorageDead(_651);
        StorageDead(_650);
        StorageDead(_646);
        StorageDead(_645);
        StorageDead(_640);
        StorageDead(_634);
        StorageDead(_633);
        _528 = move _632;
        _596 = const ();
        StorageDead(_632);
        StorageDead(_620);
        StorageDead(_612);
        StorageDead(_611);
        StorageDead(_607);
        goto -> bb208;
    }

    bb207: {
        StorageDead(_606);
        StorageDead(_603);
        StorageDead(_602);
        StorageDead(_601);
        StorageDead(_599);
        _596 = const ();
        goto -> bb208;
    }

    bb208: {
        StorageDead(_598);
        goto -> bb210;
    }

    bb209: {
        _596 = const ();
        goto -> bb210;
    }

    bb210: {
        StorageDead(_597);
        StorageDead(_596);
        StorageLive(_659);
        StorageLive(_660);
        _660 = Ge(const _, const 0_usize);
        switchInt(move _660) -> [0: bb229, otherwise: bb211];
    }

    bb211: {
        StorageLive(_661);
        StorageLive(_662);
        _1062 = const _;
        _662 = &(*_1062);
        StorageLive(_664);
        StorageLive(_665);
        StorageLive(_666);
        _666 = const _;
        _667 = Len((*_4));
        _668 = Lt(_666, _667);
        assert(move _668, "index out of bounds: the length is {} but the index is {}", move _667, _666) -> [success: bb212, unwind continue];
    }

    bb212: {
        _665 = (*_4)[_666];
        StorageLive(_669);
        _669 = _528;
        _664 = (move _665, move _669);
        _661 = <{closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.5\src\uint.rs:257:67: 257:73} as Fn<(u64, u64)>>::call(move _662, move _664) -> [return: bb213, unwind continue];
    }

    bb213: {
        switchInt(move _661) -> [0: bb227, otherwise: bb214];
    }

    bb214: {
        StorageDead(_669);
        StorageDead(_666);
        StorageDead(_665);
        StorageDead(_664);
        StorageDead(_662);
        StorageLive(_670);
        StorageLive(_671);
        _671 = const _;
        _672 = Len((*_4));
        _673 = Lt(_671, _672);
        assert(move _673, "index out of bounds: the length is {} but the index is {}", move _672, _671) -> [success: bb215, unwind continue];
    }

    bb215: {
        _670 = (*_4)[_671];
        StorageDead(_671);
        StorageLive(_676);
        StorageLive(_677);
        StorageLive(_678);
        StorageLive(_679);
        _679 = _670;
        _678 = move _679 as u128 (IntToInt);
        StorageDead(_679);
        StorageLive(_680);
        StorageLive(_681);
        _681 = _529;
        _680 = move _681 as u128 (IntToInt);
        StorageDead(_681);
        _682 = CheckedMul(_678, _680);
        assert(!move (_682.1: bool), "attempt to compute `{} * {}`, which would overflow", move _678, move _680) -> [success: bb216, unwind continue];
    }

    bb216: {
        _677 = move (_682.0: u128);
        StorageDead(_680);
        StorageDead(_678);
        _676 = uint_types::U256::split_u128(move _677) -> [return: bb217, unwind continue];
    }

    bb217: {
        StorageDead(_677);
        StorageLive(_674);
        _674 = (_676.0: u64);
        StorageLive(_675);
        _675 = (_676.1: u64);
        StorageDead(_676);
        StorageLive(_683);
        StorageLive(_684);
        StorageLive(_685);
        _686 = CheckedAdd(const _, const _);
        assert(!move (_686.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const _) -> [success: bb218, unwind continue];
    }

    bb218: {
        _685 = move (_686.0: usize);
        _687 = Len(_6);
        _688 = Lt(_685, _687);
        assert(move _688, "index out of bounds: the length is {} but the index is {}", move _687, _685) -> [success: bb219, unwind continue];
    }

    bb219: {
        _684 = &mut _6[_685];
        StorageLive(_691);
        StorageLive(_692);
        _692 = _675;
        StorageLive(_693);
        _693 = (*_684);
        _691 = core::num::<impl u64>::overflowing_add(move _692, move _693) -> [return: bb220, unwind continue];
    }

    bb220: {
        StorageDead(_693);
        StorageDead(_692);
        StorageLive(_689);
        _689 = (_691.0: u64);
        StorageLive(_690);
        _690 = (_691.1: bool);
        StorageDead(_691);
        StorageLive(_694);
        _694 = _689;
        (*_684) = move _694;
        StorageDead(_694);
        _683 = _690;
        StorageDead(_690);
        StorageDead(_689);
        StorageDead(_685);
        StorageDead(_684);
        StorageLive(_695);
        StorageLive(_696);
        StorageLive(_697);
        StorageLive(_698);
        _699 = CheckedAdd(const _, const _);
        assert(!move (_699.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const _) -> [success: bb221, unwind continue];
    }

    bb221: {
        _698 = move (_699.0: usize);
        _700 = CheckedAdd(_698, const 1_usize);
        assert(!move (_700.1: bool), "attempt to compute `{} + {}`, which would overflow", move _698, const 1_usize) -> [success: bb222, unwind continue];
    }

    bb222: {
        _697 = move (_700.0: usize);
        StorageDead(_698);
        _701 = Len(_6);
        _702 = Lt(_697, _701);
        assert(move _702, "index out of bounds: the length is {} but the index is {}", move _701, _697) -> [success: bb223, unwind continue];
    }

    bb223: {
        _696 = &mut _6[_697];
        StorageLive(_703);
        StorageLive(_704);
        _704 = _674;
        StorageLive(_705);
        StorageLive(_706);
        _706 = _683;
        _705 = move _706 as u64 (IntToInt);
        StorageDead(_706);
        _707 = CheckedAdd(_704, _705);
        assert(!move (_707.1: bool), "attempt to compute `{} + {}`, which would overflow", move _704, move _705) -> [success: bb224, unwind continue];
    }

    bb224: {
        _703 = move (_707.0: u64);
        StorageDead(_705);
        StorageDead(_704);
        StorageLive(_710);
        StorageLive(_711);
        _711 = _703;
        StorageLive(_712);
        _712 = _528;
        _710 = core::num::<impl u64>::overflowing_add(move _711, move _712) -> [return: bb225, unwind continue];
    }

    bb225: {
        StorageDead(_712);
        StorageDead(_711);
        StorageLive(_708);
        _708 = (_710.0: u64);
        StorageLive(_709);
        _709 = (_710.1: bool);
        StorageDead(_710);
        StorageLive(_715);
        StorageLive(_716);
        _716 = _708;
        StorageLive(_717);
        _717 = (*_696);
        _715 = core::num::<impl u64>::overflowing_add(move _716, move _717) -> [return: bb226, unwind continue];
    }

    bb226: {
        StorageDead(_717);
        StorageDead(_716);
        StorageLive(_713);
        _713 = (_715.0: u64);
        StorageLive(_714);
        _714 = (_715.1: bool);
        StorageDead(_715);
        StorageLive(_718);
        _718 = _713;
        (*_696) = move _718;
        StorageDead(_718);
        StorageLive(_719);
        StorageLive(_720);
        _720 = _709;
        StorageLive(_721);
        _721 = _714;
        _719 = BitOr(move _720, move _721);
        StorageDead(_721);
        StorageDead(_720);
        _695 = move _719 as u64 (IntToInt);
        StorageDead(_719);
        StorageDead(_714);
        StorageDead(_713);
        StorageDead(_709);
        StorageDead(_708);
        StorageDead(_703);
        StorageDead(_697);
        StorageDead(_696);
        _528 = move _695;
        _659 = const ();
        StorageDead(_695);
        StorageDead(_683);
        StorageDead(_675);
        StorageDead(_674);
        StorageDead(_670);
        goto -> bb228;
    }

    bb227: {
        StorageDead(_669);
        StorageDead(_666);
        StorageDead(_665);
        StorageDead(_664);
        StorageDead(_662);
        _659 = const ();
        goto -> bb228;
    }

    bb228: {
        StorageDead(_661);
        goto -> bb230;
    }

    bb229: {
        _659 = const ();
        goto -> bb230;
    }

    bb230: {
        StorageDead(_660);
        StorageDead(_659);
        StorageLive(_722);
        StorageLive(_723);
        _723 = Ge(const _, const 0_usize);
        switchInt(move _723) -> [0: bb249, otherwise: bb231];
    }

    bb231: {
        StorageLive(_724);
        StorageLive(_725);
        _1061 = const _;
        _725 = &(*_1061);
        StorageLive(_727);
        StorageLive(_728);
        StorageLive(_729);
        _729 = const _;
        _730 = Len((*_4));
        _731 = Lt(_729, _730);
        assert(move _731, "index out of bounds: the length is {} but the index is {}", move _730, _729) -> [success: bb232, unwind continue];
    }

    bb232: {
        _728 = (*_4)[_729];
        StorageLive(_732);
        _732 = _528;
        _727 = (move _728, move _732);
        _724 = <{closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.5\src\uint.rs:257:67: 257:73} as Fn<(u64, u64)>>::call(move _725, move _727) -> [return: bb233, unwind continue];
    }

    bb233: {
        switchInt(move _724) -> [0: bb247, otherwise: bb234];
    }

    bb234: {
        StorageDead(_732);
        StorageDead(_729);
        StorageDead(_728);
        StorageDead(_727);
        StorageDead(_725);
        StorageLive(_733);
        StorageLive(_734);
        _734 = const _;
        _735 = Len((*_4));
        _736 = Lt(_734, _735);
        assert(move _736, "index out of bounds: the length is {} but the index is {}", move _735, _734) -> [success: bb235, unwind continue];
    }

    bb235: {
        _733 = (*_4)[_734];
        StorageDead(_734);
        StorageLive(_739);
        StorageLive(_740);
        StorageLive(_741);
        StorageLive(_742);
        _742 = _733;
        _741 = move _742 as u128 (IntToInt);
        StorageDead(_742);
        StorageLive(_743);
        StorageLive(_744);
        _744 = _529;
        _743 = move _744 as u128 (IntToInt);
        StorageDead(_744);
        _745 = CheckedMul(_741, _743);
        assert(!move (_745.1: bool), "attempt to compute `{} * {}`, which would overflow", move _741, move _743) -> [success: bb236, unwind continue];
    }

    bb236: {
        _740 = move (_745.0: u128);
        StorageDead(_743);
        StorageDead(_741);
        _739 = uint_types::U256::split_u128(move _740) -> [return: bb237, unwind continue];
    }

    bb237: {
        StorageDead(_740);
        StorageLive(_737);
        _737 = (_739.0: u64);
        StorageLive(_738);
        _738 = (_739.1: u64);
        StorageDead(_739);
        StorageLive(_746);
        StorageLive(_747);
        StorageLive(_748);
        _749 = CheckedAdd(const _, const _);
        assert(!move (_749.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const _) -> [success: bb238, unwind continue];
    }

    bb238: {
        _748 = move (_749.0: usize);
        _750 = Len(_6);
        _751 = Lt(_748, _750);
        assert(move _751, "index out of bounds: the length is {} but the index is {}", move _750, _748) -> [success: bb239, unwind continue];
    }

    bb239: {
        _747 = &mut _6[_748];
        StorageLive(_754);
        StorageLive(_755);
        _755 = _738;
        StorageLive(_756);
        _756 = (*_747);
        _754 = core::num::<impl u64>::overflowing_add(move _755, move _756) -> [return: bb240, unwind continue];
    }

    bb240: {
        StorageDead(_756);
        StorageDead(_755);
        StorageLive(_752);
        _752 = (_754.0: u64);
        StorageLive(_753);
        _753 = (_754.1: bool);
        StorageDead(_754);
        StorageLive(_757);
        _757 = _752;
        (*_747) = move _757;
        StorageDead(_757);
        _746 = _753;
        StorageDead(_753);
        StorageDead(_752);
        StorageDead(_748);
        StorageDead(_747);
        StorageLive(_758);
        StorageLive(_759);
        StorageLive(_760);
        StorageLive(_761);
        _762 = CheckedAdd(const _, const _);
        assert(!move (_762.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const _) -> [success: bb241, unwind continue];
    }

    bb241: {
        _761 = move (_762.0: usize);
        _763 = CheckedAdd(_761, const 1_usize);
        assert(!move (_763.1: bool), "attempt to compute `{} + {}`, which would overflow", move _761, const 1_usize) -> [success: bb242, unwind continue];
    }

    bb242: {
        _760 = move (_763.0: usize);
        StorageDead(_761);
        _764 = Len(_6);
        _765 = Lt(_760, _764);
        assert(move _765, "index out of bounds: the length is {} but the index is {}", move _764, _760) -> [success: bb243, unwind continue];
    }

    bb243: {
        _759 = &mut _6[_760];
        StorageLive(_766);
        StorageLive(_767);
        _767 = _737;
        StorageLive(_768);
        StorageLive(_769);
        _769 = _746;
        _768 = move _769 as u64 (IntToInt);
        StorageDead(_769);
        _770 = CheckedAdd(_767, _768);
        assert(!move (_770.1: bool), "attempt to compute `{} + {}`, which would overflow", move _767, move _768) -> [success: bb244, unwind continue];
    }

    bb244: {
        _766 = move (_770.0: u64);
        StorageDead(_768);
        StorageDead(_767);
        StorageLive(_773);
        StorageLive(_774);
        _774 = _766;
        StorageLive(_775);
        _775 = _528;
        _773 = core::num::<impl u64>::overflowing_add(move _774, move _775) -> [return: bb245, unwind continue];
    }

    bb245: {
        StorageDead(_775);
        StorageDead(_774);
        StorageLive(_771);
        _771 = (_773.0: u64);
        StorageLive(_772);
        _772 = (_773.1: bool);
        StorageDead(_773);
        StorageLive(_778);
        StorageLive(_779);
        _779 = _771;
        StorageLive(_780);
        _780 = (*_759);
        _778 = core::num::<impl u64>::overflowing_add(move _779, move _780) -> [return: bb246, unwind continue];
    }

    bb246: {
        StorageDead(_780);
        StorageDead(_779);
        StorageLive(_776);
        _776 = (_778.0: u64);
        StorageLive(_777);
        _777 = (_778.1: bool);
        StorageDead(_778);
        StorageLive(_781);
        _781 = _776;
        (*_759) = move _781;
        StorageDead(_781);
        StorageLive(_782);
        StorageLive(_783);
        _783 = _772;
        StorageLive(_784);
        _784 = _777;
        _782 = BitOr(move _783, move _784);
        StorageDead(_784);
        StorageDead(_783);
        _758 = move _782 as u64 (IntToInt);
        StorageDead(_782);
        StorageDead(_777);
        StorageDead(_776);
        StorageDead(_772);
        StorageDead(_771);
        StorageDead(_766);
        StorageDead(_760);
        StorageDead(_759);
        _528 = move _758;
        _722 = const ();
        StorageDead(_758);
        StorageDead(_746);
        StorageDead(_738);
        StorageDead(_737);
        StorageDead(_733);
        goto -> bb248;
    }

    bb247: {
        StorageDead(_732);
        StorageDead(_729);
        StorageDead(_728);
        StorageDead(_727);
        StorageDead(_725);
        _722 = const ();
        goto -> bb248;
    }

    bb248: {
        StorageDead(_724);
        goto -> bb250;
    }

    bb249: {
        _722 = const ();
        goto -> bb250;
    }

    bb250: {
        StorageDead(_723);
        StorageDead(_722);
        _526 = const ();
        StorageDead(_529);
        StorageDead(_528);
        goto -> bb252;
    }

    bb251: {
        _526 = const ();
        goto -> bb252;
    }

    bb252: {
        StorageDead(_527);
        StorageDead(_526);
        StorageLive(_785);
        StorageLive(_786);
        _786 = Ge(const _, const 0_usize);
        switchInt(move _786) -> [0: bb335, otherwise: bb253];
    }

    bb253: {
        StorageLive(_787);
        _787 = const 0_u64;
        StorageLive(_788);
        StorageLive(_789);
        _789 = const _;
        _790 = Len((*_5));
        _791 = Lt(_789, _790);
        assert(move _791, "index out of bounds: the length is {} but the index is {}", move _790, _789) -> [success: bb254, unwind continue];
    }

    bb254: {
        _788 = (*_5)[_789];
        StorageDead(_789);
        StorageLive(_792);
        StorageLive(_793);
        _793 = Ge(const _, const 0_usize);
        switchInt(move _793) -> [0: bb273, otherwise: bb255];
    }

    bb255: {
        StorageLive(_794);
        StorageLive(_795);
        _1060 = const _;
        _795 = &(*_1060);
        StorageLive(_797);
        StorageLive(_798);
        StorageLive(_799);
        _799 = const _;
        _800 = Len((*_4));
        _801 = Lt(_799, _800);
        assert(move _801, "index out of bounds: the length is {} but the index is {}", move _800, _799) -> [success: bb256, unwind continue];
    }

    bb256: {
        _798 = (*_4)[_799];
        StorageLive(_802);
        _802 = _787;
        _797 = (move _798, move _802);
        _794 = <{closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.5\src\uint.rs:257:67: 257:73} as Fn<(u64, u64)>>::call(move _795, move _797) -> [return: bb257, unwind continue];
    }

    bb257: {
        switchInt(move _794) -> [0: bb271, otherwise: bb258];
    }

    bb258: {
        StorageDead(_802);
        StorageDead(_799);
        StorageDead(_798);
        StorageDead(_797);
        StorageDead(_795);
        StorageLive(_803);
        StorageLive(_804);
        _804 = const _;
        _805 = Len((*_4));
        _806 = Lt(_804, _805);
        assert(move _806, "index out of bounds: the length is {} but the index is {}", move _805, _804) -> [success: bb259, unwind continue];
    }

    bb259: {
        _803 = (*_4)[_804];
        StorageDead(_804);
        StorageLive(_809);
        StorageLive(_810);
        StorageLive(_811);
        StorageLive(_812);
        _812 = _803;
        _811 = move _812 as u128 (IntToInt);
        StorageDead(_812);
        StorageLive(_813);
        StorageLive(_814);
        _814 = _788;
        _813 = move _814 as u128 (IntToInt);
        StorageDead(_814);
        _815 = CheckedMul(_811, _813);
        assert(!move (_815.1: bool), "attempt to compute `{} * {}`, which would overflow", move _811, move _813) -> [success: bb260, unwind continue];
    }

    bb260: {
        _810 = move (_815.0: u128);
        StorageDead(_813);
        StorageDead(_811);
        _809 = uint_types::U256::split_u128(move _810) -> [return: bb261, unwind continue];
    }

    bb261: {
        StorageDead(_810);
        StorageLive(_807);
        _807 = (_809.0: u64);
        StorageLive(_808);
        _808 = (_809.1: u64);
        StorageDead(_809);
        StorageLive(_816);
        StorageLive(_817);
        StorageLive(_818);
        _819 = CheckedAdd(const _, const _);
        assert(!move (_819.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const _) -> [success: bb262, unwind continue];
    }

    bb262: {
        _818 = move (_819.0: usize);
        _820 = Len(_6);
        _821 = Lt(_818, _820);
        assert(move _821, "index out of bounds: the length is {} but the index is {}", move _820, _818) -> [success: bb263, unwind continue];
    }

    bb263: {
        _817 = &mut _6[_818];
        StorageLive(_824);
        StorageLive(_825);
        _825 = _808;
        StorageLive(_826);
        _826 = (*_817);
        _824 = core::num::<impl u64>::overflowing_add(move _825, move _826) -> [return: bb264, unwind continue];
    }

    bb264: {
        StorageDead(_826);
        StorageDead(_825);
        StorageLive(_822);
        _822 = (_824.0: u64);
        StorageLive(_823);
        _823 = (_824.1: bool);
        StorageDead(_824);
        StorageLive(_827);
        _827 = _822;
        (*_817) = move _827;
        StorageDead(_827);
        _816 = _823;
        StorageDead(_823);
        StorageDead(_822);
        StorageDead(_818);
        StorageDead(_817);
        StorageLive(_828);
        StorageLive(_829);
        StorageLive(_830);
        StorageLive(_831);
        _832 = CheckedAdd(const _, const _);
        assert(!move (_832.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const _) -> [success: bb265, unwind continue];
    }

    bb265: {
        _831 = move (_832.0: usize);
        _833 = CheckedAdd(_831, const 1_usize);
        assert(!move (_833.1: bool), "attempt to compute `{} + {}`, which would overflow", move _831, const 1_usize) -> [success: bb266, unwind continue];
    }

    bb266: {
        _830 = move (_833.0: usize);
        StorageDead(_831);
        _834 = Len(_6);
        _835 = Lt(_830, _834);
        assert(move _835, "index out of bounds: the length is {} but the index is {}", move _834, _830) -> [success: bb267, unwind continue];
    }

    bb267: {
        _829 = &mut _6[_830];
        StorageLive(_836);
        StorageLive(_837);
        _837 = _807;
        StorageLive(_838);
        StorageLive(_839);
        _839 = _816;
        _838 = move _839 as u64 (IntToInt);
        StorageDead(_839);
        _840 = CheckedAdd(_837, _838);
        assert(!move (_840.1: bool), "attempt to compute `{} + {}`, which would overflow", move _837, move _838) -> [success: bb268, unwind continue];
    }

    bb268: {
        _836 = move (_840.0: u64);
        StorageDead(_838);
        StorageDead(_837);
        StorageLive(_843);
        StorageLive(_844);
        _844 = _836;
        StorageLive(_845);
        _845 = _787;
        _843 = core::num::<impl u64>::overflowing_add(move _844, move _845) -> [return: bb269, unwind continue];
    }

    bb269: {
        StorageDead(_845);
        StorageDead(_844);
        StorageLive(_841);
        _841 = (_843.0: u64);
        StorageLive(_842);
        _842 = (_843.1: bool);
        StorageDead(_843);
        StorageLive(_848);
        StorageLive(_849);
        _849 = _841;
        StorageLive(_850);
        _850 = (*_829);
        _848 = core::num::<impl u64>::overflowing_add(move _849, move _850) -> [return: bb270, unwind continue];
    }

    bb270: {
        StorageDead(_850);
        StorageDead(_849);
        StorageLive(_846);
        _846 = (_848.0: u64);
        StorageLive(_847);
        _847 = (_848.1: bool);
        StorageDead(_848);
        StorageLive(_851);
        _851 = _846;
        (*_829) = move _851;
        StorageDead(_851);
        StorageLive(_852);
        StorageLive(_853);
        _853 = _842;
        StorageLive(_854);
        _854 = _847;
        _852 = BitOr(move _853, move _854);
        StorageDead(_854);
        StorageDead(_853);
        _828 = move _852 as u64 (IntToInt);
        StorageDead(_852);
        StorageDead(_847);
        StorageDead(_846);
        StorageDead(_842);
        StorageDead(_841);
        StorageDead(_836);
        StorageDead(_830);
        StorageDead(_829);
        _787 = move _828;
        _792 = const ();
        StorageDead(_828);
        StorageDead(_816);
        StorageDead(_808);
        StorageDead(_807);
        StorageDead(_803);
        goto -> bb272;
    }

    bb271: {
        StorageDead(_802);
        StorageDead(_799);
        StorageDead(_798);
        StorageDead(_797);
        StorageDead(_795);
        _792 = const ();
        goto -> bb272;
    }

    bb272: {
        StorageDead(_794);
        goto -> bb274;
    }

    bb273: {
        _792 = const ();
        goto -> bb274;
    }

    bb274: {
        StorageDead(_793);
        StorageDead(_792);
        StorageLive(_855);
        StorageLive(_856);
        _856 = Ge(const _, const 0_usize);
        switchInt(move _856) -> [0: bb293, otherwise: bb275];
    }

    bb275: {
        StorageLive(_857);
        StorageLive(_858);
        _1059 = const _;
        _858 = &(*_1059);
        StorageLive(_860);
        StorageLive(_861);
        StorageLive(_862);
        _862 = const _;
        _863 = Len((*_4));
        _864 = Lt(_862, _863);
        assert(move _864, "index out of bounds: the length is {} but the index is {}", move _863, _862) -> [success: bb276, unwind continue];
    }

    bb276: {
        _861 = (*_4)[_862];
        StorageLive(_865);
        _865 = _787;
        _860 = (move _861, move _865);
        _857 = <{closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.5\src\uint.rs:257:67: 257:73} as Fn<(u64, u64)>>::call(move _858, move _860) -> [return: bb277, unwind continue];
    }

    bb277: {
        switchInt(move _857) -> [0: bb291, otherwise: bb278];
    }

    bb278: {
        StorageDead(_865);
        StorageDead(_862);
        StorageDead(_861);
        StorageDead(_860);
        StorageDead(_858);
        StorageLive(_866);
        StorageLive(_867);
        _867 = const _;
        _868 = Len((*_4));
        _869 = Lt(_867, _868);
        assert(move _869, "index out of bounds: the length is {} but the index is {}", move _868, _867) -> [success: bb279, unwind continue];
    }

    bb279: {
        _866 = (*_4)[_867];
        StorageDead(_867);
        StorageLive(_872);
        StorageLive(_873);
        StorageLive(_874);
        StorageLive(_875);
        _875 = _866;
        _874 = move _875 as u128 (IntToInt);
        StorageDead(_875);
        StorageLive(_876);
        StorageLive(_877);
        _877 = _788;
        _876 = move _877 as u128 (IntToInt);
        StorageDead(_877);
        _878 = CheckedMul(_874, _876);
        assert(!move (_878.1: bool), "attempt to compute `{} * {}`, which would overflow", move _874, move _876) -> [success: bb280, unwind continue];
    }

    bb280: {
        _873 = move (_878.0: u128);
        StorageDead(_876);
        StorageDead(_874);
        _872 = uint_types::U256::split_u128(move _873) -> [return: bb281, unwind continue];
    }

    bb281: {
        StorageDead(_873);
        StorageLive(_870);
        _870 = (_872.0: u64);
        StorageLive(_871);
        _871 = (_872.1: u64);
        StorageDead(_872);
        StorageLive(_879);
        StorageLive(_880);
        StorageLive(_881);
        _882 = CheckedAdd(const _, const _);
        assert(!move (_882.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const _) -> [success: bb282, unwind continue];
    }

    bb282: {
        _881 = move (_882.0: usize);
        _883 = Len(_6);
        _884 = Lt(_881, _883);
        assert(move _884, "index out of bounds: the length is {} but the index is {}", move _883, _881) -> [success: bb283, unwind continue];
    }

    bb283: {
        _880 = &mut _6[_881];
        StorageLive(_887);
        StorageLive(_888);
        _888 = _871;
        StorageLive(_889);
        _889 = (*_880);
        _887 = core::num::<impl u64>::overflowing_add(move _888, move _889) -> [return: bb284, unwind continue];
    }

    bb284: {
        StorageDead(_889);
        StorageDead(_888);
        StorageLive(_885);
        _885 = (_887.0: u64);
        StorageLive(_886);
        _886 = (_887.1: bool);
        StorageDead(_887);
        StorageLive(_890);
        _890 = _885;
        (*_880) = move _890;
        StorageDead(_890);
        _879 = _886;
        StorageDead(_886);
        StorageDead(_885);
        StorageDead(_881);
        StorageDead(_880);
        StorageLive(_891);
        StorageLive(_892);
        StorageLive(_893);
        StorageLive(_894);
        _895 = CheckedAdd(const _, const _);
        assert(!move (_895.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const _) -> [success: bb285, unwind continue];
    }

    bb285: {
        _894 = move (_895.0: usize);
        _896 = CheckedAdd(_894, const 1_usize);
        assert(!move (_896.1: bool), "attempt to compute `{} + {}`, which would overflow", move _894, const 1_usize) -> [success: bb286, unwind continue];
    }

    bb286: {
        _893 = move (_896.0: usize);
        StorageDead(_894);
        _897 = Len(_6);
        _898 = Lt(_893, _897);
        assert(move _898, "index out of bounds: the length is {} but the index is {}", move _897, _893) -> [success: bb287, unwind continue];
    }

    bb287: {
        _892 = &mut _6[_893];
        StorageLive(_899);
        StorageLive(_900);
        _900 = _870;
        StorageLive(_901);
        StorageLive(_902);
        _902 = _879;
        _901 = move _902 as u64 (IntToInt);
        StorageDead(_902);
        _903 = CheckedAdd(_900, _901);
        assert(!move (_903.1: bool), "attempt to compute `{} + {}`, which would overflow", move _900, move _901) -> [success: bb288, unwind continue];
    }

    bb288: {
        _899 = move (_903.0: u64);
        StorageDead(_901);
        StorageDead(_900);
        StorageLive(_906);
        StorageLive(_907);
        _907 = _899;
        StorageLive(_908);
        _908 = _787;
        _906 = core::num::<impl u64>::overflowing_add(move _907, move _908) -> [return: bb289, unwind continue];
    }

    bb289: {
        StorageDead(_908);
        StorageDead(_907);
        StorageLive(_904);
        _904 = (_906.0: u64);
        StorageLive(_905);
        _905 = (_906.1: bool);
        StorageDead(_906);
        StorageLive(_911);
        StorageLive(_912);
        _912 = _904;
        StorageLive(_913);
        _913 = (*_892);
        _911 = core::num::<impl u64>::overflowing_add(move _912, move _913) -> [return: bb290, unwind continue];
    }

    bb290: {
        StorageDead(_913);
        StorageDead(_912);
        StorageLive(_909);
        _909 = (_911.0: u64);
        StorageLive(_910);
        _910 = (_911.1: bool);
        StorageDead(_911);
        StorageLive(_914);
        _914 = _909;
        (*_892) = move _914;
        StorageDead(_914);
        StorageLive(_915);
        StorageLive(_916);
        _916 = _905;
        StorageLive(_917);
        _917 = _910;
        _915 = BitOr(move _916, move _917);
        StorageDead(_917);
        StorageDead(_916);
        _891 = move _915 as u64 (IntToInt);
        StorageDead(_915);
        StorageDead(_910);
        StorageDead(_909);
        StorageDead(_905);
        StorageDead(_904);
        StorageDead(_899);
        StorageDead(_893);
        StorageDead(_892);
        _787 = move _891;
        _855 = const ();
        StorageDead(_891);
        StorageDead(_879);
        StorageDead(_871);
        StorageDead(_870);
        StorageDead(_866);
        goto -> bb292;
    }

    bb291: {
        StorageDead(_865);
        StorageDead(_862);
        StorageDead(_861);
        StorageDead(_860);
        StorageDead(_858);
        _855 = const ();
        goto -> bb292;
    }

    bb292: {
        StorageDead(_857);
        goto -> bb294;
    }

    bb293: {
        _855 = const ();
        goto -> bb294;
    }

    bb294: {
        StorageDead(_856);
        StorageDead(_855);
        StorageLive(_918);
        StorageLive(_919);
        _919 = Ge(const _, const 0_usize);
        switchInt(move _919) -> [0: bb313, otherwise: bb295];
    }

    bb295: {
        StorageLive(_920);
        StorageLive(_921);
        _1058 = const _;
        _921 = &(*_1058);
        StorageLive(_923);
        StorageLive(_924);
        StorageLive(_925);
        _925 = const _;
        _926 = Len((*_4));
        _927 = Lt(_925, _926);
        assert(move _927, "index out of bounds: the length is {} but the index is {}", move _926, _925) -> [success: bb296, unwind continue];
    }

    bb296: {
        _924 = (*_4)[_925];
        StorageLive(_928);
        _928 = _787;
        _923 = (move _924, move _928);
        _920 = <{closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.5\src\uint.rs:257:67: 257:73} as Fn<(u64, u64)>>::call(move _921, move _923) -> [return: bb297, unwind continue];
    }

    bb297: {
        switchInt(move _920) -> [0: bb311, otherwise: bb298];
    }

    bb298: {
        StorageDead(_928);
        StorageDead(_925);
        StorageDead(_924);
        StorageDead(_923);
        StorageDead(_921);
        StorageLive(_929);
        StorageLive(_930);
        _930 = const _;
        _931 = Len((*_4));
        _932 = Lt(_930, _931);
        assert(move _932, "index out of bounds: the length is {} but the index is {}", move _931, _930) -> [success: bb299, unwind continue];
    }

    bb299: {
        _929 = (*_4)[_930];
        StorageDead(_930);
        StorageLive(_935);
        StorageLive(_936);
        StorageLive(_937);
        StorageLive(_938);
        _938 = _929;
        _937 = move _938 as u128 (IntToInt);
        StorageDead(_938);
        StorageLive(_939);
        StorageLive(_940);
        _940 = _788;
        _939 = move _940 as u128 (IntToInt);
        StorageDead(_940);
        _941 = CheckedMul(_937, _939);
        assert(!move (_941.1: bool), "attempt to compute `{} * {}`, which would overflow", move _937, move _939) -> [success: bb300, unwind continue];
    }

    bb300: {
        _936 = move (_941.0: u128);
        StorageDead(_939);
        StorageDead(_937);
        _935 = uint_types::U256::split_u128(move _936) -> [return: bb301, unwind continue];
    }

    bb301: {
        StorageDead(_936);
        StorageLive(_933);
        _933 = (_935.0: u64);
        StorageLive(_934);
        _934 = (_935.1: u64);
        StorageDead(_935);
        StorageLive(_942);
        StorageLive(_943);
        StorageLive(_944);
        _945 = CheckedAdd(const _, const _);
        assert(!move (_945.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const _) -> [success: bb302, unwind continue];
    }

    bb302: {
        _944 = move (_945.0: usize);
        _946 = Len(_6);
        _947 = Lt(_944, _946);
        assert(move _947, "index out of bounds: the length is {} but the index is {}", move _946, _944) -> [success: bb303, unwind continue];
    }

    bb303: {
        _943 = &mut _6[_944];
        StorageLive(_950);
        StorageLive(_951);
        _951 = _934;
        StorageLive(_952);
        _952 = (*_943);
        _950 = core::num::<impl u64>::overflowing_add(move _951, move _952) -> [return: bb304, unwind continue];
    }

    bb304: {
        StorageDead(_952);
        StorageDead(_951);
        StorageLive(_948);
        _948 = (_950.0: u64);
        StorageLive(_949);
        _949 = (_950.1: bool);
        StorageDead(_950);
        StorageLive(_953);
        _953 = _948;
        (*_943) = move _953;
        StorageDead(_953);
        _942 = _949;
        StorageDead(_949);
        StorageDead(_948);
        StorageDead(_944);
        StorageDead(_943);
        StorageLive(_954);
        StorageLive(_955);
        StorageLive(_956);
        StorageLive(_957);
        _958 = CheckedAdd(const _, const _);
        assert(!move (_958.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const _) -> [success: bb305, unwind continue];
    }

    bb305: {
        _957 = move (_958.0: usize);
        _959 = CheckedAdd(_957, const 1_usize);
        assert(!move (_959.1: bool), "attempt to compute `{} + {}`, which would overflow", move _957, const 1_usize) -> [success: bb306, unwind continue];
    }

    bb306: {
        _956 = move (_959.0: usize);
        StorageDead(_957);
        _960 = Len(_6);
        _961 = Lt(_956, _960);
        assert(move _961, "index out of bounds: the length is {} but the index is {}", move _960, _956) -> [success: bb307, unwind continue];
    }

    bb307: {
        _955 = &mut _6[_956];
        StorageLive(_962);
        StorageLive(_963);
        _963 = _933;
        StorageLive(_964);
        StorageLive(_965);
        _965 = _942;
        _964 = move _965 as u64 (IntToInt);
        StorageDead(_965);
        _966 = CheckedAdd(_963, _964);
        assert(!move (_966.1: bool), "attempt to compute `{} + {}`, which would overflow", move _963, move _964) -> [success: bb308, unwind continue];
    }

    bb308: {
        _962 = move (_966.0: u64);
        StorageDead(_964);
        StorageDead(_963);
        StorageLive(_969);
        StorageLive(_970);
        _970 = _962;
        StorageLive(_971);
        _971 = _787;
        _969 = core::num::<impl u64>::overflowing_add(move _970, move _971) -> [return: bb309, unwind continue];
    }

    bb309: {
        StorageDead(_971);
        StorageDead(_970);
        StorageLive(_967);
        _967 = (_969.0: u64);
        StorageLive(_968);
        _968 = (_969.1: bool);
        StorageDead(_969);
        StorageLive(_974);
        StorageLive(_975);
        _975 = _967;
        StorageLive(_976);
        _976 = (*_955);
        _974 = core::num::<impl u64>::overflowing_add(move _975, move _976) -> [return: bb310, unwind continue];
    }

    bb310: {
        StorageDead(_976);
        StorageDead(_975);
        StorageLive(_972);
        _972 = (_974.0: u64);
        StorageLive(_973);
        _973 = (_974.1: bool);
        StorageDead(_974);
        StorageLive(_977);
        _977 = _972;
        (*_955) = move _977;
        StorageDead(_977);
        StorageLive(_978);
        StorageLive(_979);
        _979 = _968;
        StorageLive(_980);
        _980 = _973;
        _978 = BitOr(move _979, move _980);
        StorageDead(_980);
        StorageDead(_979);
        _954 = move _978 as u64 (IntToInt);
        StorageDead(_978);
        StorageDead(_973);
        StorageDead(_972);
        StorageDead(_968);
        StorageDead(_967);
        StorageDead(_962);
        StorageDead(_956);
        StorageDead(_955);
        _787 = move _954;
        _918 = const ();
        StorageDead(_954);
        StorageDead(_942);
        StorageDead(_934);
        StorageDead(_933);
        StorageDead(_929);
        goto -> bb312;
    }

    bb311: {
        StorageDead(_928);
        StorageDead(_925);
        StorageDead(_924);
        StorageDead(_923);
        StorageDead(_921);
        _918 = const ();
        goto -> bb312;
    }

    bb312: {
        StorageDead(_920);
        goto -> bb314;
    }

    bb313: {
        _918 = const ();
        goto -> bb314;
    }

    bb314: {
        StorageDead(_919);
        StorageDead(_918);
        StorageLive(_981);
        StorageLive(_982);
        _982 = Ge(const _, const 0_usize);
        switchInt(move _982) -> [0: bb333, otherwise: bb315];
    }

    bb315: {
        StorageLive(_983);
        StorageLive(_984);
        _1057 = const _;
        _984 = &(*_1057);
        StorageLive(_986);
        StorageLive(_987);
        StorageLive(_988);
        _988 = const _;
        _989 = Len((*_4));
        _990 = Lt(_988, _989);
        assert(move _990, "index out of bounds: the length is {} but the index is {}", move _989, _988) -> [success: bb316, unwind continue];
    }

    bb316: {
        _987 = (*_4)[_988];
        StorageLive(_991);
        _991 = _787;
        _986 = (move _987, move _991);
        _983 = <{closure@C:\Users\Yellow Letter HQ\.cargo\registry\src\index.crates.io-6f17d22bba15001f\uint-0.9.5\src\uint.rs:257:67: 257:73} as Fn<(u64, u64)>>::call(move _984, move _986) -> [return: bb317, unwind continue];
    }

    bb317: {
        switchInt(move _983) -> [0: bb331, otherwise: bb318];
    }

    bb318: {
        StorageDead(_991);
        StorageDead(_988);
        StorageDead(_987);
        StorageDead(_986);
        StorageDead(_984);
        StorageLive(_992);
        StorageLive(_993);
        _993 = const _;
        _994 = Len((*_4));
        _995 = Lt(_993, _994);
        assert(move _995, "index out of bounds: the length is {} but the index is {}", move _994, _993) -> [success: bb319, unwind continue];
    }

    bb319: {
        _992 = (*_4)[_993];
        StorageDead(_993);
        StorageLive(_998);
        StorageLive(_999);
        StorageLive(_1000);
        StorageLive(_1001);
        _1001 = _992;
        _1000 = move _1001 as u128 (IntToInt);
        StorageDead(_1001);
        StorageLive(_1002);
        StorageLive(_1003);
        _1003 = _788;
        _1002 = move _1003 as u128 (IntToInt);
        StorageDead(_1003);
        _1004 = CheckedMul(_1000, _1002);
        assert(!move (_1004.1: bool), "attempt to compute `{} * {}`, which would overflow", move _1000, move _1002) -> [success: bb320, unwind continue];
    }

    bb320: {
        _999 = move (_1004.0: u128);
        StorageDead(_1002);
        StorageDead(_1000);
        _998 = uint_types::U256::split_u128(move _999) -> [return: bb321, unwind continue];
    }

    bb321: {
        StorageDead(_999);
        StorageLive(_996);
        _996 = (_998.0: u64);
        StorageLive(_997);
        _997 = (_998.1: u64);
        StorageDead(_998);
        StorageLive(_1005);
        StorageLive(_1006);
        StorageLive(_1007);
        _1008 = CheckedAdd(const _, const _);
        assert(!move (_1008.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const _) -> [success: bb322, unwind continue];
    }

    bb322: {
        _1007 = move (_1008.0: usize);
        _1009 = Len(_6);
        _1010 = Lt(_1007, _1009);
        assert(move _1010, "index out of bounds: the length is {} but the index is {}", move _1009, _1007) -> [success: bb323, unwind continue];
    }

    bb323: {
        _1006 = &mut _6[_1007];
        StorageLive(_1013);
        StorageLive(_1014);
        _1014 = _997;
        StorageLive(_1015);
        _1015 = (*_1006);
        _1013 = core::num::<impl u64>::overflowing_add(move _1014, move _1015) -> [return: bb324, unwind continue];
    }

    bb324: {
        StorageDead(_1015);
        StorageDead(_1014);
        StorageLive(_1011);
        _1011 = (_1013.0: u64);
        StorageLive(_1012);
        _1012 = (_1013.1: bool);
        StorageDead(_1013);
        StorageLive(_1016);
        _1016 = _1011;
        (*_1006) = move _1016;
        StorageDead(_1016);
        _1005 = _1012;
        StorageDead(_1012);
        StorageDead(_1011);
        StorageDead(_1007);
        StorageDead(_1006);
        StorageLive(_1017);
        StorageLive(_1018);
        StorageLive(_1019);
        StorageLive(_1020);
        _1021 = CheckedAdd(const _, const _);
        assert(!move (_1021.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const _) -> [success: bb325, unwind continue];
    }

    bb325: {
        _1020 = move (_1021.0: usize);
        _1022 = CheckedAdd(_1020, const 1_usize);
        assert(!move (_1022.1: bool), "attempt to compute `{} + {}`, which would overflow", move _1020, const 1_usize) -> [success: bb326, unwind continue];
    }

    bb326: {
        _1019 = move (_1022.0: usize);
        StorageDead(_1020);
        _1023 = Len(_6);
        _1024 = Lt(_1019, _1023);
        assert(move _1024, "index out of bounds: the length is {} but the index is {}", move _1023, _1019) -> [success: bb327, unwind continue];
    }

    bb327: {
        _1018 = &mut _6[_1019];
        StorageLive(_1025);
        StorageLive(_1026);
        _1026 = _996;
        StorageLive(_1027);
        StorageLive(_1028);
        _1028 = _1005;
        _1027 = move _1028 as u64 (IntToInt);
        StorageDead(_1028);
        _1029 = CheckedAdd(_1026, _1027);
        assert(!move (_1029.1: bool), "attempt to compute `{} + {}`, which would overflow", move _1026, move _1027) -> [success: bb328, unwind continue];
    }

    bb328: {
        _1025 = move (_1029.0: u64);
        StorageDead(_1027);
        StorageDead(_1026);
        StorageLive(_1032);
        StorageLive(_1033);
        _1033 = _1025;
        StorageLive(_1034);
        _1034 = _787;
        _1032 = core::num::<impl u64>::overflowing_add(move _1033, move _1034) -> [return: bb329, unwind continue];
    }

    bb329: {
        StorageDead(_1034);
        StorageDead(_1033);
        StorageLive(_1030);
        _1030 = (_1032.0: u64);
        StorageLive(_1031);
        _1031 = (_1032.1: bool);
        StorageDead(_1032);
        StorageLive(_1037);
        StorageLive(_1038);
        _1038 = _1030;
        StorageLive(_1039);
        _1039 = (*_1018);
        _1037 = core::num::<impl u64>::overflowing_add(move _1038, move _1039) -> [return: bb330, unwind continue];
    }

    bb330: {
        StorageDead(_1039);
        StorageDead(_1038);
        StorageLive(_1035);
        _1035 = (_1037.0: u64);
        StorageLive(_1036);
        _1036 = (_1037.1: bool);
        StorageDead(_1037);
        StorageLive(_1040);
        _1040 = _1035;
        (*_1018) = move _1040;
        StorageDead(_1040);
        StorageLive(_1041);
        StorageLive(_1042);
        _1042 = _1031;
        StorageLive(_1043);
        _1043 = _1036;
        _1041 = BitOr(move _1042, move _1043);
        StorageDead(_1043);
        StorageDead(_1042);
        _1017 = move _1041 as u64 (IntToInt);
        StorageDead(_1041);
        StorageDead(_1036);
        StorageDead(_1035);
        StorageDead(_1031);
        StorageDead(_1030);
        StorageDead(_1025);
        StorageDead(_1019);
        StorageDead(_1018);
        _787 = move _1017;
        _981 = const ();
        StorageDead(_1017);
        StorageDead(_1005);
        StorageDead(_997);
        StorageDead(_996);
        StorageDead(_992);
        goto -> bb332;
    }

    bb331: {
        StorageDead(_991);
        StorageDead(_988);
        StorageDead(_987);
        StorageDead(_986);
        StorageDead(_984);
        _981 = const ();
        goto -> bb332;
    }

    bb332: {
        StorageDead(_983);
        goto -> bb334;
    }

    bb333: {
        _981 = const ();
        goto -> bb334;
    }

    bb334: {
        StorageDead(_982);
        StorageDead(_981);
        _785 = const ();
        StorageDead(_788);
        StorageDead(_787);
        goto -> bb336;
    }

    bb335: {
        _785 = const ();
        goto -> bb336;
    }

    bb336: {
        StorageDead(_786);
        StorageDead(_785);
        _7 = const ();
        StorageDead(_7);
        _3 = _6;
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_1044);
        StorageLive(_1045);
        _1045 = _3;
        _1044 = move _1045 as [[u64; 4]; 2] (Transmute);
        StorageDead(_1045);
        StorageLive(_1046);
        StorageLive(_1047);
        StorageLive(_1048);
        _1048 = const 0_usize;
        _1049 = Len(_1044);
        _1050 = Lt(_1048, _1049);
        assert(move _1050, "index out of bounds: the length is {} but the index is {}", move _1049, _1048) -> [success: bb337, unwind continue];
    }

    bb337: {
        _1047 = _1044[_1048];
        _1046 = uint_types::U256(move _1047);
        StorageDead(_1047);
        StorageLive(_1051);
        StorageLive(_1052);
        StorageLive(_1053);
        StorageLive(_1054);
        _1054 = const 1_usize;
        _1055 = Len(_1044);
        _1056 = Lt(_1054, _1055);
        assert(move _1056, "index out of bounds: the length is {} but the index is {}", move _1055, _1054) -> [success: bb338, unwind continue];
    }

    bb338: {
        _1053 = &_1044[_1054];
        _1052 = &(*_1053);
        _1051 = uint_types::U256::overflowing_mul::any_nonzero(move _1052) -> [return: bb339, unwind continue];
    }

    bb339: {
        StorageDead(_1052);
        _0 = (move _1046, move _1051);
        StorageDead(_1051);
        StorageDead(_1046);
        StorageDead(_1044);
        StorageDead(_3);
        StorageDead(_1054);
        StorageDead(_1053);
        StorageDead(_1048);
        return;
    }
}
