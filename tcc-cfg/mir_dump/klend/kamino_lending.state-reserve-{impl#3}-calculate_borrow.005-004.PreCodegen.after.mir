// MIR for `reserve::<impl at programs\klend\src\state\reserve.rs:140:1: 140:13>::calculate_borrow` after PreCodegen

fn reserve::<impl at programs\klend\src\state\reserve.rs:140:1: 140:13>::calculate_borrow(_1: &reserve::Reserve, _2: u64, _3: FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>, _4: FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>, _5: u16, _6: bool, _7: bool) -> std::result::Result<state::types::CalculateBorrowResult, anchor_lang::error::Error> {
    debug self => _1;
    debug amount_to_borrow => _2;
    debug max_borrow_factor_adjusted_debt_value => _3;
    debug remaining_reserve_borrow => _4;
    debug referral_fee_bps => _5;
    debug is_in_elevation_group => _6;
    debug has_referrer => _7;
    let mut _0: std::result::Result<state::types::CalculateBorrowResult, anchor_lang::error::Error>;
    let _8: u64;
    let mut _9: &state::reserve::ReserveLiquidity;
    let mut _11: &state::reserve::ReserveLiquidity;
    let mut _12: bool;
    let mut _13: u64;
    let mut _15: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _16: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _17: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _18: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _19: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _20: u128;
    let mut _21: u64;
    let mut _22: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _23: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _24: &state::reserve::Reserve;
    let mut _25: bool;
    let mut _26: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _27: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _28: u64;
    let mut _31: (u64, u64);
    let mut _32: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, (u64, u64)>;
    let mut _33: std::result::Result<(u64, u64), anchor_lang::error::Error>;
    let mut _34: &state::reserve::ReserveFees;
    let mut _35: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _36: state::reserve::FeeCalculation;
    let mut _37: u16;
    let mut _38: bool;
    let mut _39: isize;
    let mut _41: !;
    let mut _42: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _45: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _47: u64;
    let mut _48: u64;
    let mut _49: u64;
    let mut _50: (u64, bool);
    let mut _51: u64;
    let mut _52: (u64, bool);
    let mut _53: state::types::CalculateBorrowResult;
    let mut _54: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _55: u64;
    let mut _56: u64;
    let mut _57: u64;
    let mut _60: u64;
    let mut _63: (u64, u64);
    let mut _64: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, (u64, u64)>;
    let mut _65: std::result::Result<(u64, u64), anchor_lang::error::Error>;
    let mut _66: &state::reserve::ReserveFees;
    let mut _67: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _68: state::reserve::FeeCalculation;
    let mut _69: u16;
    let mut _70: bool;
    let mut _71: isize;
    let mut _73: !;
    let mut _74: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _76: ();
    let mut _77: &mut fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _78: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _79: u64;
    let mut _80: u64;
    let mut _81: u64;
    let mut _82: (u64, bool);
    let mut _84: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _85: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _86: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _87: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _88: u128;
    let mut _89: u64;
    let mut _90: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _91: &state::reserve::Reserve;
    let mut _92: bool;
    let _93: ();
    let mut _94: bool;
    let mut _95: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _96: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _97: !;
    let _98: ();
    let mut _99: &str;
    let _100: &str;
    let mut _101: &std::string::String;
    let _102: &std::string::String;
    let _103: std::string::String;
    let mut _105: std::fmt::Arguments<'_>;
    let mut _106: &[&str];
    let mut _107: &[&str; 2];
    let _108: &[&str; 2];
    let _109: [&str; 2];
    let mut _110: &[core::fmt::rt::Argument<'_>];
    let mut _111: &[core::fmt::rt::Argument<'_>; 2];
    let _112: &[core::fmt::rt::Argument<'_>; 2];
    let _113: [core::fmt::rt::Argument<'_>; 2];
    let mut _114: core::fmt::rt::Argument<'_>;
    let mut _115: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _116: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _117: core::fmt::rt::Argument<'_>;
    let mut _118: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let _119: &fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _120: anchor_lang::error::Error;
    let mut _121: anchor_lang::error::AnchorError;
    let mut _122: std::string::String;
    let mut _123: &LendingError;
    let _124: LendingError;
    let mut _125: u32;
    let mut _126: LendingError;
    let mut _127: std::string::String;
    let mut _128: &LendingError;
    let _129: LendingError;
    let mut _130: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _131: anchor_lang::error::ErrorOrigin;
    let mut _132: anchor_lang::error::Source;
    let mut _133: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _134: state::types::CalculateBorrowResult;
    let mut _135: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
    let mut _136: u64;
    let mut _137: u64;
    let mut _138: u64;
    let mut _142: isize;
    let mut _143: isize;
    let mut _144: isize;
    let mut _145: isize;
    let mut _146: isize;
    let mut _147: isize;
    let mut _148: isize;
    let mut _149: isize;
    let mut _150: isize;
    let mut _151: isize;
    scope 1 {
        debug decimals => _8;
        let _10: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
        scope 2 {
            debug market_price_f => _10;
            let _14: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
            let _58: u64;
            scope 3 {
                debug borrow_amount_f => _14;
                let _29: u64;
                let _30: u64;
                let _40: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                let _43: (u64, u64);
                scope 4 {
                    debug borrow_fee => _29;
                    debug referrer_fee => _30;
                    let _44: u64;
                    scope 9 {
                        debug borrow_amount => _44;
                        let _46: u64;
                        scope 10 {
                            debug receive_amount => _46;
                        }
                    }
                }
                scope 5 {
                    debug residual => _40;
                    scope 6 {
                    }
                }
                scope 7 {
                    debug val => _43;
                    scope 8 {
                    }
                }
            }
            scope 11 {
                debug receive_amount => _58;
                let mut _59: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
                scope 12 {
                    debug borrow_amount_f => _59;
                    let _61: u64;
                    let _62: u64;
                    let _72: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                    let _75: (u64, u64);
                    scope 13 {
                        debug borrow_fee => _61;
                        debug referrer_fee => _62;
                        let _83: fixed::FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>;
                        scope 18 {
                            debug borrow_factor_adjusted_debt_value => _83;
                            let _104: std::string::String;
                            let mut _139: &LendingError;
                            let mut _140: &LendingError;
                            let mut _141: &[&str; 2];
                            scope 19 {
                                debug res => _104;
                            }
                        }
                    }
                    scope 14 {
                        debug residual => _72;
                        scope 15 {
                        }
                    }
                    scope 16 {
                        debug val => _75;
                        scope 17 {
                        }
                    }
                }
            }
        }
    }

    bb0: {
        StorageLive(_8);
        StorageLive(_9);
        _9 = &((*_1).5: state::reserve::ReserveLiquidity);
        _8 = ReserveLiquidity::mint_factor(move _9) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_9);
        StorageLive(_10);
        StorageLive(_11);
        _11 = &((*_1).5: state::reserve::ReserveLiquidity);
        _10 = ReserveLiquidity::get_market_price(move _11) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_11);
        StorageLive(_12);
        StorageLive(_13);
        _13 = _2;
        _12 = Eq(move _13, const _);
        switchInt(move _12) -> [0: bb21, otherwise: bb3];
    }

    bb3: {
        StorageDead(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _19 = _3;
        StorageLive(_20);
        StorageLive(_21);
        _21 = _8;
        _20 = <u128 as From<u64>>::from(move _21) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_21);
        _18 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as std::ops::Mul<u128>>::mul(move _19, move _20) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_20);
        StorageDead(_19);
        StorageLive(_22);
        _22 = _10;
        _17 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as std::ops::Div>::div(move _18, move _22) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_22);
        StorageDead(_18);
        StorageLive(_23);
        StorageLive(_24);
        _24 = &(*_1);
        StorageLive(_25);
        _25 = _6;
        _23 = reserve::Reserve::borrow_factor_f(move _24, move _25) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_25);
        StorageDead(_24);
        _16 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as std::ops::Div>::div(move _17, move _23) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_23);
        StorageDead(_17);
        StorageLive(_26);
        _26 = _4;
        _15 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as Ord>::min(move _16, move _26) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_26);
        StorageDead(_16);
        StorageLive(_27);
        StorageLive(_28);
        _28 = (((*_1).5: state::reserve::ReserveLiquidity).3: u64);
        _27 = <u64 as Into<FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>>>::into(move _28) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_28);
        _14 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as Ord>::min(move _15, move _27) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_27);
        StorageDead(_15);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        _34 = &(((*_1).9: state::reserve::ReserveConfig).14: state::reserve::ReserveFees);
        StorageLive(_35);
        _35 = _14;
        StorageLive(_36);
        _36 = reserve::FeeCalculation::Inclusive;
        StorageLive(_37);
        _37 = _5;
        StorageLive(_38);
        _38 = _7;
        _33 = ReserveFees::calculate_borrow_fees(move _34, move _35, move _36, move _37, move _38) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_38);
        StorageDead(_37);
        StorageDead(_36);
        StorageDead(_35);
        StorageDead(_34);
        _32 = <std::result::Result<(u64, u64), anchor_lang::error::Error> as Try>::branch(move _33) -> [return: bb13, unwind: bb56];
    }

    bb13: {
        StorageDead(_33);
        _39 = discriminant(_32);
        switchInt(move _39) -> [0: bb14, 1: bb16, otherwise: bb15];
    }

    bb14: {
        StorageLive(_43);
        _43 = ((_32 as Continue).0: (u64, u64));
        _31 = _43;
        StorageDead(_43);
        StorageLive(_29);
        _29 = (_31.0: u64);
        StorageLive(_30);
        _30 = (_31.1: u64);
        _142 = discriminant(_32);
        StorageDead(_32);
        StorageDead(_31);
        StorageLive(_44);
        StorageLive(_45);
        _45 = &_14;
        _44 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as utils::fraction::FractionExtra>::to_floor::<u64>(move _45) -> [return: bb18, unwind continue];
    }

    bb15: {
        unreachable;
    }

    bb16: {
        StorageLive(_40);
        _40 = move ((_32 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_42);
        _42 = move _40;
        _0 = <std::result::Result<state::types::CalculateBorrowResult, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _42) -> [return: bb17, unwind: bb58];
    }

    bb17: {
        StorageDead(_42);
        StorageDead(_40);
        _148 = discriminant(_32);
        StorageDead(_32);
        StorageDead(_31);
        StorageDead(_14);
        goto -> bb52;
    }

    bb18: {
        StorageDead(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        _48 = _44;
        StorageLive(_49);
        _49 = _29;
        _50 = CheckedSub(_48, _49);
        assert(!move (_50.1: bool), "attempt to compute `{} - {}`, which would overflow", move _48, move _49) -> [success: bb19, unwind continue];
    }

    bb19: {
        _47 = move (_50.0: u64);
        StorageDead(_49);
        StorageDead(_48);
        StorageLive(_51);
        _51 = _30;
        _52 = CheckedSub(_47, _51);
        assert(!move (_52.1: bool), "attempt to compute `{} - {}`, which would overflow", move _47, move _51) -> [success: bb20, unwind continue];
    }

    bb20: {
        _46 = move (_52.0: u64);
        StorageDead(_51);
        StorageDead(_47);
        StorageLive(_53);
        StorageLive(_54);
        _54 = _14;
        StorageLive(_55);
        _55 = _46;
        StorageLive(_56);
        _56 = _29;
        StorageLive(_57);
        _57 = _30;
        _53 = state::types::CalculateBorrowResult { borrow_amount_f: move _54, receive_amount: move _55, borrow_fee: move _56, referrer_fee: move _57 };
        StorageDead(_57);
        StorageDead(_56);
        StorageDead(_55);
        StorageDead(_54);
        _0 = std::result::Result::<state::types::CalculateBorrowResult, anchor_lang::error::Error>::Ok(move _53);
        StorageDead(_53);
        StorageDead(_46);
        StorageDead(_44);
        StorageDead(_30);
        StorageDead(_29);
        StorageDead(_14);
        goto -> bb50;
    }

    bb21: {
        StorageDead(_13);
        StorageLive(_58);
        _58 = _2;
        StorageLive(_59);
        StorageLive(_60);
        _60 = _58;
        _59 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as From<u64>>::from(move _60) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_60);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        _66 = &(((*_1).9: state::reserve::ReserveConfig).14: state::reserve::ReserveFees);
        StorageLive(_67);
        _67 = _59;
        StorageLive(_68);
        _68 = reserve::FeeCalculation::Exclusive;
        StorageLive(_69);
        _69 = _5;
        StorageLive(_70);
        _70 = _7;
        _65 = ReserveFees::calculate_borrow_fees(move _66, move _67, move _68, move _69, move _70) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_70);
        StorageDead(_69);
        StorageDead(_68);
        StorageDead(_67);
        StorageDead(_66);
        _64 = <std::result::Result<(u64, u64), anchor_lang::error::Error> as Try>::branch(move _65) -> [return: bb24, unwind: bb56];
    }

    bb24: {
        StorageDead(_65);
        _71 = discriminant(_64);
        switchInt(move _71) -> [0: bb25, 1: bb26, otherwise: bb15];
    }

    bb25: {
        StorageLive(_75);
        _75 = ((_64 as Continue).0: (u64, u64));
        _63 = _75;
        StorageDead(_75);
        StorageLive(_61);
        _61 = (_63.0: u64);
        StorageLive(_62);
        _62 = (_63.1: u64);
        _144 = discriminant(_64);
        StorageDead(_64);
        StorageDead(_63);
        StorageLive(_76);
        StorageLive(_77);
        _77 = &mut _59;
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        _80 = _61;
        StorageLive(_81);
        _81 = _62;
        _82 = CheckedAdd(_80, _81);
        assert(!move (_82.1: bool), "attempt to compute `{} + {}`, which would overflow", move _80, move _81) -> [success: bb28, unwind continue];
    }

    bb26: {
        StorageLive(_72);
        _72 = move ((_64 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_74);
        _74 = move _72;
        _0 = <std::result::Result<state::types::CalculateBorrowResult, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _74) -> [return: bb27, unwind: bb57];
    }

    bb27: {
        StorageDead(_74);
        StorageDead(_72);
        _146 = discriminant(_64);
        StorageDead(_64);
        StorageDead(_63);
        goto -> bb51;
    }

    bb28: {
        _79 = move (_82.0: u64);
        StorageDead(_81);
        StorageDead(_80);
        _78 = FixedU128::<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>::from_num::<u64>(move _79) -> [return: bb29, unwind continue];
    }

    bb29: {
        StorageDead(_79);
        _76 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as AddAssign>::add_assign(move _77, move _78) -> [return: bb30, unwind continue];
    }

    bb30: {
        StorageDead(_78);
        StorageDead(_77);
        StorageDead(_76);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        _86 = _59;
        StorageLive(_87);
        _87 = _10;
        _85 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as std::ops::Mul>::mul(move _86, move _87) -> [return: bb31, unwind continue];
    }

    bb31: {
        StorageDead(_87);
        StorageDead(_86);
        StorageLive(_88);
        StorageLive(_89);
        _89 = _8;
        _88 = <u128 as From<u64>>::from(move _89) -> [return: bb32, unwind continue];
    }

    bb32: {
        StorageDead(_89);
        _84 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as std::ops::Div<u128>>::div(move _85, move _88) -> [return: bb33, unwind continue];
    }

    bb33: {
        StorageDead(_88);
        StorageDead(_85);
        StorageLive(_90);
        StorageLive(_91);
        _91 = &(*_1);
        StorageLive(_92);
        _92 = _6;
        _90 = reserve::Reserve::borrow_factor_f(move _91, move _92) -> [return: bb34, unwind continue];
    }

    bb34: {
        StorageDead(_92);
        StorageDead(_91);
        _83 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as std::ops::Mul>::mul(move _84, move _90) -> [return: bb35, unwind continue];
    }

    bb35: {
        StorageDead(_90);
        StorageDead(_84);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        _95 = &_83;
        StorageLive(_96);
        _96 = &_3;
        _94 = <FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>> as PartialOrd>::gt(move _95, move _96) -> [return: bb36, unwind continue];
    }

    bb36: {
        switchInt(move _94) -> [0: bb49, otherwise: bb37];
    }

    bb37: {
        StorageDead(_96);
        StorageDead(_95);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        _141 = const _;
        _108 = &(*_141);
        _107 = &(*_108);
        _106 = move _107 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_107);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        _116 = &_83;
        _115 = &(*_116);
        _114 = core::fmt::rt::Argument::<'_>::new_display::<FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>>(move _115) -> [return: bb38, unwind continue];
    }

    bb38: {
        StorageDead(_115);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        _119 = &_3;
        _118 = &(*_119);
        _117 = core::fmt::rt::Argument::<'_>::new_display::<FixedU128<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UInt<typenum::uint::UTerm, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B1>, typenum::bit::B0>, typenum::bit::B0>>>(move _118) -> [return: bb39, unwind continue];
    }

    bb39: {
        StorageDead(_118);
        _113 = [move _114, move _117];
        StorageDead(_117);
        StorageDead(_114);
        _112 = &_113;
        _111 = &(*_112);
        _110 = move _111 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_111);
        _105 = Arguments::<'_>::new_v1(move _106, move _110) -> [return: bb40, unwind continue];
    }

    bb40: {
        StorageDead(_110);
        StorageDead(_106);
        _104 = format(move _105) -> [return: bb41, unwind continue];
    }

    bb41: {
        StorageDead(_105);
        StorageDead(_119);
        StorageDead(_116);
        StorageDead(_113);
        StorageDead(_112);
        StorageDead(_108);
        _103 = move _104;
        StorageDead(_104);
        _102 = &_103;
        _101 = &(*_102);
        _100 = <std::string::String as Deref>::deref(move _101) -> [return: bb42, unwind: bb55];
    }

    bb42: {
        _99 = &(*_100);
        StorageDead(_101);
        _98 = solana_program::log::sol_log(move _99) -> [return: bb43, unwind: bb55];
    }

    bb43: {
        StorageDead(_99);
        drop(_103) -> [return: bb44, unwind: bb56];
    }

    bb44: {
        StorageDead(_103);
        StorageDead(_102);
        StorageDead(_100);
        StorageDead(_98);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        _140 = const _;
        _123 = &(*_140);
        _122 = LendingError::name(move _123) -> [return: bb45, unwind continue];
    }

    bb45: {
        StorageDead(_123);
        StorageLive(_125);
        StorageLive(_126);
        _126 = LendingError::BorrowTooLarge;
        _125 = <LendingError as Into<u32>>::into(move _126) -> [return: bb46, unwind: bb54];
    }

    bb46: {
        StorageDead(_126);
        StorageLive(_127);
        StorageLive(_128);
        _139 = const _;
        _128 = &(*_139);
        _127 = <LendingError as ToString>::to_string(move _128) -> [return: bb47, unwind: bb54];
    }

    bb47: {
        StorageDead(_128);
        StorageLive(_130);
        StorageLive(_131);
        StorageLive(_132);
        _132 = anchor_lang::error::Source { filename: const "programs\\klend\\src\\state\\reserve.rs", line: const 346_u32 };
        _131 = anchor_lang::error::ErrorOrigin::Source(move _132);
        StorageDead(_132);
        _130 = std::option::Option::<ErrorOrigin>::Some(move _131);
        StorageDead(_131);
        StorageLive(_133);
        _133 = std::option::Option::<ComparedValues>::None;
        _121 = anchor_lang::error::AnchorError { error_name: move _122, error_code_number: move _125, error_msg: move _127, error_origin: move _130, compared_values: move _133 };
        StorageDead(_133);
        StorageDead(_130);
        StorageDead(_127);
        StorageDead(_125);
        StorageDead(_122);
        _120 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _121) -> [return: bb48, unwind: bb56];
    }

    bb48: {
        StorageDead(_121);
        _0 = std::result::Result::<state::types::CalculateBorrowResult, anchor_lang::error::Error>::Err(move _120);
        StorageDead(_120);
        StorageDead(_94);
        StorageDead(_93);
        StorageDead(_83);
        StorageDead(_62);
        StorageDead(_61);
        goto -> bb51;
    }

    bb49: {
        StorageDead(_96);
        StorageDead(_95);
        _93 = const ();
        StorageDead(_94);
        StorageDead(_93);
        StorageLive(_134);
        StorageLive(_135);
        _135 = _59;
        StorageLive(_136);
        _136 = _58;
        StorageLive(_137);
        _137 = _61;
        StorageLive(_138);
        _138 = _62;
        _134 = state::types::CalculateBorrowResult { borrow_amount_f: move _135, receive_amount: move _136, borrow_fee: move _137, referrer_fee: move _138 };
        StorageDead(_138);
        StorageDead(_137);
        StorageDead(_136);
        StorageDead(_135);
        _0 = std::result::Result::<state::types::CalculateBorrowResult, anchor_lang::error::Error>::Ok(move _134);
        StorageDead(_134);
        StorageDead(_83);
        StorageDead(_62);
        StorageDead(_61);
        StorageDead(_59);
        StorageDead(_58);
        goto -> bb50;
    }

    bb50: {
        StorageDead(_12);
        StorageDead(_10);
        StorageDead(_8);
        goto -> bb53;
    }

    bb51: {
        StorageDead(_59);
        StorageDead(_58);
        goto -> bb52;
    }

    bb52: {
        StorageDead(_12);
        StorageDead(_10);
        StorageDead(_8);
        goto -> bb53;
    }

    bb53: {
        return;
    }

    bb54 (cleanup): {
        drop(_122) -> [return: bb56, unwind terminate(cleanup)];
    }

    bb55 (cleanup): {
        drop(_103) -> [return: bb56, unwind terminate(cleanup)];
    }

    bb56 (cleanup): {
        resume;
    }

    bb57 (cleanup): {
        _150 = discriminant(_64);
        goto -> bb56;
    }

    bb58 (cleanup): {
        _151 = discriminant(_32);
        goto -> bb56;
    }
}
