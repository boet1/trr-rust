// MIR for `update_counter` after PreCodegen

fn update_counter(_1: &mut reserve::WithdrawalCaps, _2: u64, _3: WithdrawalCapAction, _4: WithdrawalCapOverflowAction) -> std::result::Result<(), LendingError> {
    debug caps => _1;
    debug requested_amount => _2;
    debug action => _3;
    debug overflow_action => _4;
    let mut _0: std::result::Result<(), LendingError>;
    let mut _5: isize;
    let mut _6: isize;
    let mut _7: i64;
    let mut _8: i64;
    let mut _9: i64;
    let mut _10: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, LendingError>, i64>;
    let mut _11: std::result::Result<i64, LendingError>;
    let mut _12: std::result::Result<i64, std::num::TryFromIntError>;
    let mut _13: u64;
    let mut _14: {closure@programs\klend\src\lending_market\withdrawal_cap_operations.rs:56:38: 56:41};
    let mut _15: isize;
    let _16: std::result::Result<std::convert::Infallible, LendingError>;
    let mut _17: !;
    let mut _18: std::result::Result<std::convert::Infallible, LendingError>;
    let _19: i64;
    let mut _20: ();
    let mut _21: i64;
    let mut _22: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, LendingError>, i64>;
    let mut _23: std::result::Result<i64, LendingError>;
    let mut _24: std::option::Option<i64>;
    let mut _25: i64;
    let mut _26: i64;
    let mut _27: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, LendingError>, i64>;
    let mut _28: std::result::Result<i64, LendingError>;
    let mut _29: std::result::Result<i64, std::num::TryFromIntError>;
    let mut _30: u64;
    let mut _31: {closure@programs\klend\src\lending_market\withdrawal_cap_operations.rs:66:42: 66:45};
    let mut _32: isize;
    let _33: std::result::Result<std::convert::Infallible, LendingError>;
    let mut _34: !;
    let mut _35: std::result::Result<std::convert::Infallible, LendingError>;
    let _36: i64;
    let mut _37: {closure@programs\klend\src\lending_market\withdrawal_cap_operations.rs:68:37: 68:39};
    let mut _38: &state::reserve::WithdrawalCaps;
    let mut _39: &u64;
    let mut _40: isize;
    let _41: std::result::Result<std::convert::Infallible, LendingError>;
    let mut _42: !;
    let mut _43: std::result::Result<std::convert::Infallible, LendingError>;
    let _44: i64;
    let mut _45: ();
    let mut _46: isize;
    let mut _47: i64;
    let mut _48: i64;
    let mut _49: i64;
    let mut _50: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, LendingError>, i64>;
    let mut _51: std::result::Result<i64, LendingError>;
    let mut _52: std::result::Result<i64, std::num::TryFromIntError>;
    let mut _53: u64;
    let mut _54: {closure@programs\klend\src\lending_market\withdrawal_cap_operations.rs:80:38: 80:41};
    let mut _55: isize;
    let _56: std::result::Result<std::convert::Infallible, LendingError>;
    let mut _57: !;
    let mut _58: std::result::Result<std::convert::Infallible, LendingError>;
    let _59: i64;
    let mut _60: ();
    let mut _61: i64;
    let mut _62: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, LendingError>, i64>;
    let mut _63: std::result::Result<i64, LendingError>;
    let mut _64: std::option::Option<i64>;
    let mut _65: i64;
    let mut _66: i64;
    let mut _67: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, LendingError>, i64>;
    let mut _68: std::result::Result<i64, LendingError>;
    let mut _69: std::result::Result<i64, std::num::TryFromIntError>;
    let mut _70: u64;
    let mut _71: {closure@programs\klend\src\lending_market\withdrawal_cap_operations.rs:90:42: 90:45};
    let mut _72: isize;
    let _73: std::result::Result<std::convert::Infallible, LendingError>;
    let mut _74: !;
    let mut _75: std::result::Result<std::convert::Infallible, LendingError>;
    let _76: i64;
    let mut _77: {closure@programs\klend\src\lending_market\withdrawal_cap_operations.rs:92:37: 92:39};
    let mut _78: &state::reserve::WithdrawalCaps;
    let mut _79: &u64;
    let mut _80: isize;
    let _81: std::result::Result<std::convert::Infallible, LendingError>;
    let mut _82: !;
    let mut _83: std::result::Result<std::convert::Infallible, LendingError>;
    let _84: i64;
    let mut _85: ();
    scope 1 {
        debug residual => _16;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _19;
        scope 4 {
        }
    }
    scope 5 {
        debug residual => _33;
        scope 6 {
        }
    }
    scope 7 {
        debug val => _36;
        scope 8 {
        }
    }
    scope 9 {
        debug residual => _41;
        scope 10 {
        }
    }
    scope 11 {
        debug val => _44;
        scope 12 {
        }
    }
    scope 13 {
        debug residual => _56;
        scope 14 {
        }
    }
    scope 15 {
        debug val => _59;
        scope 16 {
        }
    }
    scope 17 {
        debug residual => _73;
        scope 18 {
        }
    }
    scope 19 {
        debug val => _76;
        scope 20 {
        }
    }
    scope 21 {
        debug residual => _81;
        scope 22 {
        }
    }
    scope 23 {
        debug val => _84;
        scope 24 {
        }
    }

    bb0: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb3, 1: bb1, otherwise: bb2];
    }

    bb1: {
        _46 = discriminant(_4);
        switchInt(move _46) -> [0: bb26, 1: bb25, otherwise: bb2];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _6 = discriminant(_4);
        switchInt(move _6) -> [0: bb5, 1: bb4, otherwise: bb2];
    }

    bb4: {
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        _25 = ((*_1).1: i64);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        _30 = _2;
        _29 = <u64 as TryInto<i64>>::try_into(move _30) -> [return: bb13, unwind continue];
    }

    bb5: {
        StorageLive(_7);
        StorageLive(_8);
        _8 = ((*_1).1: i64);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        _13 = _2;
        _12 = <u64 as TryInto<i64>>::try_into(move _13) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_13);
        StorageLive(_14);
        _14 = {closure@programs\klend\src\lending_market\withdrawal_cap_operations.rs:56:38: 56:41};
        _11 = std::result::Result::<i64, TryFromIntError>::map_err::<LendingError, {closure@programs\klend\src\lending_market\withdrawal_cap_operations.rs:56:38: 56:41}>(move _12, move _14) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_14);
        StorageDead(_12);
        _10 = <std::result::Result<i64, LendingError> as Try>::branch(move _11) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_11);
        _15 = discriminant(_10);
        switchInt(move _15) -> [0: bb9, 1: bb10, otherwise: bb2];
    }

    bb9: {
        StorageLive(_19);
        _19 = ((_10 as Continue).0: i64);
        _9 = _19;
        StorageDead(_19);
        _7 = core::num::<impl i64>::saturating_add(move _8, move _9) -> [return: bb12, unwind continue];
    }

    bb10: {
        StorageLive(_16);
        _16 = ((_10 as Break).0: std::result::Result<std::convert::Infallible, LendingError>);
        StorageLive(_18);
        _18 = _16;
        _0 = <std::result::Result<(), LendingError> as FromResidual<std::result::Result<Infallible, LendingError>>>::from_residual(move _18) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_18);
        StorageDead(_16);
        StorageDead(_9);
        StorageDead(_8);
        StorageDead(_7);
        StorageDead(_10);
        goto -> bb48;
    }

    bb12: {
        StorageDead(_9);
        StorageDead(_8);
        ((*_1).1: i64) = move _7;
        StorageDead(_7);
        StorageDead(_10);
        StorageLive(_20);
        _20 = ();
        _0 = std::result::Result::<(), LendingError>::Ok(move _20);
        StorageDead(_20);
        goto -> bb48;
    }

    bb13: {
        StorageDead(_30);
        StorageLive(_31);
        _31 = {closure@programs\klend\src\lending_market\withdrawal_cap_operations.rs:66:42: 66:45};
        _28 = std::result::Result::<i64, TryFromIntError>::map_err::<LendingError, {closure@programs\klend\src\lending_market\withdrawal_cap_operations.rs:66:42: 66:45}>(move _29, move _31) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_31);
        StorageDead(_29);
        _27 = <std::result::Result<i64, LendingError> as Try>::branch(move _28) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_28);
        _32 = discriminant(_27);
        switchInt(move _32) -> [0: bb16, 1: bb17, otherwise: bb2];
    }

    bb16: {
        StorageLive(_36);
        _36 = ((_27 as Continue).0: i64);
        _26 = _36;
        StorageDead(_36);
        _24 = core::num::<impl i64>::checked_add(move _25, move _26) -> [return: bb19, unwind continue];
    }

    bb17: {
        StorageLive(_33);
        _33 = ((_27 as Break).0: std::result::Result<std::convert::Infallible, LendingError>);
        StorageLive(_35);
        _35 = _33;
        _0 = <std::result::Result<(), LendingError> as FromResidual<std::result::Result<Infallible, LendingError>>>::from_residual(move _35) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_35);
        StorageDead(_33);
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_24);
        StorageDead(_23);
        goto -> bb47;
    }

    bb19: {
        StorageDead(_26);
        StorageDead(_25);
        StorageLive(_37);
        StorageLive(_38);
        _38 = &(*_1);
        StorageLive(_39);
        _39 = &_2;
        _37 = {closure@programs\klend\src\lending_market\withdrawal_cap_operations.rs:68:37: 68:39} { caps: move _38, requested_amount: move _39 };
        StorageDead(_39);
        StorageDead(_38);
        _23 = std::option::Option::<i64>::ok_or_else::<LendingError, {closure@programs\klend\src\lending_market\withdrawal_cap_operations.rs:68:37: 68:39}>(move _24, move _37) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_37);
        StorageDead(_24);
        _22 = <std::result::Result<i64, LendingError> as Try>::branch(move _23) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_23);
        _40 = discriminant(_22);
        switchInt(move _40) -> [0: bb22, 1: bb23, otherwise: bb2];
    }

    bb22: {
        StorageLive(_44);
        _44 = ((_22 as Continue).0: i64);
        _21 = _44;
        StorageDead(_44);
        ((*_1).1: i64) = move _21;
        StorageDead(_21);
        StorageDead(_27);
        StorageDead(_22);
        StorageLive(_45);
        _45 = ();
        _0 = std::result::Result::<(), LendingError>::Ok(move _45);
        StorageDead(_45);
        goto -> bb48;
    }

    bb23: {
        StorageLive(_41);
        _41 = ((_22 as Break).0: std::result::Result<std::convert::Infallible, LendingError>);
        StorageLive(_43);
        _43 = _41;
        _0 = <std::result::Result<(), LendingError> as FromResidual<std::result::Result<Infallible, LendingError>>>::from_residual(move _43) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_43);
        StorageDead(_41);
        goto -> bb47;
    }

    bb25: {
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        _65 = ((*_1).1: i64);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        _70 = _2;
        _69 = <u64 as TryInto<i64>>::try_into(move _70) -> [return: bb34, unwind continue];
    }

    bb26: {
        StorageLive(_47);
        StorageLive(_48);
        _48 = ((*_1).1: i64);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        _53 = _2;
        _52 = <u64 as TryInto<i64>>::try_into(move _53) -> [return: bb27, unwind continue];
    }

    bb27: {
        StorageDead(_53);
        StorageLive(_54);
        _54 = {closure@programs\klend\src\lending_market\withdrawal_cap_operations.rs:80:38: 80:41};
        _51 = std::result::Result::<i64, TryFromIntError>::map_err::<LendingError, {closure@programs\klend\src\lending_market\withdrawal_cap_operations.rs:80:38: 80:41}>(move _52, move _54) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_54);
        StorageDead(_52);
        _50 = <std::result::Result<i64, LendingError> as Try>::branch(move _51) -> [return: bb29, unwind continue];
    }

    bb29: {
        StorageDead(_51);
        _55 = discriminant(_50);
        switchInt(move _55) -> [0: bb30, 1: bb31, otherwise: bb2];
    }

    bb30: {
        StorageLive(_59);
        _59 = ((_50 as Continue).0: i64);
        _49 = _59;
        StorageDead(_59);
        _47 = core::num::<impl i64>::saturating_sub(move _48, move _49) -> [return: bb33, unwind continue];
    }

    bb31: {
        StorageLive(_56);
        _56 = ((_50 as Break).0: std::result::Result<std::convert::Infallible, LendingError>);
        StorageLive(_58);
        _58 = _56;
        _0 = <std::result::Result<(), LendingError> as FromResidual<std::result::Result<Infallible, LendingError>>>::from_residual(move _58) -> [return: bb32, unwind continue];
    }

    bb32: {
        StorageDead(_58);
        StorageDead(_56);
        StorageDead(_49);
        StorageDead(_48);
        StorageDead(_47);
        StorageDead(_50);
        goto -> bb48;
    }

    bb33: {
        StorageDead(_49);
        StorageDead(_48);
        ((*_1).1: i64) = move _47;
        StorageDead(_47);
        StorageDead(_50);
        StorageLive(_60);
        _60 = ();
        _0 = std::result::Result::<(), LendingError>::Ok(move _60);
        StorageDead(_60);
        goto -> bb48;
    }

    bb34: {
        StorageDead(_70);
        StorageLive(_71);
        _71 = {closure@programs\klend\src\lending_market\withdrawal_cap_operations.rs:90:42: 90:45};
        _68 = std::result::Result::<i64, TryFromIntError>::map_err::<LendingError, {closure@programs\klend\src\lending_market\withdrawal_cap_operations.rs:90:42: 90:45}>(move _69, move _71) -> [return: bb35, unwind continue];
    }

    bb35: {
        StorageDead(_71);
        StorageDead(_69);
        _67 = <std::result::Result<i64, LendingError> as Try>::branch(move _68) -> [return: bb36, unwind continue];
    }

    bb36: {
        StorageDead(_68);
        _72 = discriminant(_67);
        switchInt(move _72) -> [0: bb37, 1: bb38, otherwise: bb2];
    }

    bb37: {
        StorageLive(_76);
        _76 = ((_67 as Continue).0: i64);
        _66 = _76;
        StorageDead(_76);
        _64 = core::num::<impl i64>::checked_sub(move _65, move _66) -> [return: bb40, unwind continue];
    }

    bb38: {
        StorageLive(_73);
        _73 = ((_67 as Break).0: std::result::Result<std::convert::Infallible, LendingError>);
        StorageLive(_75);
        _75 = _73;
        _0 = <std::result::Result<(), LendingError> as FromResidual<std::result::Result<Infallible, LendingError>>>::from_residual(move _75) -> [return: bb39, unwind continue];
    }

    bb39: {
        StorageDead(_75);
        StorageDead(_73);
        StorageDead(_66);
        StorageDead(_65);
        StorageDead(_64);
        StorageDead(_63);
        goto -> bb46;
    }

    bb40: {
        StorageDead(_66);
        StorageDead(_65);
        StorageLive(_77);
        StorageLive(_78);
        _78 = &(*_1);
        StorageLive(_79);
        _79 = &_2;
        _77 = {closure@programs\klend\src\lending_market\withdrawal_cap_operations.rs:92:37: 92:39} { caps: move _78, requested_amount: move _79 };
        StorageDead(_79);
        StorageDead(_78);
        _63 = std::option::Option::<i64>::ok_or_else::<LendingError, {closure@programs\klend\src\lending_market\withdrawal_cap_operations.rs:92:37: 92:39}>(move _64, move _77) -> [return: bb41, unwind continue];
    }

    bb41: {
        StorageDead(_77);
        StorageDead(_64);
        _62 = <std::result::Result<i64, LendingError> as Try>::branch(move _63) -> [return: bb42, unwind continue];
    }

    bb42: {
        StorageDead(_63);
        _80 = discriminant(_62);
        switchInt(move _80) -> [0: bb43, 1: bb44, otherwise: bb2];
    }

    bb43: {
        StorageLive(_84);
        _84 = ((_62 as Continue).0: i64);
        _61 = _84;
        StorageDead(_84);
        ((*_1).1: i64) = move _61;
        StorageDead(_61);
        StorageDead(_67);
        StorageDead(_62);
        StorageLive(_85);
        _85 = ();
        _0 = std::result::Result::<(), LendingError>::Ok(move _85);
        StorageDead(_85);
        goto -> bb48;
    }

    bb44: {
        StorageLive(_81);
        _81 = ((_62 as Break).0: std::result::Result<std::convert::Infallible, LendingError>);
        StorageLive(_83);
        _83 = _81;
        _0 = <std::result::Result<(), LendingError> as FromResidual<std::result::Result<Infallible, LendingError>>>::from_residual(move _83) -> [return: bb45, unwind continue];
    }

    bb45: {
        StorageDead(_83);
        StorageDead(_81);
        goto -> bb46;
    }

    bb46: {
        StorageDead(_61);
        StorageDead(_67);
        StorageDead(_62);
        goto -> bb48;
    }

    bb47: {
        StorageDead(_21);
        StorageDead(_27);
        StorageDead(_22);
        goto -> bb48;
    }

    bb48: {
        return;
    }
}
