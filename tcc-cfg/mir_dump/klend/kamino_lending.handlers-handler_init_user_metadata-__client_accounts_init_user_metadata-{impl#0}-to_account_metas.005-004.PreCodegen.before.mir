// MIR for `handlers::handler_init_user_metadata::__client_accounts_init_user_metadata::<impl at programs\klend\src\handlers\handler_init_user_metadata.rs:32:10: 32:18>::to_account_metas` before PreCodegen

fn handlers::handler_init_user_metadata::__client_accounts_init_user_metadata::<impl at programs\klend\src\handlers\handler_init_user_metadata.rs:32:10: 32:18>::to_account_metas(_1: &handlers::handler_init_user_metadata::__client_accounts_init_user_metadata::InitUserMetadata, _2: std::option::Option<bool>) -> Vec<anchor_lang::prelude::AccountMeta> {
    debug self => _1;
    debug is_signer => _2;
    let mut _0: std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _3: std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let _4: ();
    let mut _5: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _6: anchor_lang::prelude::AccountMeta;
    let mut _7: anchor_lang::prelude::Pubkey;
    let _8: ();
    let mut _9: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _10: anchor_lang::prelude::AccountMeta;
    let mut _11: anchor_lang::prelude::Pubkey;
    let _12: ();
    let mut _13: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _14: anchor_lang::prelude::AccountMeta;
    let mut _15: anchor_lang::prelude::Pubkey;
    let _16: ();
    let mut _17: &std::option::Option<anchor_lang::prelude::Pubkey>;
    let mut _18: isize;
    let _20: ();
    let mut _21: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _22: anchor_lang::prelude::AccountMeta;
    let mut _23: anchor_lang::prelude::Pubkey;
    let _24: ();
    let mut _25: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _26: anchor_lang::prelude::AccountMeta;
    let mut _27: anchor_lang::prelude::Pubkey;
    let mut _28: &anchor_lang::prelude::Pubkey;
    let _29: ();
    let mut _30: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _31: anchor_lang::prelude::AccountMeta;
    let mut _32: anchor_lang::prelude::Pubkey;
    let _33: ();
    let mut _34: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _35: anchor_lang::prelude::AccountMeta;
    let mut _36: anchor_lang::prelude::Pubkey;
    scope 1 {
        debug account_metas => _3;
        scope 2 {
            debug referrer_user_metadata => _19;
            let _19: &anchor_lang::prelude::Pubkey;
        }
    }

    bb0: {
        StorageLive(_3);
        _3 = Vec::<anchor_lang::prelude::AccountMeta>::new() -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageLive(_4);
        StorageLive(_5);
        _5 = &mut _3;
        StorageLive(_6);
        StorageLive(_7);
        _7 = ((*_1).0: anchor_lang::prelude::Pubkey);
        _6 = anchor_lang::prelude::AccountMeta::new_readonly(move _7, const true) -> [return: bb2, unwind: bb19];
    }

    bb2: {
        StorageDead(_7);
        _4 = Vec::<anchor_lang::prelude::AccountMeta>::push(move _5, move _6) -> [return: bb3, unwind: bb19];
    }

    bb3: {
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_8);
        StorageLive(_9);
        _9 = &mut _3;
        StorageLive(_10);
        StorageLive(_11);
        _11 = ((*_1).1: anchor_lang::prelude::Pubkey);
        _10 = anchor_lang::prelude::AccountMeta::new(move _11, const true) -> [return: bb4, unwind: bb19];
    }

    bb4: {
        StorageDead(_11);
        _8 = Vec::<anchor_lang::prelude::AccountMeta>::push(move _9, move _10) -> [return: bb5, unwind: bb19];
    }

    bb5: {
        StorageDead(_10);
        StorageDead(_9);
        StorageDead(_8);
        StorageLive(_12);
        StorageLive(_13);
        _13 = &mut _3;
        StorageLive(_14);
        StorageLive(_15);
        _15 = ((*_1).2: anchor_lang::prelude::Pubkey);
        _14 = anchor_lang::prelude::AccountMeta::new(move _15, const false) -> [return: bb6, unwind: bb19];
    }

    bb6: {
        StorageDead(_15);
        _12 = Vec::<anchor_lang::prelude::AccountMeta>::push(move _13, move _14) -> [return: bb7, unwind: bb19];
    }

    bb7: {
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_12);
        StorageLive(_16);
        StorageLive(_17);
        _17 = &((*_1).3: std::option::Option<anchor_lang::prelude::Pubkey>);
        _18 = discriminant((*_17));
        switchInt(move _18) -> [1: bb8, otherwise: bb11];
    }

    bb8: {
        StorageLive(_19);
        _19 = &(((*_17) as Some).0: anchor_lang::prelude::Pubkey);
        StorageLive(_20);
        StorageLive(_21);
        _21 = &mut _3;
        StorageLive(_22);
        StorageLive(_23);
        _23 = (*_19);
        _22 = anchor_lang::prelude::AccountMeta::new_readonly(move _23, const false) -> [return: bb9, unwind: bb19];
    }

    bb9: {
        StorageDead(_23);
        _20 = Vec::<anchor_lang::prelude::AccountMeta>::push(move _21, move _22) -> [return: bb10, unwind: bb19];
    }

    bb10: {
        StorageDead(_22);
        StorageDead(_21);
        StorageDead(_20);
        _16 = const ();
        StorageDead(_19);
        goto -> bb14;
    }

    bb11: {
        StorageLive(_24);
        StorageLive(_25);
        _25 = &mut _3;
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        _28 = const {alloc279: &anchor_lang::prelude::Pubkey};
        _27 = (*_28);
        _26 = anchor_lang::prelude::AccountMeta::new_readonly(move _27, const false) -> [return: bb12, unwind: bb19];
    }

    bb12: {
        StorageDead(_27);
        _24 = Vec::<anchor_lang::prelude::AccountMeta>::push(move _25, move _26) -> [return: bb13, unwind: bb19];
    }

    bb13: {
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_28);
        StorageDead(_24);
        _16 = const ();
        goto -> bb14;
    }

    bb14: {
        StorageDead(_17);
        StorageDead(_16);
        StorageLive(_29);
        StorageLive(_30);
        _30 = &mut _3;
        StorageLive(_31);
        StorageLive(_32);
        _32 = ((*_1).4: anchor_lang::prelude::Pubkey);
        _31 = anchor_lang::prelude::AccountMeta::new_readonly(move _32, const false) -> [return: bb15, unwind: bb19];
    }

    bb15: {
        StorageDead(_32);
        _29 = Vec::<anchor_lang::prelude::AccountMeta>::push(move _30, move _31) -> [return: bb16, unwind: bb19];
    }

    bb16: {
        StorageDead(_31);
        StorageDead(_30);
        StorageDead(_29);
        StorageLive(_33);
        StorageLive(_34);
        _34 = &mut _3;
        StorageLive(_35);
        StorageLive(_36);
        _36 = ((*_1).5: anchor_lang::prelude::Pubkey);
        _35 = anchor_lang::prelude::AccountMeta::new_readonly(move _36, const false) -> [return: bb17, unwind: bb19];
    }

    bb17: {
        StorageDead(_36);
        _33 = Vec::<anchor_lang::prelude::AccountMeta>::push(move _34, move _35) -> [return: bb18, unwind: bb19];
    }

    bb18: {
        StorageDead(_35);
        StorageDead(_34);
        StorageDead(_33);
        _0 = move _3;
        StorageDead(_3);
        return;
    }

    bb19 (cleanup): {
        drop(_3) -> [return: bb20, unwind terminate(cleanup)];
    }

    bb20 (cleanup): {
        resume;
    }
}

alloc279 (static: ID, size: 32, align: 1) {
    0x00 │ 04 b2 ac b1 12 58 cc e3 68 2c 41 8b a8 72 ff 3d │ .....X..h,A..r.=
    0x10 │ f9 11 02 71 2f 15 af 12 b6 be 69 b3 43 5b 00 08 │ ...q/.....i.C[..
}
