// MIR for `config_items::<impl at programs\klend\src\lending_market\config_items.rs:187:1: 187:57>::using_setter_and_getter` after PreCodegen

fn config_items::<impl at programs\klend\src\lending_market\config_items.rs:187:1: 187:57>::using_setter_and_getter(_1: ConfigItemUpdater<'_, H, (), (), (), (), ()>, _2: S, _3: G) -> ConfigItemUpdater<'_, H, T, S, G, for<'a> fn(&'a T) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<T>}, for<'a, 'b, 'c> fn(&'a T, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<T>}> {
    debug self => _1;
    debug setter => _2;
    debug getter => _3;
    let mut _0: lending_market::config_items::ConfigItemUpdater<'_, H, T, S, G, for<'a> fn(&'a T) -> std::result::Result<(), anchor_lang::error::Error> {lending_market::config_items::accept_anything::<T>}, for<'a, 'b, 'c> fn(&'a T, &'b mut std::fmt::Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {lending_market::config_items::write_debug::<T>}>;
    let mut _4: &mut H;
    let mut _5: std::string::String;
    let mut _6: G;
    let mut _7: S;
    let mut _8: std::marker::PhantomData<T>;
    let mut _9: &mut H;

    bb0: {
        StorageLive(_4);
        _9 = deref_copy (_1.0: &mut H);
        _4 = &mut (*_9);
        StorageLive(_5);
        _5 = move (_1.1: std::string::String);
        StorageLive(_6);
        _6 = move _3;
        StorageLive(_7);
        _7 = move _2;
        StorageLive(_8);
        _8 = PhantomData::<T>;
        _0 = ConfigItemUpdater::<'_, H, T, S, G, for<'a> fn(&'a T) -> std::result::Result<(), anchor_lang::error::Error> {accept_anything::<T>}, for<'a, 'b, 'c> fn(&'a T, &'b mut Formatter<'c>) -> std::result::Result<(), std::fmt::Error> {write_debug::<T>}> { target: move _4, name: move _5, setter: move _7, getter: move _6, validator: accept_anything::<T>, renderer: write_debug::<T>, value_type_phantom: move _8 };
        StorageDead(_8);
        StorageDead(_7);
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_4);
        return;
    }
}
