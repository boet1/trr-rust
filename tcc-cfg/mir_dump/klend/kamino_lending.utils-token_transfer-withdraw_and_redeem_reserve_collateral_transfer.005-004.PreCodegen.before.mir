// MIR for `withdraw_and_redeem_reserve_collateral_transfer` before PreCodegen

fn withdraw_and_redeem_reserve_collateral_transfer(_1: anchor_lang::prelude::AccountInfo<'_>, _2: anchor_lang::prelude::AccountInfo<'_>, _3: anchor_lang::prelude::AccountInfo<'_>, _4: anchor_lang::prelude::AccountInfo<'_>, _5: anchor_lang::prelude::AccountInfo<'_>, _6: anchor_lang::prelude::AccountInfo<'_>, _7: anchor_lang::prelude::AccountInfo<'_>, _8: anchor_lang::prelude::AccountInfo<'_>, _9: &[&[u8]], _10: u64, _11: u64, _12: u8) -> std::result::Result<(), anchor_lang::error::Error> {
    debug collateral_token_program => _1;
    debug liquidity_token_program => _2;
    debug reserve_liquidity_mint => _3;
    debug reserve_collateral_mint => _4;
    debug burn_reserve_source_collateral => _5;
    debug reserve_liquidity_supply => _6;
    debug user_destination_liquidity => _7;
    debug lending_market_authority => _8;
    debug authority_signer_seeds => _9;
    debug collateral_amount => _10;
    debug liquidity_amount => _11;
    debug liquidity_decimals => _12;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _13: ();
    let mut _14: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _15: std::result::Result<(), anchor_lang::error::Error>;
    let mut _16: anchor_lang::prelude::AccountInfo<'_>;
    let mut _17: anchor_lang::prelude::AccountInfo<'_>;
    let mut _18: anchor_lang::prelude::AccountInfo<'_>;
    let mut _19: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _20: anchor_lang::prelude::AccountInfo<'_>;
    let mut _21: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _22: u64;
    let mut _23: &[&[&[u8]]];
    let mut _24: &[&[&[u8]]; 1];
    let _25: &[&[&[u8]]; 1];
    let _26: [&[&[u8]]; 1];
    let mut _27: &[&[u8]];
    let mut _28: isize;
    let _29: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _30: !;
    let mut _31: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _32: ();
    let _33: ();
    let mut _34: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _35: std::result::Result<(), anchor_lang::error::Error>;
    let mut _36: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_spl::token_2022::TransferChecked<'_>>;
    let mut _37: anchor_lang::prelude::AccountInfo<'_>;
    let mut _38: anchor_spl::token_2022::TransferChecked<'_>;
    let mut _39: anchor_lang::prelude::AccountInfo<'_>;
    let mut _40: anchor_lang::prelude::AccountInfo<'_>;
    let mut _41: anchor_lang::prelude::AccountInfo<'_>;
    let mut _42: anchor_lang::prelude::AccountInfo<'_>;
    let mut _43: &[&[&[u8]]];
    let mut _44: &[&[&[u8]]; 1];
    let _45: &[&[&[u8]]; 1];
    let _46: [&[&[u8]]; 1];
    let mut _47: &[&[u8]];
    let mut _48: u64;
    let mut _49: u8;
    let mut _50: isize;
    let _51: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _52: !;
    let mut _53: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _54: ();
    let mut _55: ();
    let mut _56: bool;
    let mut _57: bool;
    let mut _58: bool;
    let mut _59: bool;
    let mut _60: bool;
    let mut _61: bool;
    let mut _62: bool;
    let mut _63: bool;
    let mut _64: isize;
    let mut _65: isize;
    let mut _66: isize;
    let mut _67: isize;
    let mut _68: isize;
    let mut _69: isize;
    let mut _70: isize;
    let mut _71: isize;
    let mut _72: isize;
    let mut _73: isize;
    scope 1 {
        debug residual => _29;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _32;
        scope 4 {
        }
    }
    scope 5 {
        debug residual => _51;
        scope 6 {
        }
    }
    scope 7 {
        debug val => _54;
        scope 8 {
        }
    }

    bb0: {
        _60 = const false;
        _59 = const false;
        _58 = const false;
        _57 = const false;
        _56 = const false;
        _63 = const false;
        _62 = const false;
        _61 = const false;
        _60 = const true;
        _59 = const true;
        _58 = const true;
        _57 = const true;
        _56 = const true;
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        _63 = const true;
        _16 = move _4;
        StorageLive(_17);
        _62 = const true;
        _17 = move _5;
        StorageLive(_18);
        StorageLive(_19);
        _19 = &_8;
        _18 = <anchor_lang::prelude::AccountInfo<'_> as Clone>::clone(move _19) -> [return: bb1, unwind: bb39];
    }

    bb1: {
        _61 = const true;
        StorageDead(_19);
        StorageLive(_20);
        StorageLive(_21);
        _21 = &_1;
        _20 = <anchor_lang::prelude::AccountInfo<'_> as Clone>::clone(move _21) -> [return: bb2, unwind: bb37];
    }

    bb2: {
        StorageDead(_21);
        StorageLive(_22);
        _22 = _10;
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        _27 = &(*_9);
        _26 = [move _27];
        StorageDead(_27);
        _25 = &_26;
        _24 = &(*_25);
        _23 = move _24 as &[&[&[u8]]] (PointerCoercion(Unsize));
        StorageDead(_24);
        _63 = const false;
        _62 = const false;
        _61 = const false;
        _15 = burn_with_signer(move _16, move _17, move _18, move _20, move _22, move _23) -> [return: bb3, unwind: bb37];
    }

    bb3: {
        StorageDead(_23);
        StorageDead(_22);
        StorageDead(_20);
        _61 = const false;
        StorageDead(_18);
        _62 = const false;
        StorageDead(_17);
        _63 = const false;
        StorageDead(_16);
        _14 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _15) -> [return: bb4, unwind: bb42];
    }

    bb4: {
        StorageDead(_15);
        _28 = discriminant(_14);
        switchInt(move _28) -> [0: bb5, 1: bb7, otherwise: bb6];
    }

    bb5: {
        StorageLive(_32);
        _32 = ((_14 as Continue).0: ());
        _13 = _32;
        StorageDead(_32);
        _64 = discriminant(_14);
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_14);
        StorageDead(_13);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        _60 = const false;
        _37 = move _2;
        StorageLive(_38);
        StorageLive(_39);
        _58 = const false;
        _39 = move _6;
        StorageLive(_40);
        _57 = const false;
        _40 = move _7;
        StorageLive(_41);
        _56 = const false;
        _41 = move _8;
        StorageLive(_42);
        _59 = const false;
        _42 = move _3;
        _38 = anchor_spl::token_2022::TransferChecked::<'_> { from: move _39, mint: move _42, to: move _40, authority: move _41 };
        StorageDead(_42);
        StorageDead(_41);
        StorageDead(_40);
        StorageDead(_39);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        _47 = &(*_9);
        _46 = [move _47];
        StorageDead(_47);
        _45 = &_46;
        _44 = &(*_45);
        _43 = move _44 as &[&[&[u8]]] (PointerCoercion(Unsize));
        StorageDead(_44);
        _36 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_spl::token_2022::TransferChecked<'_>>::new_with_signer(move _37, move _38, move _43) -> [return: bb9, unwind: bb42];
    }

    bb6: {
        unreachable;
    }

    bb7: {
        StorageLive(_29);
        _29 = move ((_14 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_31);
        _31 = move _29;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _31) -> [return: bb8, unwind: bb35];
    }

    bb8: {
        StorageDead(_31);
        StorageDead(_29);
        _70 = discriminant(_14);
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_14);
        StorageDead(_13);
        goto -> bb29;
    }

    bb9: {
        StorageDead(_43);
        StorageDead(_38);
        StorageDead(_37);
        StorageLive(_48);
        _48 = _11;
        StorageLive(_49);
        _49 = _12;
        _35 = anchor_spl::token_2022::transfer_checked(move _36, move _48, move _49) -> [return: bb10, unwind: bb42];
    }

    bb10: {
        StorageDead(_49);
        StorageDead(_48);
        StorageDead(_36);
        _34 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _35) -> [return: bb11, unwind: bb42];
    }

    bb11: {
        StorageDead(_35);
        _50 = discriminant(_34);
        switchInt(move _50) -> [0: bb12, 1: bb13, otherwise: bb6];
    }

    bb12: {
        StorageLive(_54);
        _54 = ((_34 as Continue).0: ());
        _33 = _54;
        StorageDead(_54);
        _66 = discriminant(_34);
        StorageDead(_46);
        StorageDead(_45);
        StorageDead(_34);
        StorageDead(_33);
        StorageLive(_55);
        _55 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _55);
        StorageDead(_55);
        drop(_1) -> [return: bb20, unwind: bb27];
    }

    bb13: {
        StorageLive(_51);
        _51 = move ((_34 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_53);
        _53 = move _51;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _53) -> [return: bb14, unwind: bb34];
    }

    bb14: {
        StorageDead(_53);
        StorageDead(_51);
        _68 = discriminant(_34);
        StorageDead(_46);
        StorageDead(_45);
        StorageDead(_34);
        StorageDead(_33);
        goto -> bb29;
    }

    bb15: {
        switchInt(_57) -> [0: bb16, otherwise: bb30];
    }

    bb16: {
        switchInt(_58) -> [0: bb17, otherwise: bb31];
    }

    bb17: {
        switchInt(_59) -> [0: bb18, otherwise: bb32];
    }

    bb18: {
        switchInt(_60) -> [0: bb19, otherwise: bb33];
    }

    bb19: {
        drop(_1) -> [return: bb20, unwind: bb27];
    }

    bb20: {
        return;
    }

    bb21 (cleanup): {
        switchInt(_63) -> [0: bb42, otherwise: bb40];
    }

    bb22 (cleanup): {
        switchInt(_57) -> [0: bb23, otherwise: bb43];
    }

    bb23 (cleanup): {
        switchInt(_58) -> [0: bb24, otherwise: bb44];
    }

    bb24 (cleanup): {
        switchInt(_59) -> [0: bb25, otherwise: bb45];
    }

    bb25 (cleanup): {
        switchInt(_60) -> [0: bb26, otherwise: bb46];
    }

    bb26 (cleanup): {
        drop(_1) -> [return: bb27, unwind terminate(cleanup)];
    }

    bb27 (cleanup): {
        resume;
    }

    bb28: {
        drop(_8) -> [return: bb15, unwind: bb22];
    }

    bb29: {
        switchInt(_56) -> [0: bb15, otherwise: bb28];
    }

    bb30: {
        drop(_7) -> [return: bb16, unwind: bb23];
    }

    bb31: {
        drop(_6) -> [return: bb17, unwind: bb24];
    }

    bb32: {
        drop(_3) -> [return: bb18, unwind: bb25];
    }

    bb33: {
        drop(_2) -> [return: bb19, unwind: bb26];
    }

    bb34 (cleanup): {
        _72 = discriminant(_34);
        goto -> bb42;
    }

    bb35 (cleanup): {
        _73 = discriminant(_14);
        goto -> bb42;
    }

    bb36 (cleanup): {
        drop(_18) -> [return: bb39, unwind terminate(cleanup)];
    }

    bb37 (cleanup): {
        switchInt(_61) -> [0: bb39, otherwise: bb36];
    }

    bb38 (cleanup): {
        drop(_17) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb39 (cleanup): {
        switchInt(_62) -> [0: bb21, otherwise: bb38];
    }

    bb40 (cleanup): {
        drop(_16) -> [return: bb42, unwind terminate(cleanup)];
    }

    bb41 (cleanup): {
        drop(_8) -> [return: bb22, unwind terminate(cleanup)];
    }

    bb42 (cleanup): {
        switchInt(_56) -> [0: bb22, otherwise: bb41];
    }

    bb43 (cleanup): {
        drop(_7) -> [return: bb23, unwind terminate(cleanup)];
    }

    bb44 (cleanup): {
        drop(_6) -> [return: bb24, unwind terminate(cleanup)];
    }

    bb45 (cleanup): {
        drop(_3) -> [return: bb25, unwind terminate(cleanup)];
    }

    bb46 (cleanup): {
        drop(_2) -> [return: bb26, unwind terminate(cleanup)];
    }
}
