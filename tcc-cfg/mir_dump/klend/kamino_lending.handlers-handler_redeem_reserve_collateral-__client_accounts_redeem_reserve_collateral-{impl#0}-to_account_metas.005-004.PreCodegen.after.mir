// MIR for `handlers::handler_redeem_reserve_collateral::__client_accounts_redeem_reserve_collateral::<impl at programs\klend\src\handlers\handler_redeem_reserve_collateral.rs:84:10: 84:18>::to_account_metas` after PreCodegen

fn handlers::handler_redeem_reserve_collateral::__client_accounts_redeem_reserve_collateral::<impl at programs\klend\src\handlers\handler_redeem_reserve_collateral.rs:84:10: 84:18>::to_account_metas(_1: &handlers::handler_redeem_reserve_collateral::__client_accounts_redeem_reserve_collateral::RedeemReserveCollateral, _2: std::option::Option<bool>) -> Vec<anchor_lang::prelude::AccountMeta> {
    debug self => _1;
    debug is_signer => _2;
    let mut _0: std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _3: std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let _4: ();
    let mut _5: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _6: anchor_lang::prelude::AccountMeta;
    let mut _7: anchor_lang::prelude::Pubkey;
    let _8: ();
    let mut _9: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _10: anchor_lang::prelude::AccountMeta;
    let mut _11: anchor_lang::prelude::Pubkey;
    let _12: ();
    let mut _13: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _14: anchor_lang::prelude::AccountMeta;
    let mut _15: anchor_lang::prelude::Pubkey;
    let _16: ();
    let mut _17: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _18: anchor_lang::prelude::AccountMeta;
    let mut _19: anchor_lang::prelude::Pubkey;
    let _20: ();
    let mut _21: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _22: anchor_lang::prelude::AccountMeta;
    let mut _23: anchor_lang::prelude::Pubkey;
    let _24: ();
    let mut _25: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _26: anchor_lang::prelude::AccountMeta;
    let mut _27: anchor_lang::prelude::Pubkey;
    let _28: ();
    let mut _29: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _30: anchor_lang::prelude::AccountMeta;
    let mut _31: anchor_lang::prelude::Pubkey;
    let _32: ();
    let mut _33: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _34: anchor_lang::prelude::AccountMeta;
    let mut _35: anchor_lang::prelude::Pubkey;
    let _36: ();
    let mut _37: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _38: anchor_lang::prelude::AccountMeta;
    let mut _39: anchor_lang::prelude::Pubkey;
    let _40: ();
    let mut _41: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _42: anchor_lang::prelude::AccountMeta;
    let mut _43: anchor_lang::prelude::Pubkey;
    let _44: ();
    let mut _45: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _46: anchor_lang::prelude::AccountMeta;
    let mut _47: anchor_lang::prelude::Pubkey;
    let _48: ();
    let mut _49: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _50: anchor_lang::prelude::AccountMeta;
    let mut _51: anchor_lang::prelude::Pubkey;
    scope 1 {
        debug account_metas => _3;
    }

    bb0: {
        StorageLive(_3);
        _3 = Vec::<anchor_lang::prelude::AccountMeta>::new() -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageLive(_4);
        StorageLive(_5);
        _5 = &mut _3;
        StorageLive(_6);
        StorageLive(_7);
        _7 = ((*_1).0: anchor_lang::prelude::Pubkey);
        _6 = anchor_lang::prelude::AccountMeta::new_readonly(move _7, const true) -> [return: bb2, unwind: bb26];
    }

    bb2: {
        StorageDead(_7);
        _4 = Vec::<anchor_lang::prelude::AccountMeta>::push(move _5, move _6) -> [return: bb3, unwind: bb26];
    }

    bb3: {
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_8);
        StorageLive(_9);
        _9 = &mut _3;
        StorageLive(_10);
        StorageLive(_11);
        _11 = ((*_1).1: anchor_lang::prelude::Pubkey);
        _10 = anchor_lang::prelude::AccountMeta::new_readonly(move _11, const false) -> [return: bb4, unwind: bb26];
    }

    bb4: {
        StorageDead(_11);
        _8 = Vec::<anchor_lang::prelude::AccountMeta>::push(move _9, move _10) -> [return: bb5, unwind: bb26];
    }

    bb5: {
        StorageDead(_10);
        StorageDead(_9);
        StorageDead(_8);
        StorageLive(_12);
        StorageLive(_13);
        _13 = &mut _3;
        StorageLive(_14);
        StorageLive(_15);
        _15 = ((*_1).2: anchor_lang::prelude::Pubkey);
        _14 = anchor_lang::prelude::AccountMeta::new(move _15, const false) -> [return: bb6, unwind: bb26];
    }

    bb6: {
        StorageDead(_15);
        _12 = Vec::<anchor_lang::prelude::AccountMeta>::push(move _13, move _14) -> [return: bb7, unwind: bb26];
    }

    bb7: {
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_12);
        StorageLive(_16);
        StorageLive(_17);
        _17 = &mut _3;
        StorageLive(_18);
        StorageLive(_19);
        _19 = ((*_1).3: anchor_lang::prelude::Pubkey);
        _18 = anchor_lang::prelude::AccountMeta::new_readonly(move _19, const false) -> [return: bb8, unwind: bb26];
    }

    bb8: {
        StorageDead(_19);
        _16 = Vec::<anchor_lang::prelude::AccountMeta>::push(move _17, move _18) -> [return: bb9, unwind: bb26];
    }

    bb9: {
        StorageDead(_18);
        StorageDead(_17);
        StorageDead(_16);
        StorageLive(_20);
        StorageLive(_21);
        _21 = &mut _3;
        StorageLive(_22);
        StorageLive(_23);
        _23 = ((*_1).4: anchor_lang::prelude::Pubkey);
        _22 = anchor_lang::prelude::AccountMeta::new_readonly(move _23, const false) -> [return: bb10, unwind: bb26];
    }

    bb10: {
        StorageDead(_23);
        _20 = Vec::<anchor_lang::prelude::AccountMeta>::push(move _21, move _22) -> [return: bb11, unwind: bb26];
    }

    bb11: {
        StorageDead(_22);
        StorageDead(_21);
        StorageDead(_20);
        StorageLive(_24);
        StorageLive(_25);
        _25 = &mut _3;
        StorageLive(_26);
        StorageLive(_27);
        _27 = ((*_1).5: anchor_lang::prelude::Pubkey);
        _26 = anchor_lang::prelude::AccountMeta::new(move _27, const false) -> [return: bb12, unwind: bb26];
    }

    bb12: {
        StorageDead(_27);
        _24 = Vec::<anchor_lang::prelude::AccountMeta>::push(move _25, move _26) -> [return: bb13, unwind: bb26];
    }

    bb13: {
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_24);
        StorageLive(_28);
        StorageLive(_29);
        _29 = &mut _3;
        StorageLive(_30);
        StorageLive(_31);
        _31 = ((*_1).6: anchor_lang::prelude::Pubkey);
        _30 = anchor_lang::prelude::AccountMeta::new(move _31, const false) -> [return: bb14, unwind: bb26];
    }

    bb14: {
        StorageDead(_31);
        _28 = Vec::<anchor_lang::prelude::AccountMeta>::push(move _29, move _30) -> [return: bb15, unwind: bb26];
    }

    bb15: {
        StorageDead(_30);
        StorageDead(_29);
        StorageDead(_28);
        StorageLive(_32);
        StorageLive(_33);
        _33 = &mut _3;
        StorageLive(_34);
        StorageLive(_35);
        _35 = ((*_1).7: anchor_lang::prelude::Pubkey);
        _34 = anchor_lang::prelude::AccountMeta::new(move _35, const false) -> [return: bb16, unwind: bb26];
    }

    bb16: {
        StorageDead(_35);
        _32 = Vec::<anchor_lang::prelude::AccountMeta>::push(move _33, move _34) -> [return: bb17, unwind: bb26];
    }

    bb17: {
        StorageDead(_34);
        StorageDead(_33);
        StorageDead(_32);
        StorageLive(_36);
        StorageLive(_37);
        _37 = &mut _3;
        StorageLive(_38);
        StorageLive(_39);
        _39 = ((*_1).8: anchor_lang::prelude::Pubkey);
        _38 = anchor_lang::prelude::AccountMeta::new(move _39, const false) -> [return: bb18, unwind: bb26];
    }

    bb18: {
        StorageDead(_39);
        _36 = Vec::<anchor_lang::prelude::AccountMeta>::push(move _37, move _38) -> [return: bb19, unwind: bb26];
    }

    bb19: {
        StorageDead(_38);
        StorageDead(_37);
        StorageDead(_36);
        StorageLive(_40);
        StorageLive(_41);
        _41 = &mut _3;
        StorageLive(_42);
        StorageLive(_43);
        _43 = ((*_1).9: anchor_lang::prelude::Pubkey);
        _42 = anchor_lang::prelude::AccountMeta::new_readonly(move _43, const false) -> [return: bb20, unwind: bb26];
    }

    bb20: {
        StorageDead(_43);
        _40 = Vec::<anchor_lang::prelude::AccountMeta>::push(move _41, move _42) -> [return: bb21, unwind: bb26];
    }

    bb21: {
        StorageDead(_42);
        StorageDead(_41);
        StorageDead(_40);
        StorageLive(_44);
        StorageLive(_45);
        _45 = &mut _3;
        StorageLive(_46);
        StorageLive(_47);
        _47 = ((*_1).10: anchor_lang::prelude::Pubkey);
        _46 = anchor_lang::prelude::AccountMeta::new_readonly(move _47, const false) -> [return: bb22, unwind: bb26];
    }

    bb22: {
        StorageDead(_47);
        _44 = Vec::<anchor_lang::prelude::AccountMeta>::push(move _45, move _46) -> [return: bb23, unwind: bb26];
    }

    bb23: {
        StorageDead(_46);
        StorageDead(_45);
        StorageDead(_44);
        StorageLive(_48);
        StorageLive(_49);
        _49 = &mut _3;
        StorageLive(_50);
        StorageLive(_51);
        _51 = ((*_1).11: anchor_lang::prelude::Pubkey);
        _50 = anchor_lang::prelude::AccountMeta::new_readonly(move _51, const false) -> [return: bb24, unwind: bb26];
    }

    bb24: {
        StorageDead(_51);
        _48 = Vec::<anchor_lang::prelude::AccountMeta>::push(move _49, move _50) -> [return: bb25, unwind: bb26];
    }

    bb25: {
        StorageDead(_50);
        StorageDead(_49);
        StorageDead(_48);
        _0 = move _3;
        StorageDead(_3);
        return;
    }

    bb26 (cleanup): {
        drop(_3) -> [return: bb27, unwind terminate(cleanup)];
    }

    bb27 (cleanup): {
        resume;
    }
}
