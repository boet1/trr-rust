source_file (Point(row=0, column=0) - Point(row=23, column=0))
  line_comment (Point(row=0, column=0) - Point(row=1, column=0))
    // (Point(row=0, column=0) - Point(row=0, column=2))
    inner_doc_comment_marker (Point(row=0, column=2) - Point(row=0, column=3))
      ! (Point(row=0, column=2) - Point(row=0, column=3))
    doc_comment (Point(row=0, column=3) - Point(row=1, column=0))
  inner_attribute_item (Point(row=2, column=0) - Point(row=2, column=65))
    # (Point(row=2, column=0) - Point(row=2, column=1))
    ! (Point(row=2, column=1) - Point(row=2, column=2))
    [ (Point(row=2, column=2) - Point(row=2, column=3))
    attribute (Point(row=2, column=3) - Point(row=2, column=64))
      identifier (Point(row=2, column=3) - Point(row=2, column=6))
      token_tree (Point(row=2, column=6) - Point(row=2, column=64))
        ( (Point(row=2, column=6) - Point(row=2, column=7))
        identifier (Point(row=2, column=7) - Point(row=2, column=10))
        token_tree (Point(row=2, column=10) - Point(row=2, column=63))
          ( (Point(row=2, column=10) - Point(row=2, column=11))
          identifier (Point(row=2, column=11) - Point(row=2, column=22))
          = (Point(row=2, column=23) - Point(row=2, column=24))
          string_literal (Point(row=2, column=25) - Point(row=2, column=30))
            " (Point(row=2, column=25) - Point(row=2, column=26))
            string_content (Point(row=2, column=26) - Point(row=2, column=29))
            " (Point(row=2, column=29) - Point(row=2, column=30))
          , (Point(row=2, column=30) - Point(row=2, column=31))
          identifier (Point(row=2, column=32) - Point(row=2, column=35))
          token_tree (Point(row=2, column=35) - Point(row=2, column=62))
            ( (Point(row=2, column=35) - Point(row=2, column=36))
            identifier (Point(row=2, column=36) - Point(row=2, column=43))
            = (Point(row=2, column=44) - Point(row=2, column=45))
            string_literal (Point(row=2, column=46) - Point(row=2, column=61))
              " (Point(row=2, column=46) - Point(row=2, column=47))
              string_content (Point(row=2, column=47) - Point(row=2, column=60))
              " (Point(row=2, column=60) - Point(row=2, column=61))
            ) (Point(row=2, column=61) - Point(row=2, column=62))
          ) (Point(row=2, column=62) - Point(row=2, column=63))
        ) (Point(row=2, column=63) - Point(row=2, column=64))
    ] (Point(row=2, column=64) - Point(row=2, column=65))
  use_declaration (Point(row=4, column=0) - Point(row=4, column=44))
    use (Point(row=4, column=0) - Point(row=4, column=3))
    scoped_use_list (Point(row=4, column=4) - Point(row=4, column=43))
      crate (Point(row=4, column=4) - Point(row=4, column=9))
      :: (Point(row=4, column=9) - Point(row=4, column=11))
      use_list (Point(row=4, column=11) - Point(row=4, column=43))
        { (Point(row=4, column=11) - Point(row=4, column=12))
        scoped_identifier (Point(row=4, column=12) - Point(row=4, column=31))
          identifier (Point(row=4, column=12) - Point(row=4, column=17))
          :: (Point(row=4, column=17) - Point(row=4, column=19))
          identifier (Point(row=4, column=19) - Point(row=4, column=31))
        , (Point(row=4, column=31) - Point(row=4, column=32))
        identifier (Point(row=4, column=33) - Point(row=4, column=42))
        } (Point(row=4, column=42) - Point(row=4, column=43))
    ; (Point(row=4, column=43) - Point(row=4, column=44))
  use_declaration (Point(row=5, column=0) - Point(row=8, column=2))
    use (Point(row=5, column=0) - Point(row=5, column=3))
    scoped_use_list (Point(row=5, column=4) - Point(row=8, column=1))
      identifier (Point(row=5, column=4) - Point(row=5, column=18))
      :: (Point(row=5, column=18) - Point(row=5, column=20))
      use_list (Point(row=5, column=20) - Point(row=8, column=1))
        { (Point(row=5, column=20) - Point(row=5, column=21))
        scoped_identifier (Point(row=6, column=4) - Point(row=6, column=29))
          identifier (Point(row=6, column=4) - Point(row=6, column=16))
          :: (Point(row=6, column=16) - Point(row=6, column=18))
          identifier (Point(row=6, column=18) - Point(row=6, column=29))
        , (Point(row=6, column=29) - Point(row=6, column=30))
        identifier (Point(row=6, column=31) - Point(row=6, column=41))
        , (Point(row=6, column=41) - Point(row=6, column=42))
        scoped_identifier (Point(row=6, column=43) - Point(row=6, column=68))
          identifier (Point(row=6, column=43) - Point(row=6, column=53))
          :: (Point(row=6, column=53) - Point(row=6, column=55))
          identifier (Point(row=6, column=55) - Point(row=6, column=68))
        , (Point(row=6, column=68) - Point(row=6, column=69))
        scoped_identifier (Point(row=7, column=4) - Point(row=7, column=36))
          identifier (Point(row=7, column=4) - Point(row=7, column=17))
          :: (Point(row=7, column=17) - Point(row=7, column=19))
          identifier (Point(row=7, column=19) - Point(row=7, column=36))
        , (Point(row=7, column=36) - Point(row=7, column=37))
        scoped_identifier (Point(row=7, column=38) - Point(row=7, column=52))
          identifier (Point(row=7, column=38) - Point(row=7, column=44))
          :: (Point(row=7, column=44) - Point(row=7, column=46))
          identifier (Point(row=7, column=46) - Point(row=7, column=52))
        , (Point(row=7, column=52) - Point(row=7, column=53))
        } (Point(row=8, column=0) - Point(row=8, column=1))
    ; (Point(row=8, column=1) - Point(row=8, column=2))
  expression_statement (Point(row=10, column=0) - Point(row=10, column=33))
    macro_invocation (Point(row=10, column=0) - Point(row=10, column=32))
      identifier (Point(row=10, column=0) - Point(row=10, column=10))
      ! (Point(row=10, column=10) - Point(row=10, column=11))
      token_tree (Point(row=10, column=11) - Point(row=10, column=32))
        ( (Point(row=10, column=11) - Point(row=10, column=12))
        identifier (Point(row=10, column=12) - Point(row=10, column=31))
        ) (Point(row=10, column=31) - Point(row=10, column=32))
    ; (Point(row=10, column=32) - Point(row=10, column=33))
  function_item (Point(row=11, column=0) - Point(row=22, column=1))
    fn (Point(row=11, column=0) - Point(row=11, column=2))
    identifier (Point(row=11, column=3) - Point(row=11, column=22))
    parameters (Point(row=11, column=22) - Point(row=15, column=1))
      ( (Point(row=11, column=22) - Point(row=11, column=23))
      parameter (Point(row=12, column=4) - Point(row=12, column=23))
        identifier (Point(row=12, column=4) - Point(row=12, column=14))
        : (Point(row=12, column=14) - Point(row=12, column=15))
        reference_type (Point(row=12, column=16) - Point(row=12, column=23))
          & (Point(row=12, column=16) - Point(row=12, column=17))
          type_identifier (Point(row=12, column=17) - Point(row=12, column=23))
      , (Point(row=12, column=23) - Point(row=12, column=24))
      parameter (Point(row=13, column=4) - Point(row=13, column=28))
        identifier (Point(row=13, column=4) - Point(row=13, column=12))
        : (Point(row=13, column=12) - Point(row=13, column=13))
        reference_type (Point(row=13, column=14) - Point(row=13, column=28))
          & (Point(row=13, column=14) - Point(row=13, column=15))
          array_type (Point(row=13, column=15) - Point(row=13, column=28))
            [ (Point(row=13, column=15) - Point(row=13, column=16))
            type_identifier (Point(row=13, column=16) - Point(row=13, column=27))
            ] (Point(row=13, column=27) - Point(row=13, column=28))
      , (Point(row=13, column=28) - Point(row=13, column=29))
      parameter (Point(row=14, column=4) - Point(row=14, column=27))
        identifier (Point(row=14, column=4) - Point(row=14, column=20))
        : (Point(row=14, column=20) - Point(row=14, column=21))
        reference_type (Point(row=14, column=22) - Point(row=14, column=27))
          & (Point(row=14, column=22) - Point(row=14, column=23))
          array_type (Point(row=14, column=23) - Point(row=14, column=27))
            [ (Point(row=14, column=23) - Point(row=14, column=24))
            primitive_type (Point(row=14, column=24) - Point(row=14, column=26))
            ] (Point(row=14, column=26) - Point(row=14, column=27))
      , (Point(row=14, column=27) - Point(row=14, column=28))
      ) (Point(row=15, column=0) - Point(row=15, column=1))
    -> (Point(row=15, column=2) - Point(row=15, column=4))
    type_identifier (Point(row=15, column=5) - Point(row=15, column=18))
    block (Point(row=15, column=19) - Point(row=22, column=1))
      { (Point(row=15, column=19) - Point(row=15, column=20))
      expression_statement (Point(row=16, column=4) - Point(row=20, column=5))
        if_expression (Point(row=16, column=4) - Point(row=20, column=5))
          if (Point(row=16, column=4) - Point(row=16, column=6))
          let_condition (Point(row=16, column=7) - Point(row=16, column=94))
            let (Point(row=16, column=7) - Point(row=16, column=10))
            tuple_struct_pattern (Point(row=16, column=11) - Point(row=16, column=21))
              identifier (Point(row=16, column=11) - Point(row=16, column=14))
              ( (Point(row=16, column=14) - Point(row=16, column=15))
              identifier (Point(row=16, column=15) - Point(row=16, column=20))
              ) (Point(row=16, column=20) - Point(row=16, column=21))
            = (Point(row=16, column=22) - Point(row=16, column=23))
            call_expression (Point(row=16, column=24) - Point(row=16, column=94))
              scoped_identifier (Point(row=16, column=24) - Point(row=16, column=54))
                identifier (Point(row=16, column=24) - Point(row=16, column=33))
                :: (Point(row=16, column=33) - Point(row=16, column=35))
                identifier (Point(row=16, column=35) - Point(row=16, column=54))
              arguments (Point(row=16, column=54) - Point(row=16, column=94))
                ( (Point(row=16, column=54) - Point(row=16, column=55))
                identifier (Point(row=16, column=55) - Point(row=16, column=65))
                , (Point(row=16, column=65) - Point(row=16, column=66))
                identifier (Point(row=16, column=67) - Point(row=16, column=75))
                , (Point(row=16, column=75) - Point(row=16, column=76))
                identifier (Point(row=16, column=77) - Point(row=16, column=93))
                ) (Point(row=16, column=93) - Point(row=16, column=94))
          block (Point(row=16, column=95) - Point(row=20, column=5))
            { (Point(row=16, column=95) - Point(row=16, column=96))
            line_comment (Point(row=17, column=8) - Point(row=17, column=45))
              // (Point(row=17, column=8) - Point(row=17, column=10))
            expression_statement (Point(row=18, column=8) - Point(row=18, column=38))
              call_expression (Point(row=18, column=8) - Point(row=18, column=37))
                generic_function (Point(row=18, column=8) - Point(row=18, column=35))
                  field_expression (Point(row=18, column=8) - Point(row=18, column=19))
                    identifier (Point(row=18, column=8) - Point(row=18, column=13))
                    . (Point(row=18, column=13) - Point(row=18, column=14))
                    field_identifier (Point(row=18, column=14) - Point(row=18, column=19))
                  :: (Point(row=18, column=19) - Point(row=18, column=21))
                  type_arguments (Point(row=18, column=21) - Point(row=18, column=35))
                    < (Point(row=18, column=21) - Point(row=18, column=22))
                    type_identifier (Point(row=18, column=22) - Point(row=18, column=34))
                    > (Point(row=18, column=34) - Point(row=18, column=35))
                arguments (Point(row=18, column=35) - Point(row=18, column=37))
                  ( (Point(row=18, column=35) - Point(row=18, column=36))
                  ) (Point(row=18, column=36) - Point(row=18, column=37))
              ; (Point(row=18, column=37) - Point(row=18, column=38))
            expression_statement (Point(row=19, column=8) - Point(row=19, column=26))
              return_expression (Point(row=19, column=8) - Point(row=19, column=25))
                return (Point(row=19, column=8) - Point(row=19, column=14))
                call_expression (Point(row=19, column=15) - Point(row=19, column=25))
                  identifier (Point(row=19, column=15) - Point(row=19, column=18))
                  arguments (Point(row=19, column=18) - Point(row=19, column=25))
                    ( (Point(row=19, column=18) - Point(row=19, column=19))
                    identifier (Point(row=19, column=19) - Point(row=19, column=24))
                    ) (Point(row=19, column=24) - Point(row=19, column=25))
              ; (Point(row=19, column=25) - Point(row=19, column=26))
            } (Point(row=20, column=4) - Point(row=20, column=5))
      call_expression (Point(row=21, column=4) - Point(row=21, column=10))
        identifier (Point(row=21, column=4) - Point(row=21, column=6))
        arguments (Point(row=21, column=6) - Point(row=21, column=10))
          ( (Point(row=21, column=6) - Point(row=21, column=7))
          unit_expression (Point(row=21, column=7) - Point(row=21, column=9))
            ( (Point(row=21, column=7) - Point(row=21, column=8))
            ) (Point(row=21, column=8) - Point(row=21, column=9))
          ) (Point(row=21, column=9) - Point(row=21, column=10))
      } (Point(row=22, column=0) - Point(row=22, column=1))